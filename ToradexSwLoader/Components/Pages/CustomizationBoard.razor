@page "/customization/{deviceId:int}/{productId:int}/{packageId}/{fleetId}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject SweetAlertService Swal

<PageTitle>Customizar Placa</PageTitle>

<a href="" onclick="history.back()" class="text-black">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

<h3 class="text-center">Placa Final</h3>

@if (!isLoading)
{
    <h5 style="text-align: center;">Dispositivo: @selectedDevice?.Name</h5>
    <h5 style="text-align: center;">Software: @selectedPackage?.Id</h5>
    <h5 style="text-align: center;">Frota: @selectedFleet?.Name</h5>
}

<div class="center-customization">
    @if (!isEditing)
    {
        <h4 class="custom-h4 text-center px-5">
            @finalBoard
            <span class="bi bi-pencil-square px-5" aria-hidden="true" style="cursor:pointer" @onclick="ChangeName"></span>
        </h4>

        <div class="text-center fixed-bottom pb-5">
            <button type="submit" class="btn btn-color btn-lg" style="width: 20vw; font-size: 1.5rem;" @onclick=ConfirmAndSubmit>OK</button>
        </div>

    }
    else
    {
        <div class="edit-form">
            <label for="text" class="pb-4" style="font-size: 1.5rem;">Alterar nome da placa</label>
            <input type="text" @bind="finalBoard" class="form-control w-100 mx-auto" style="font-size: 1.2rem; text-align: center;"/>
            <div>
                <button class="btn btn-color mt-5 btn-lg btn-edit-custom" @onclick="SaveName">Salvar</button>
                <button class="btn btn-danger mt-5 ms-5 btn-lg btn-edit-custom" @onclick="CancelEdit">Cancelar</button>

            </div>
            
        </div>
    }
</div>

@code {
    [Parameter]
    public int deviceId { get; set; }
    private Device? selectedDevice = new Device();

    [Parameter]
    public int productId { get; set; }

    [Parameter]
    public string packageId { get; set; } = string.Empty;
    private Package? selectedPackage = new Package();

    [Parameter]
    public string fleetId { get; set; } = string.Empty;
    private Fleet? selectedFleet = new Fleet();

    private bool isLoading = true;
    private string finalBoard = string.Empty;
    private bool isEditing = false;
    private string originalFinalBoard = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"ID DO PACOTE RECEBIDO: {packageId}");

        using var context = DbContextFactory.CreateDbContext();
        selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.Id == deviceId);
        selectedPackage = await context.Packages.FirstOrDefaultAsync(p => p.Id == packageId);
        selectedFleet = await context.Fleets.FirstOrDefaultAsync(f => f.Id == fleetId);

        isLoading = false;
    }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(finalBoard) && selectedDevice != null && selectedPackage != null && selectedFleet != null)
        {
            finalBoard = $"{selectedPackage.Version}_{selectedFleet.Name}";
        }
    }

    private void ChangeName()
    {
        originalFinalBoard = finalBoard;
        isEditing = true;
    }

    private void SaveName()
    {
        isEditing = false;
    }

    private void CancelEdit()
    {
        finalBoard = originalFinalBoard;
        isEditing = false;
    }

    private async Task ConfirmAndSubmit()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Deseja continuar?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Continuar",
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
            using var context = DbContextFactory.CreateDbContext();
            var userAct = new UserActivity
                {
                        UserId = LoginService.UserId,
                        ActMessage = $"Iniciou o carregamento da placa -> Nome: {finalBoard}",
                        ActTimeStamp = DateTime.Now
                };

            var finalProduct = new FinalProduct
                {
                    Name = finalBoard,
                    Status = "UpdatePending",
                    CreatedAt = DateTime.Now,
                    DeviceId = deviceId,
                    ProductId = productId,
                    PackageId = packageId,
                    FleetId = fleetId,
                    UserId = LoginService.UserId
                };

            context.UserActivities.Add(userAct);
            context.FinalProducts.Add(finalProduct);
            await context.SaveChangesAsync();

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Produto Final criado com sucesso!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonColor = "#0B5120"
            });

            UriHelper.NavigateTo("/home");
        }
    }

    public class JSResult
    {
        public bool IsConfirmed { get; set; }
    }
}