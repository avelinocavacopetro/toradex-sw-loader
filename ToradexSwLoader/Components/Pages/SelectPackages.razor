@page "/packages/{selectedDeviceName}"

@using ToradexSwLoader.Data
@using ToradexSwLoader.Models
@using ToradexSwLoader.Services
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject AppDbContext DbContext
@inject PackageService PackageService
@inject TorizonService TorizonService
@inject NavigationManager UriHelper
@inject IJSRuntime JS
@inject SweetAlertService Swal

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>Selecionar Software</PageTitle>


<a href="" onclick="history.back()" class="text-black">
    <i class="bi bi-arrow-left fs-1"></i>
</a>

<h3 style="text-align: center;">Selecionar Software</h3>
<h5 style="text-align: center;">Dispositivo: @selectedDeviceName</h5>
<br />
<br />
<br />

<div class="d-flex justify-content-end pe-5">
    <div class="d-flex justify-content-between align-items-center gap-3">
        <span>@actualPage - @totalPages de @totalPages</span>
        <div class="d-flex gap-2">
            <button class="btn custom-outline-button btn-lg"
                    @onclick="PrevPage" disabled="@(!CanGoPrev)">
                &lt;
            </button>

            <button class="btn custom-outline-button btn-lg"
                    @onclick="NextPage" disabled="@(!CanGoNext)">
                &gt;
            </button>
        </div>
    </div>
</div>

@if (totalPackages == null)
{
    <p><em>A carregar...</em></p>
}
else
{
    <table class="table custom-table1 package-table mt-5">
        <thead>
            <tr>
                <th>Nome</th>
                <th style="text-align: center;">Hardware</th>
                <th style="text-align: center;">Versão</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var package in paginatedPackages)
            {
                <tr class="@GetRowClass(package)" @onclick="() => SelectRow(package)">
                    <td>@package.PackageName</td>
                    <td style="text-align: center;">
                        @foreach (var h in @package.PackageHardwares)
                        {
                            @h.Hardware.HardwareName
                            ;
                        }
                    </td>
                    <td style="text-align: center;">@package.PackageVersion</td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="text-center fixed-bottom pb-5">
    <button class="btn btn-color btn-lg" @onclick="OnClick">Instalar</button>
</div>

@code {
    [Parameter]
    public string selectedDeviceName { get; set; }

    private List<Package> totalPackages = new List<Package>();
    private List<Package> packages = new List<Package>();
    private List<Package> paginatedPackages = new List<Package>();
    private Package? selectedPackage;


    private int actualPage = 1;
    private int packagesPerPage = 5;
    private int totalPages => (int)Math.Ceiling((double)packages.Count / packagesPerPage);
    private string state = "docker-compose";
    private string selectedPackageName;

    private void SelectRow(Package package)
    {
        selectedPackage = package;
        selectedPackageName = package.PackageName;
    }

    private async Task OnClick()
    {
        if (selectedPackage != null)
        {
            UriHelper.NavigateTo($"/charging/{Uri.EscapeDataString(selectedDeviceName)}/{Uri.EscapeDataString(selectedPackageName)}");
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Selecione um software!",
                icon = "warning",
                confirmButtonColor = "#0B5120"
            });
        }
    }

    private string GetRowClass(Package package)
    {
        return selectedPackage == package ? "table-primary" : string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        var packagesUrl = "https://app.torizon.io/api/v2beta/packages?limit=200";

        bool imported = await PackageService.ImportPackagesFromApiAsync(packagesUrl);

        if (imported)
        {
            totalPackages = await DbContext.Packages
                                            .Include(p => p.PackageHardwares)
                                            .ThenInclude(ph => ph.Hardware)
                                            .ToListAsync();
        }
        else
        {
            totalPackages = new List<Package>();
        }

        UpdatePage();
    }

    private void UpdatePage()
    {
        paginatedPackages = totalPackages
                                 .Skip((actualPage - 1) * packagesPerPage)
                                 .Take(packagesPerPage)
                                 .ToList();
        packages = totalPackages
                               .ToList();
    }

    private void NextPage()
    {
        if (actualPage < totalPages)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (actualPage > 1)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private bool CanGoNext => actualPage < totalPages;
    private bool CanGoPrev => actualPage > 1;
}
