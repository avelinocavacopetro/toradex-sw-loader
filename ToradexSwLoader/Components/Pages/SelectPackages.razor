@page "/packages/{deviceId}"

@using ToradexSwLoader.Data
@using ToradexSwLoader.Models
@using ToradexSwLoader.Services
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject PackageService PackageService
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject NavigationManager UriHelper
@inject IJSRuntime JS
@inject SweetAlertService Swal

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>Selecionar Software</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>

}
else
{
    <a href="#"
       onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
       class="text-black"
       style="cursor: @(isLoading ? "default" : "pointer");">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>


    <h3 style="text-align: center;">Selecionar Software</h3>
    <h5 style="text-align: center;">Dispositivo: @selectedDevice.DeviceName</h5>
    <br />
    <br />
    <br />

    <div class="d-flex justify-content-end pe-5">
        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @totalPages de @totalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>

    <table class="table custom-table1 package-table mt-5">
        <thead>
            <tr>
                <th>Nome</th>
                <th style="text-align: center;">Hardware</th>
                <th style="text-align: center;">Versão</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var package in paginatedPackages)
            {
                <tr class="@GetRowClass(package)" @onclick="() => SelectRow(package)">
                    <td>@package.PackageName</td>
                    <td style="text-align: center;">
                        @foreach (var h in @package.PackageHardwares)
                        {
                            @h.Hardware.HardwareName
                            ;
                        }
                    </td>
                    <td style="text-align: center;">@package.PackageVersion</td>
                </tr>
            }
        </tbody>
    </table>


    <div class="text-center fixed-bottom pb-5">
        <button class="btn btn-color btn-lg" @onclick="OnClick">Seguinte</button>
    </div>
}

<style>
    .center {
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        min-height: 80vh;
    }
</style>

@code {
    [Parameter]
    public string deviceId { get; set; }
    private Device selectedDevice;

    private List<Package> totalPackages = new List<Package>();
    private List<Package> packages = new List<Package>();
    private List<Package> paginatedPackages = new List<Package>();
    private Package? selectedPackage;

    private int actualPage = 1;
    private int packagesPerPage = 5;
    private int totalPages => (int)Math.Ceiling((double)packages.Count / packagesPerPage);
    private string state = "docker-compose";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        totalPackages = await context.Packages
                                     .Include(p => p.PackageHardwares)
                                     .ThenInclude(ph => ph.Hardware)
                                     .ToListAsync();

        UpdatePage();

        var importTask = Task.Run(async () =>
        {
            selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.DeviceId == deviceId);
            var packagesUrl = "https://app.torizon.io/api/v2beta/packages?limit=200";
            bool imported = await PackageService.ImportPackagesFromApiAsync(packagesUrl);
            return imported;
        });

        bool importResult = await importTask;

        if (importResult)
        {
            using var newContext = DbContextFactory.CreateDbContext();
            totalPackages = await newContext.Packages
                                            .Include(p => p.PackageHardwares)
                                            .ThenInclude(ph => ph.Hardware)
                                            .ToListAsync();
            UpdatePage();
        }

        isLoading = false;
    }


    private void SelectRow(Package package)
    {
        selectedPackage = package;
    }

    private async Task OnClick()
    {
        using var context = DbContextFactory.CreateDbContext();

        if (selectedPackage != null)
        {
            var userAct = new UserActivity
            {
                UserLoginId = LoginService.CurrentLoginId,
                ActMessage = $"Colaborador selecionou o software: Nome: {selectedPackage.PackageName} | Versão: {selectedPackage.PackageVersion}",
                ActTimeStamp = DateTime.Now
            };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/selectFleet/{Uri.EscapeDataString(deviceId)}/{Uri.EscapeDataString(selectedPackage.PackageId)}");
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Selecione um software!",
                icon = "warning",
                confirmButtonColor = "#0B5120"
            });
        }
    }

    private string GetRowClass(Package package)
    {
        return selectedPackage == package ? "table-primary" : string.Empty;
    }

    private void UpdatePage()
    {
        paginatedPackages = totalPackages
                                 .Skip((actualPage - 1) * packagesPerPage)
                                 .Take(packagesPerPage)
                                 .ToList();
        packages = totalPackages
                               .ToList();
    }

    private void NextPage()
    {
        if (actualPage < totalPages)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (actualPage > 1)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private bool CanGoNext => actualPage < totalPages;
    private bool CanGoPrev => actualPage > 1;
}