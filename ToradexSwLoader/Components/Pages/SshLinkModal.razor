@using log4net
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject TorizonService TorizonService
@inject SweetAlertService Swal
@inject LoginService LoginService
@inject IJSRuntime JS

<div style="display: flex; align-items: center; flex-direction: column;">
    <p class="fs-5 text-muted text-center mb-2">
        Utilize o comando abaixo para aceder remotamente ao dispositivo via SSH.
    </p>
    <p class="fs-5 text-muted text-center mb-2">
        Clique no ícone para copiar.
    </p>

    <h5 class="custom-label text-center px-5">
        @sshLink
        <span class="bi bi-copy fs-4 px-3" aria-hidden="true" style="cursor:pointer" @onclick="CopyToClipboard" title="Copiar"></span>
    </h5>

    @if (copied)
    {
        <div class="text-success text-center mt-2">
            Comando copiado para a área de transferência!
        </div>
    }
</div>

@code {
    // Parameters
    [Parameter]
    public string? DeviceUuid { get; set; }

    [Parameter]
    public EventCallback OnCloseModal { get; set; }

    // Object Variables
    private SessionSsh? link = new();
    private static readonly ILog log = LogManager.GetLogger(typeof(SshLinkModal));

    // String Variables
    private string sshLink = string.Empty;

    // Boolean Variables
    private bool copied = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            if (!await TorizonService.AuthenticateAsync())
            {
                log.Error("Error authenticating to Torizon Service.");
                return;
            }

            var sessionUrl = $"https://app.torizon.io/api/v2beta/remote-access/device/{DeviceUuid}/sessions";
            link = await TorizonService.GetSessionSshAsync(sessionUrl);

            sshLink = $"ssh -p {link?.ReversePort} torizon@ras.torizon.io";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            log.Error("Error authenticating to Torizon Service or loading ssh link.", ex);
        }
    }

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrWhiteSpace(sshLink) && JS != null)
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", sshLink);
            copied = true;
            StateHasChanged();
            await Task.Delay(3000);
            copied = false;
            StateHasChanged();
        }
    }
}