@page "/manageProducts"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Gerir Produtos</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
} 
else
{
    <div class="center-customization">
        @if (!isAdding)
        {
            <div class="container-fluid">

               <h3 style="text-align: left;">Configurar filtros a aplicar:</h3>

               <div class="pb-2 pt-4" style="text-align: right;">
                    <button class="btn btn-color btn-lg"
                            style="font-size: 2rem; width: 50px; height: 50px; padding: 0;"
                            @onclick="AddProduct">+</button>
               </div>


                <div class="pb-5">
                    <table class="table mt-3 w-100">
                        <thead style="background-color: #0c6527; color: white;">
                            <tr>
                                <th>Nome do Produto</th>
                                <th class="text-center">Selecionar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products)
                            {
                                <tr class="table-light">
                                    <td>@product.ProductName</td>
                                    <td>
                                        <div class="form-check d-flex justify-content-center">
                                            <input type="checkbox" class="largerCheckbox" id="toggle-@product.ProductId"
                                                   @onchange="(e => ToggleProduct(e, product))"
                                                   checked="@selectedProducts.Any(p => p.ProductId == product.ProductId)" />
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="text-center fixed-bottom pb-4">
                    <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="ApplyFilter">Aplicar</button>
                </div>

            </div>

        }
        else
        {
            <div class="edit-form">
                <label for="text" class="pb-4" style="font-size: 1.5rem;">Nome do produto</label>
                <input type="text" @bind="productName" class="form-control w-100 mx-auto" style="font-size: 1.2rem; text-align: center;"/>
                <div class="d-flex flex-row flex-wrap justify-content-center gap-3 mt-5">
                    <button class="btn btn-color btn-lg btn-edit-custom" style="min-width: 120px;" @onclick="SaveProduct">Salvar</button>
                    <button class="btn btn-danger btn-lg btn-edit-custom" style="min-width: 120px;" @onclick="CancelAdd">Cancelar</button>
                </div> 
            </div>
        }
    </div>    
}

@code {
    private List<Product> products = new List<Product>();
    private List<Product> selectedProducts = new List<Product>();
    private bool isLoading = true;
    private bool isAdding = false;
    private string productName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();
        products = await context.Products.ToListAsync();

        selectedProducts = FilterService.SelectedProducts;

        isLoading = false;
    }

    private void ToggleProduct(ChangeEventArgs e, Product product)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedProducts.Any(p => p.ProductId == product.ProductId))
                selectedProducts.Add(product);
        }
        else
        {
            selectedProducts.RemoveAll(p => p.ProductId == product.ProductId);
        }
    }

    private async Task ApplyFilter()
    {
        if (selectedProducts.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos um produto!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
        else
        {
            await FilterService.ApplyProductsFilter(new List<Product>(selectedProducts));

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Filtros aplicados com sucesso!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonColor = "#0B5120"
            });
        }
    }

    private void AddProduct()
    {
        productName = string.Empty;
        isAdding = true;
    }

    private async Task SaveProduct()
    {
        if (string.IsNullOrWhiteSpace(productName))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor insira um nome válido!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        using var context = DbContextFactory.CreateDbContext();
        var newProduct = new Product
            {
                ProductName = productName
            };

        products.Add(newProduct);
        context.Products.Add(newProduct);

        await context.SaveChangesAsync();

        isAdding = false;

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Produto adicionado com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });

    }

    private void CancelAdd()
    {
        isAdding = false;
    }
}
