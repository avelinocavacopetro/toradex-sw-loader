@page "/manageProducts"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Gerir Produtos</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else if (isAdding || isEditing)
{
    <div class="center-edit">
        <div class="edit-form">
            <label for="text" class="pb-4" style="font-size: 1.5rem;">Nome do produto</label>
            <input type="text" @bind="productName" class="form-control w-100 mx-auto" style="font-size: 1.2rem; text-align: center;" />

            <br />
            <h4>Selecionar Dispositivo(s):</h4>

            <table class="table mt-3 w-100">
                <thead style="background-color: #0c6527; color: white;">
                    <tr>
                        <th>Dispositivo</th>
                        <th class="text-center">Selecionar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var device in FilterService.SelectedDevices)
                    {
                        <tr class="table-light">
                            <td>@device.Name</td>
                            <td>
                                <div class="form-check d-flex justify-content-center">
                                    <input type="checkbox" class="largerCheckbox" id="toggle-@device.Id"
                                           @onchange="(e => ToggleDevice(e, device))"
                                           checked="@selectedDevices.Any(d => d.Id == device.Id)" />
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="d-flex flex-row flex-wrap justify-content-center gap-3 mt-5">
                <button class="btn btn-color btn-lg btn-edit-custom" style="min-width: 120px;"
                        @onclick="isAdding? SaveProduct : EditProduct">
                    Salvar
                </button>
                <button class="btn btn-danger btn-lg btn-edit-custom" style="min-width: 120px;"
                        @onclick="isAdding? CancelAdd : CancelEdit">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="center-customization">
        @if (!isAdding)
        {
            <div class="container-fluid">
                <h3 style="text-align: left;">Configurar filtros a aplicar:</h3>

            <div class="pb-2 pt-4" style="text-align: right;">
                <button class="btn btn-color btn-lg"
                        style="font-size: 2rem; width: 50px; height: 50px; padding: 0;"
                        @onclick="AddProduct">
                    +
                </button>
            </div>
            
            <div class="pb-5">
                <table class="table mt-3 w-100">
                    <thead style="background-color: #0c6527; color: white;">
                        <tr>
                            <th>Nome do Produto</th>
                            <th class="text-center">Selecionar</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in products)
                        {
                            <tr class="table-light">
                                <td>@product.Name</td>
                                <td>
                                    <div class="form-check d-flex justify-content-center">
                                        <input type="checkbox" class="largerCheckbox" id="toggle-@product.Id"
                                               @onchange="(e => ToggleProduct(e, product))"
                                               checked="@selectedProducts.Any(p => p.Id == product.Id)" />
                                    </div>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-sm"
                                            title="Editar"
                                            @onclick="() => EditProduct(product.Id)"
                                            style="padding: 0; display: flex; justify-content: center; align-items: center; height: 32px; width: 32px;">
                                        <i class="bi bi-pencil-square" style="font-size: 1.4rem; vertical-align: middle;"></i>
                                    </button>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-danger btn-sm"
                                            title="Desativar"
                                            @onclick="() => DisableProduct(product.Id)"
                                            style="padding: 0; display: flex; justify-content: center; align-items: center; height: 32px; width: 32px;">
                                        <i class="bi bi-trash-fill" style="font-size: 1.4rem; vertical-align: middle;"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="text-center fixed-bottom pb-4">
                <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="ApplyFilter">Aplicar</button>
            </div>
        </div>
        }
    </div>
}

@code {
    private List<Product> products = new List<Product>();
    private List<Product> selectedProducts = new List<Product>();
    private List<Device> selectedDevices = new List<Device>();
    private Product? selectedProduct = new Product();

    private bool isLoading = true;
    private bool isAdding = false;
    private bool isEditing = false;
    private string productName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();
        products = await context.Products.ToListAsync();

        selectedProducts = FilterService.SelectedProducts;
        selectedDevices = new List<Device>(FilterService.SelectedDevices);

        isLoading = false;
    }

    private void ToggleProduct(ChangeEventArgs e, Product product)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedProducts.Any(p => p.Id == product.Id))
                selectedProducts.Add(product);
        }
        else
        {
            selectedProducts.RemoveAll(p => p.Id == product.Id);
        }
    }

    private void AddProduct()
    {
        productName = string.Empty;
        selectedDevices.Clear();
        selectedProduct = null;
        isAdding = true;
        isEditing = false;
    }

    private async Task EditProduct(int id)
    {
        isEditing = true;
        isAdding = false;

        using var context = DbContextFactory.CreateDbContext();
        selectedProduct = await context.Products.FirstOrDefaultAsync(p => p.Id == id);

        if (selectedProduct != null)
        {
            productName = selectedProduct.Name;

            selectedDevices = await context.DeviceProducts
                .Where(dp => dp.ProductId == id)
                .Select(dp => dp.Device!)
                .ToListAsync();
        }
    }

    private async Task EditProduct()
    {
        if (selectedProduct == null) return;

        using var context = DbContextFactory.CreateDbContext();

        var productDb = await context.Products.FirstOrDefaultAsync(p => p.Id == selectedProduct.Id);
        if (productDb == null) return;

        productDb.Name = productName;

        var oldDeviceProducts = context.DeviceProducts.Where(dp => dp.ProductId == productDb.Id);
        context.DeviceProducts.RemoveRange(oldDeviceProducts);

        foreach (var device in selectedDevices)
        {
            context.DeviceProducts.Add(new DeviceProduct
            {
                ProductId = productDb.Id,
                DeviceId = device.Id
            });
        }

        await context.SaveChangesAsync();

        var localProduct = products.FirstOrDefault(p => p.Id == productDb.Id);
        if (localProduct != null)
        {
            localProduct.Name = productDb.Name;
        }

        CancelEdit();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Produto editado com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void ToggleDevice(ChangeEventArgs e, Device device)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedDevices.Any(d => d.Id == device.Id))
                selectedDevices.Add(device);
        }
        else
        {
            selectedDevices.RemoveAll(d => d.Id == device.Id);
        }
    }

    private async Task ApplyFilter()
    {
        if (selectedProducts.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos um produto!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
        else
        {
            await FilterService.ApplyProductsFilter(new List<Product>(selectedProducts));

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Filtros aplicados com sucesso!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonColor = "#0B5120"
            });
        }
    }

    private async Task SaveProduct()
    {
        if (string.IsNullOrWhiteSpace(productName))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor insira um nome válido!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        using var context = DbContextFactory.CreateDbContext();

        bool exists = await context.Products.AnyAsync(p => p.Name.ToLower() == productName.Trim().ToLower());

        if (exists)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Este produto já existe!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        var newProduct = new Product
        {
            Name = productName,
            Enabled = true
        };

        context.Products.Add(newProduct);
        await context.SaveChangesAsync();

        products.Add(newProduct);

        CancelAdd();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Produto adicionado com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void CancelAdd()
    {
        isAdding = false;
        productName = string.Empty;
        selectedDevices.Clear();
        selectedProduct = null;
    }

    private void CancelEdit()
    {
        isEditing = false;
        productName = string.Empty;
        selectedDevices.Clear();
        selectedProduct = null;
    }


    private async Task DisableProduct(int productId)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Deseja desativar este produto?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Continuar",
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
            isLoading = true;

            using var context = DbContextFactory.CreateDbContext();
            var productDb = await context.Products.FirstOrDefaultAsync(p => p.Id == productId);

            if (productDb != null)
            {
                productDb.Enabled = false;
                await context.SaveChangesAsync();
            }

            products.RemoveAll(p => p.Id == productId);

            isLoading = false;
            StateHasChanged();
        }
    }
}