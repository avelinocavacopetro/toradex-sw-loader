@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject FilterService FilterService
@inject SweetAlertService Swal

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>@localizer["SelectPackages"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="card-body pb-2 px-0 mt-2">
        <div class="table-responsive border rounded-2">
            <QuickGrid Class="table table-striped m-0"
                       Items="@stacksPackages.AsQueryable()"
                       ItemKey="@(pp => pp.PackageId + pp.StackId)">

                <!--- Coluna dos nomes dos pacotes --->
                <TemplateColumn>
                    <HeaderTemplate>
                        <div class="header-table-left">
                            @localizer["Name"]
                        </div>
                    </HeaderTemplate>
                    <ChildContent>
                        <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context.Package!)">
                            @context.Package?.Name
                        </div>
                    </ChildContent>
                </TemplateColumn>

                <!--- Coluna das versões dos pacotes --->
                <TemplateColumn>
                    <HeaderTemplate>
                        <div class="header-table-left">
                            @localizer["Version"]
                        </div>
                    </HeaderTemplate>
                    <ChildContent>
                        <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context.Package!)">
                            @context.Package?.Version
                        </div>
                    </ChildContent>
                </TemplateColumn>
            </QuickGrid>
        </div>

        @if (!stacksPackages.Any())
        {
            <table class="table table-striped m-0">
                <tbody>
                    <tr>
                        <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                            @localizer["NoData"]
                        </td>
                    </tr>
                </tbody>
            </table>
        }
    </div>
}

@code {
    // Parameters
    [Parameter]
    public string? DeviceUuid { get; set; }

    [Parameter] 
    public EventCallback OnCloseModal { get; set; }

    // Object Variables
    DetailedDevice? selectedDevice = new();
    Package? selectedPackage = new();
    List<StackPackage> stacksPackages = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(UpdateImageModal));

    // Boolean Variables
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            if (!await TorizonService.AuthenticateAsync())
            {
                _log.Error("Error authenticating to Torizon Service.");
                return;
            }

            var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{DeviceUuid}";
            selectedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);

            stacksPackages = await context.StackPackages
                .Include(pp => pp.Package)
                .ToListAsync();

            await FilterService.LoadFilterAsync();

            UpdatePage();

            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _log.Error("Error authenticating to Torizon Service or loading packages.", ex);
        }
    }

    async Task SelectRow(Package package)
    {
        using var context = DbContextFactory.CreateDbContext();

        selectedPackage = package;

        if (selectedPackage != null)
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["WantContinue"],
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = @localizer["Continue"],
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = @localizer["Cancel"],
                CancelButtonColor = "#dc3545"
            });

            if (result.IsConfirmed)
            {
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou o software: Nome: {selectedPackage.Name} | Versão: {selectedPackage.Version} para a placa {selectedDevice?.DeviceName}",
                    ActType = "Manutenção",
                    ActTimeStamp = DateTime.Now
                };

                var deviceDto = new DeviceDTO
                {
                    PackageIds = new List<string> { selectedPackage.Id.ToString() },
                    Devices = new List<string> { DeviceUuid!.ToString() },
                };

                var response = await TorizonService.SendUpdateAsync(deviceDto);

                if (response.IsSuccessStatusCode)
                {
                    context.UserActivities.Add(userAct);
                    await context.SaveChangesAsync();

                    ToastService.ShowSuccess(@localizer["SuccessfulRequest"]);

                    if (OnCloseModal.HasDelegate)
                        await OnCloseModal.InvokeAsync();
                }
                else
                {
                    ToastService.ShowError(@localizer["RequestError"]);
                    var errorContent = await response.Content.ReadAsStringAsync();
                }
            }
        }
        else
        {
            ToastService.ShowWarning(@localizer["NoPackageSelected"]);
        }
    }

    void UpdatePage()
    {
        InvokeAsync(StateHasChanged);
    }
}