@page "/home"

@inject IDbContextFactory<AppDbContext> DbContextFactory

<PageTitle>Página Inicial</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <h3 class="pt-2">Últimos Carregamentos</h3>

    <div class="d-flex justify-content-center align-items-center">
        <table class="table mt-5 w-100">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th>Placa</th>
                    <th class="text-center">Hora</th>
                    <th class="text-center">Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var finalProduct in finalProducts)
                {
                    <tr>
                        <td>@finalProduct.Name</td>
                        <td class="text-center">@finalProduct.CreatedAt</td>
                        <td class="text-center">@finalProduct.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<FinalProduct> finalProducts = new List<FinalProduct>();
    private List<FinalProduct> paginatedFinalProducts = new List<FinalProduct>();

    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        finalProducts = await context.FinalProducts
            .Include(fp => fp.Device)
            .Include(fp => fp.Product)
            .Include(fp => fp.Package)
            .Include(fp => fp.Fleet)
            .Include(fp => fp.UserPetrotec)
            .OrderByDescending(fp => fp.CreatedAt)
            .ToListAsync();

        isLoading = false;
    }
}
