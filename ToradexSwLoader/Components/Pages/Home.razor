@page "/home"
@using log4net

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject FinalProductStateService ProductState
@inject SweetAlertService Swal
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject NavigationManager Navigation

<PageTitle>Página Inicial</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">Últimos Carregamentos</h3>
        </div>

        <div class="table-responsive">
            <table class="table table-custom mt-3" style="min-width: 1300px; max-height: 600px;">
                <thead>
                    <tr>
                        <th style="width: 350px; text-align: left; padding-left: 20px; border-top-left-radius: 5px;
                                                       border-right: 1px solid white;">Placa</th>
                        <th style="width: 180px; text-align: center; border-right: 1px solid white;">Hora</th>
                        <th style="width: 150px; text-align: center; border-right: 1px solid white;">Estado</th>
                        <th style="width: 150px; text-align: center; border-right: 1px solid white;">Estado de atualização</th>
                        <th style="width: 180px; text-align: center; border-top-right-radius: 5px;"></th>
                    </tr>
                </thead>
                <tbody style="max-height: 400px;">
                    @if (finalProducts is null || !finalProducts.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                                Sem dados disponíveis
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var finalProduct in finalProducts)
                        {
                            <tr style="height: 60px;">
                                <td style="width: 350px; text-align: left; vertical-align: middle; padding-left: 20px;">@finalProduct.Name</td>
                                <td style="width: 180px; text-align: center; vertical-align: middle;">@finalProduct.CreatedAt</td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">
                                    @CheckOnlineStatus(finalProduct)
                                </td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">
                                    @GetStatusIcon(finalProduct.Status!)
                                </td>
                                <td style="width: 180px; text-align: center; vertical-align: middle;">
                                    @if (finalProduct.Status?.Equals("Outdated", StringComparison.OrdinalIgnoreCase) == true)
                                    {
                                        <button class="btn btn-danger btn-sm" style="width: 75%;"
                                                @onclick="@(() => AbortOperation(finalProduct))">
                                            <i class="bi bi-x-circle"></i> Abortar
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        
        <div class="sticky-footer-center">
            Última atualização: @ProductState.LastUpdate.ToString("dd/MM/yyyy HH:mm:ss")
        </div>
    </div> 
}

@code {
    // Object Variables
    private List<FinalProduct> paginatedFinalProducts = new List<FinalProduct>();
    private IReadOnlyList<FinalProduct> finalProducts = new List<FinalProduct>();
    private static readonly ILog log = LogManager.GetLogger(typeof(Home));

    // Boolean Variables
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CheckAuthentication();
            Navigation.LocationChanged += OnLocationChanged;

            isLoading = true;

            await LoadProductsFromDb();

            isLoading = false;

            ProductState.OnChange += async () =>
            {
                await InvokeAsync(async () =>
                {
                    await LoadProductsFromDb();
                    StateHasChanged();
                });
            };

            log.Info("Home page loaded successfully.");
        }
        catch (Exception ex)
        {
            log.Error("Error loading home page.", ex);
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        CheckAuthentication();
    }

    private void CheckAuthentication()
    {
        var currentUri = Navigation.ToBaseRelativePath(Navigation.Uri).ToLower();

        if (!LoginService.IsLoggedIn && currentUri != "")
        {
            Navigation.NavigateTo("/", true);
        }
    }

    private async Task LoadProductsFromDb()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            finalProducts = await context.FinalProducts
                .Where(p => p.Enabled)
                .OrderByDescending(fp => fp.CreatedAt)
                .Take(10)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            log.Error("Error loading products from database.", ex);
        }
    }

    private void OnProductsChanged()
    {
        InvokeAsync(() =>
        {
            finalProducts = ProductState.FinalProducts;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ProductState.OnChange -= OnProductsChanged;
        Navigation.LocationChanged -= OnLocationChanged;
    }

    private async Task AbortOperation(FinalProduct productToRemove)
    {
        log.Info($"Request to abort product: {productToRemove.Id}");

        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Deseja abortar?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Continuar",
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = "Cancelar"
        });

        if(result.IsConfirmed)
        {
            try
            {
                if (!await TorizonService.AuthenticateAsync())
                {
                    log.Error("Error authenticating to Torizon Service.");
                    return;
                }

                using var context = await DbContextFactory.CreateDbContextAsync();

                var response = await TorizonService.SendCancelAsync(new List<string> { productToRemove.DeviceUuid });

                string content = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    log.Info($"Product {productToRemove.Id} aborted successfully.");

                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Produto abortado com sucesso",
                        Icon = SweetAlertIcon.Success,
                        ConfirmButtonColor = "#0B5120",
                    });

                    var productDb = await context.FinalProducts.FirstOrDefaultAsync(p => p.Id == productToRemove.Id);
                    if (productDb != null)
                    {
                        productDb.Enabled = false;
                        await context.SaveChangesAsync();

                        finalProducts = finalProducts.Where(fp => fp.Id != productToRemove.Id).ToList();

                        StateHasChanged();
                    }
                }
                else
                {
                    log.Error($"Failed to abort product {productToRemove.Id}. Response: {content}");
                }

            } catch (Exception ex)
            {
                log.Error("Error authenticating to Torizon Service or aborting product.", ex);
            }
        }
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => @"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>Atualizado</span>
                            </div>",
            "error" => @"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>Erro</span>
                         </div>",
            "updatepending" => @"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>Pendente</span>
                                 </div>",
            "notseen" => @"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>Não Visto</span>
                           </div>",
            "outdated" => @"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>Desatualizado</span>
                            </div>",
            "updatescheduled" => @"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>Agendado</span>
                                   </div>",
            _ => @"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>Scheduled</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    private MarkupString CheckOnlineStatus(FinalProduct product)
    {
        bool isOnline = product.LastSeen.HasValue && (DateTime.UtcNow - product.LastSeen.Value.ToUniversalTime()).TotalMinutes < 5;
        string iconHtml = string.Empty;

        if (isOnline)
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-circle-fill text-success fs-4'></i>
                        <span>Online</span>
                     </div>";
        }
        else
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-x-circle text-danger fs-4'></i>
                        <span>Offline</span>
                     </div>";
        }

        return new MarkupString(iconHtml);
    }
}