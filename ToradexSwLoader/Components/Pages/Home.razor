@page "/home"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject FinalProductStateService ProductState
@inject PackageService PackageService

<PageTitle>Página Inicial</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <h3 class="pt-2">Últimos Carregamentos</h3>

    <div class="d-flex justify-content-center align-items-center">
        <table class="table mt-5 w-100">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th>Placa</th>
                    <th class="text-center">Hora</th>
                    <th class="text-center">Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var finalProduct in finalProducts)
                {
                    <tr>
                        <td>@finalProduct.Name</td>
                        <td class="text-center">@finalProduct.CreatedAt</td>
                        <td style="text-align: center;">
                            <span class="status-box @(GetStatusClass(finalProduct.Status))">
                                @finalProduct.Status
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="text-center fixed-bottom pb-3 mt-3 text-muted" style="margin-left: 20vw;">
        Última atualização: @ProductState.LastUpdate.ToString("dd/MM/yyyy HH:mm:ss")
    </div>
}

@code {
    private List<FinalProduct> paginatedFinalProducts = new List<FinalProduct>();
    private IReadOnlyList<FinalProduct> finalProducts = new List<FinalProduct>();

    bool isLoading = true;

    protected override void OnInitialized()
    {
        // var link = "https://app.torizon.io/api/v2beta/packages?limit=1000&packageSource=targets.json";

        // await PackageService.ImportPackagesFromApiAsync(link);

        finalProducts = ProductState.FinalProducts;
        ProductState.OnChange += OnProductsChanged;
        isLoading = false;
    }

    private void OnProductsChanged()
    {
        InvokeAsync(() =>
        {
            finalProducts = ProductState.FinalProducts;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ProductState.OnChange -= OnProductsChanged;
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "uptodate" => "status-uptodate",
            "error" => "status-error",
            "updatepending" => "status-updatepending",
            _ => "status-default"
        };
    }
}
