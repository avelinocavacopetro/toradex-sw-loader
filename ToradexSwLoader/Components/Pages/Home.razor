@page "/home"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject FinalProductStateService ProductState
@inject SweetAlertService Swal
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject NavigationManager Navigation
@inject FilterService FilterService

<PageTitle>@L("HomePage")</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@L("Loading")...</span>
            </div>
            <p class="mt-3">@L("Loading")...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">@L("LastUpdates")</h3>
        </div>

        <div class="card-body pb-2 px-0 mb-0 mt-3">
            <div class="table-responsive border rounded-3">
                <QuickGrid Class="table table-striped m-0"
                           Items="@finalProducts.AsQueryable()"
                           ItemKey="@(fp => $"{fp.DeviceUuid}-{fp.CreatedAt:yyyyMMddHHmmssfff}")">

                    <!--- Coluna dos nomes das placas --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @L("Board")
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @context.Name
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da data de criação --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @L("Time")
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @context.CreatedAt
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado (Online ou Offline) --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @L("State")
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="state-overlay">
                                @CheckOnlineStatus(context)
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado do dispositivo --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @L("StateUpdate")
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="state-overlay">
                                @GetStatusIcon(context.Status!)
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do botão para abortar --->
                    @if (finalProducts.Any(b => b.Status?.Equals("Outdated", StringComparison.OrdinalIgnoreCase) == true))
                    {
                        <TemplateColumn Title="@L("Actions")">
                            <HeaderTemplate>
                                <div class="abort-action"></div>
                            </HeaderTemplate>
                            <ChildContent>
                                @if (isOnline && context.Status.Equals("Outdated", StringComparison.OrdinalIgnoreCase))
                                   {
                                    <div class="abort-action">
                                        <button class="btn btn-danger" style="width: 100%;"
                                                @onclick="@(() => AbortOperation(context))">
                                            <i class="bi bi-x-circle"></i> @L("Abort")
                                        </button>
                                    </div>
                                }
                            </ChildContent>
                        </TemplateColumn>
                    }
                </QuickGrid>

                @if (!finalProducts.Any())
                {
                    <table class="table table-striped m-0">
                        <tbody>
                            <tr>
                                <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                    @localizer["NoData"]
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>
        </div>

        <div class="sticky-footer-center-update">
            @L("LastUpdate"): @ProductState.LastUpdate.ToString("dd/MM/yyyy HH:mm:ss")
        </div>
    </div>
}

@code {
    // Variáveis: Object
    List<FinalProduct> paginatedFinalProducts = new List<FinalProduct>();
    IReadOnlyList<FinalProduct> finalProducts = new List<FinalProduct>();
    static readonly ILog _log = LogManager.GetLogger(typeof(Home));

    // Variáveis: String
    public const string Updated = "Updated";
    public const string Error = "Error";
    public const string Pending = "Pending";
    public const string NotSeen = "NotSeen";
    public const string Outdated = "Outdated";
    public const string Scheduled = "Scheduled";

    // Variáveis: Boolean
    bool isLoading = true;
    bool isOnline = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CheckAuthentication();
            Navigation.LocationChanged += OnLocationChanged;

            isLoading = true;

            await LoadProductsFromDb();

            isLoading = false;

            ProductState.OnChange += async () =>
            {
                await InvokeAsync(async () =>
                {
                    await LoadProductsFromDb();
                    StateHasChanged();
                });
            };

            _log.Info("Home page loaded successfully.");
        }
        catch (Exception ex)
        {
            _log.Error("Error loading home page.", ex);
        }
    }

    string L(string key)
    {
        var originalCulture = CultureInfo.CurrentUICulture;
        try
        {
            CultureInfo.CurrentUICulture = new CultureInfo(LoginService.GetUserCulture());
            return localizer[key];
        }
        finally
        {
            CultureInfo.CurrentUICulture = originalCulture;
        }
    }

    void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        CheckAuthentication();
    }

    void CheckAuthentication()
    {
        var currentUri = Navigation.ToBaseRelativePath(Navigation.Uri).ToLower();

        if (!LoginService.IsLoggedIn && currentUri != "")
        {
            Navigation.NavigateTo("/", true);
        }
    }

    async Task LoadProductsFromDb()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            finalProducts = await context.FinalProducts
                .Where(p => p.Enabled)
                .OrderByDescending(fp => fp.CreatedAt)
                .Take(10)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            _log.Error("Error loading products from database.", ex);
        }
    }

    void OnProductsChanged()
    {
        InvokeAsync(() =>
        {
            finalProducts = ProductState.FinalProducts;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ProductState.OnChange -= OnProductsChanged;
        Navigation.LocationChanged -= OnLocationChanged;
    }

    async Task AbortOperation(FinalProduct productToRemove)
    {
        _log.Info($"Request to abort product: {productToRemove.Id}");

        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = L("WantContinue"),
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = L("Continue"),
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = L("Cancel")
        });

        if (result.IsConfirmed)
        {
            try
            {
                if (!await TorizonService.AuthenticateAsync())
                {
                    _log.Error("Error authenticating to Torizon Service.");
                    return;
                }

                using var context = await DbContextFactory.CreateDbContextAsync();

                var response = await TorizonService.SendCancelAsync(new List<string> { productToRemove.DeviceUuid });

                string content = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    _log.Info($"Product {productToRemove.Id} aborted successfully.");

                    ToastService.ShowSuccess(L("ProductAborted"));

                    var productDb = await context.FinalProducts.FirstOrDefaultAsync(p => p.Id == productToRemove.Id);
                    if (productDb != null)
                    {
                        productDb.Enabled = false;
                        await context.SaveChangesAsync();

                        finalProducts = finalProducts.Where(fp => fp.Id != productToRemove.Id).ToList();

                        StateHasChanged();
                    }
                }
                else
                {
                    _log.Error($"Failed to abort product {productToRemove.Id}. Response: {content}");
                }
            }
            catch (Exception ex)
            {
                _log.Error("Error authenticating to Torizon Service or aborting product.", ex);
            }
        }
    }

    MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => $@"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>{L(Updated)}</span>
                            </div>",
            "error" => $@"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>{L(Error)}</span>
                         </div>",
            "updatepending" => $@"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>{L(Pending)}</span>
                                 </div>",
            "notseen" => $@"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>{L(NotSeen)}</span>
                           </div>",
            "outdated" => $@"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>{L(Outdated)}</span>
                            </div>",
            "updatescheduled" => $@"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>{L(Scheduled)}</span>
                                   </div>",
            _ => $@"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>{L(Scheduled)}</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    MarkupString CheckOnlineStatus(FinalProduct product)
    {
        isOnline = product.LastSeen.HasValue && (DateTime.UtcNow - product.LastSeen.Value.ToUniversalTime()).TotalMinutes < FilterService.OnlineTime;
        string iconHtml = isOnline
            ? @"<div class='state' style='padding-right: 0.5rem;'><i class='bi bi-circle-fill text-success fs-4'></i><span>Online</span></div>"
            : @"<div class='state' style='padding-right: 0.5rem;'><i class='bi bi-x-circle text-danger fs-4'></i><span>Offline</span></div>";

        return new MarkupString(iconHtml);
    }
}