@page "/home"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject FinalProductStateService ProductState
@inject SweetAlertService Swal
@inject TorizonService TorizonService

<PageTitle>Página Inicial</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <h3 class="pt-2">Últimos Carregamentos</h3>

    <div class="d-flex justify-content-center align-items-center">
        <table class="table mt-5 w-100">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th>Placa</th>
                    <th class="text-center">Hora</th>
                    <th class="text-center">Estado</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var finalProduct in finalProducts)
                {
                    <tr>
                        <td style="vertical-align: middle;">@finalProduct.Name</td>
                        <td class="text-center" style="vertical-align: middle;">@finalProduct.CreatedAt</td>
                        <td style="text-align: center;">
                            @GetStatusIcon(finalProduct.Status!)
                        </td>
                        <td class="text-center" style="vertical-align: middle;">
                            @if (finalProduct.Status?.Equals("Outdated", StringComparison.OrdinalIgnoreCase) == true)
                            {
                                <button class="btn btn-danger btn-sm"
                                        @onclick="@(() => AbortOperation(finalProduct))">
                                    <i class="bi bi-x-circle"></i> Abortar
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="text-center fixed-bottom pb-3 mt-3 text-muted" style="margin-left: 20vw;">
        Última atualização: @ProductState.LastUpdate.ToString("dd/MM/yyyy HH:mm:ss")
    </div>
}

@code {
    private List<FinalProduct> paginatedFinalProducts = new List<FinalProduct>();
    private IReadOnlyList<FinalProduct> finalProducts = new List<FinalProduct>();

    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadProductsFromDb();

        isLoading = false;

        ProductState.OnChange += async () =>
        {
            await InvokeAsync(async () =>
            {
                await LoadProductsFromDb();
                StateHasChanged();
            });
        };
    }

    private async Task LoadProductsFromDb()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        finalProducts = await context.FinalProducts
            .Where(p => p.Enabled)
            .OrderByDescending(fp => fp.CreatedAt)
            .ToListAsync();
    }

    private void OnProductsChanged()
    {
        InvokeAsync(() =>
        {
            finalProducts = ProductState.FinalProducts;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ProductState.OnChange -= OnProductsChanged;
    }

    private async Task AbortOperation(FinalProduct productToRemove)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Deseja abortar?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Continuar",
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = "Cancelar"
        });

        if(result.IsConfirmed)
        {
            using var context = await DbContextFactory.CreateDbContextAsync();

            bool authOk = await TorizonService.AuthenticateAsync();
            if (authOk)
            {
                var response = await TorizonService.SendCancelAsync(new List<string> { productToRemove.DeviceUuid });

                string content = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Produto abortado com sucesso",
                        Icon = SweetAlertIcon.Success,
                        ConfirmButtonColor = "#0B5120",
                    });

                    var productDb = await context.FinalProducts.FirstOrDefaultAsync(p => p.Id == productToRemove.Id);
                    if (productDb != null)
                    {
                        productDb.Enabled = false;
                        await context.SaveChangesAsync();

                        finalProducts = finalProducts.Where(fp => fp.Id != productToRemove.Id).ToList();

                        StateHasChanged();
                    }
                }
                else
                {
                    Console.WriteLine("Não foi possível abortar. Verifica a resposta.");
                }
            }
        }
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => "<i class='bi bi-check-circle text-success fs-4'></i>",
            "error" => "<i class='bi bi-x-circle text-danger fs-4'></i>",
            "updatepending" => "<i class='bi bi-clock text-warning fs-4'></i>",
            "notseen" => "<i class='bi bi-eye-slash text-muted fs-4'></i>",
            "outdated" => "<i class='bi bi-exclamation-circle text-danger fs-4'></i>",
            "updatescheduled" => "<i class='bi bi-calendar-check text-primary fs-4'></i>",
            _ => "<i class='bi bi-question-circle text-secondary fs-4'></i>"
        };

        return new MarkupString(iconHtml);
    }
}
