@page "/charging/{deviceId}/{packageId}/{fleetId}"

@using Microsoft.EntityFrameworkCore
@using ToradexSwLoader.Data
@using ToradexSwLoader.Models
@inject NavigationManager UriHelper
@inject IDbContextFactory<AppDbContext> DbContextFactory


<PageTitle>Carregamento</PageTitle>

<a href="" onclick="history.back()" class="text-black">
	<i class="bi bi-arrow-left fs-1"></i>
</a>

@if (!isLoading)
{
	<h3 style="text-align: center;">Estado do Carregamento</h3>
	<h5 style="text-align: center;">Dispositivo: @selectedDevice.DeviceName </h5>
	<h5 style="text-align: center;">Software: @selectedPackage.PackageName </h5>
	<h5 style="text-align: center;">Frota: @selectedFleet.FleetName </h5>
}

<br />
<br />
<br />

<div class="center">
	<div class="w-25 pt-5" id="app">
		<h2 class="pb-3" style="text-align: center;">A carregar...</h2>

		<div class="progress mt-2" style="height: 2em;">
			<div id="progressbar" class="progress-bar progress-bar-striped progress-bar-animated"
				 style="width: 50%; background-color: #0B5120;"></div>
		</div>

		<div>
			<span id="progressLabel" class="text-muted">A instalar software</span>
		</div>

		<div class="text-center pt-5">
			<a class="btn btn-custom btn-lg" style="width:10vw" @onclick="OnClick">OK</a>
		</div>
	</div>
</div>



<style>
	.center {
		display: flex;
		justify-content: center;
		align-items: center;
		text-align: center;
		min-height: 50vh;
	}

	.btn-custom {
		background-color: #0B5120;
		color: white;
	}

		.btn-custom:hover {
			background-color: #073816;
			color: white;
		}
</style>

@code {
	private bool isLoading = true;

	[Parameter]
	public string deviceId { get; set; }
	private Device selectedDevice;

	[Parameter]
	public string packageId { get; set; }
	private Package selectedPackage;

	[Parameter]
	public string fleetId { get; set; }
	private Fleet selectedFleet;

	protected override async Task OnInitializedAsync()
	{
		using var context = DbContextFactory.CreateDbContext();
		selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.DeviceId == deviceId);
		selectedPackage = await context.Packages.FirstOrDefaultAsync(p => p.PackageId == packageId);
		selectedFleet = await context.Fleets.FirstOrDefaultAsync(f => f.Id == fleetId);

		isLoading = false;
	}


	private async Task OnClick()
	{
		UriHelper.NavigateTo($"/customization/{Uri.EscapeDataString(deviceId)}/{Uri.EscapeDataString(packageId)}/{Uri.EscapeDataString(fleetId)}");
	}
}
