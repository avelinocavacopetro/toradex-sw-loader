@page "/selectBoard/{deviceId:int}/{productId:int}/{stackId:int}/{packageId}/{fleetId}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject TorizonService TorizonService
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Selecionar Placa</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
} 
else
{
    <a href="#"
       onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
       class="text-black"
       style="cursor: @(isLoading ? "default" : "pointer");">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

    <h3 class="text-center pb-5">Placas Disponíveis</h3>
 
    <br />

    <div class="d-flex justify-content-end pe-5">
        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @TotalPages de @TotalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>

    <table class="table mt-3 w-100">
        <thead style="background-color: #0c6527; color: white;">
            <tr>
                <th>ID</th>
                <th>Nome</th>
                <th>Data de Criação</th>
                <th style="text-align: center;">Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var board in paginatedBoards)
            {
                <tr class="@GetRowClass(board)" @onclick="() => SelectRow(board)">
                    <td title="@board.DeviceUuid" style="word-break: break-word; white-space: normal;">
                        @board.DeviceId
                    </td>
                    <td title="@board.DeviceName" style="word-break: break-word; white-space: normal;">
                        @board.DeviceName
                    </td>

                    <td>@board.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                    <td style="text-align: center;">
                        <span class="status-box @(GetStatusClass(board.DeviceStatus))">
                            @board.DeviceStatus
                        </span>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="text-center fixed-bottom pb-5">
        <button class="btn btn-color btn-lg" style="width: 20vw; font-size: 1.5rem;" @onclick="OnClick">Seguinte</button>
    </div>
}

@code {
    [Parameter]
    public int deviceId { get; set; }

    [Parameter]
    public int productId { get; set; }

    [Parameter]
    public int stackId { get; set; }

    [Parameter]
    public string packageId { get; set; } = string.Empty;

    [Parameter]
    public string fleetId { get; set; } = string.Empty;

    private List<DetailedDevice> boards = new List<DetailedDevice>();
    private List<DetailedDevice> allBoards = new List<DetailedDevice>();
    private List<DetailedDevice> paginatedBoards = new List<DetailedDevice>();
    private List<Pattern> patterns = new List<Pattern>();
    private DetailedDevice? selectedBoard = new DetailedDevice();

    private int actualPage = 1;
    private int boardsPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)boards.Count / boardsPerPage);

    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        patterns = await context.Patterns.ToListAsync();

        bool authOk = await TorizonService.AuthenticateAsync();
        if (authOk)
        {
            foreach (var pattern in FilterService.SelectedPatterns)
            {
                var url = $"https://app.torizon.io/api/v2beta/devices?limit=200&offset=0&nameContains={Uri.EscapeDataString(pattern.NameContains)}";
                var partialBoards = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();
                allBoards.AddRange(partialBoards);
            }

            boards = allBoards
                        .GroupBy(d => d.DeviceUuid)
                        .Select(g => g.First())
                        .ToList();

            isLoading = false;
        }

        UpdatePage();
    }

    private void SelectRow(DetailedDevice board)
    {
        selectedBoard = board;
    }

    private string GetRowClass(DetailedDevice board)
    {
        return selectedBoard == board ? "table-primary" : string.Empty;
    }

    private async Task OnClick()
    {
        using var context = DbContextFactory.CreateDbContext();

        if (selectedBoard != null && !string.IsNullOrEmpty(selectedBoard.DeviceUuid))
        {
            var userAct = new UserActivity
            {
                UserId = LoginService.UserId,
                ActMessage = $"Selecionou a placa: Nome: {selectedBoard.DeviceName}",
                ActTimeStamp = DateTime.Now
            };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/customization/{deviceId}/{productId}/{stackId}/{Uri.EscapeDataString(packageId)}/{Uri.EscapeDataString(fleetId)}/{Uri.EscapeDataString(selectedBoard.DeviceUuid)}");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Selecione uma placa!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120",
            });
        }
    }

    private void UpdatePage()
    {
        paginatedBoards = boards
                              .Skip((actualPage - 1) * boardsPerPage)
                              .Take(boardsPerPage)
                              .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "uptodate" => "status-uptodate",
            "error" => "status-error",
            "updatepending" => "status-updatepending",
            _ => "status-default"
        };
    }
}
