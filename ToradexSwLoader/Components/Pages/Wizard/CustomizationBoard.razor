@page "/customization/{deviceId:int}/{productId:int}/{stackId:int}/{packageId}/{fleetId}/{boardUuid}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject TorizonService TorizonService
@inject SweetAlertService Swal

<PageTitle>Customizar Placa</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
} 
else
{
    <div class="custom-container d-flex flex-column">
        @if (!isEditing)
        {
             <a href="#"
               onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
               class="text-black"
               style="cursor: @(isLoading ? "default" : "pointer");">
                <i class="bi bi-arrow-left fs-1"></i>
            </a>

            <div style="display:flex; justify-content:center;">
                <div class="text-center">
                    <table class="summary w-75" style="border-collapse: collapse;">
                        <tr>
                            <th style="background-color: #0c6527; color: white; padding: 12px;">Dispositivo</th>
                            <td style="border-bottom: 1px solid #ccc; padding: 12px;">@selectedDevice?.Name</td>
                        </tr>
                        <tr>
                            <th style="background-color: #0c6527; color: white; padding: 12px;">Produto</th>
                            <td style="border-bottom: 1px solid #ccc; padding: 12px;">@selectedProduct?.Name</td>
                        </tr>
                        <tr>
                            <th style="background-color: #0c6527; color: white; padding: 12px;">Stack</th>
                            <td style="border-bottom: 1px solid #ccc; padding: 12px;">@selectedStack?.Name</td>
                        </tr>
                        <tr>
                            <th style="background-color: #0c6527; color: white; padding: 12px;">Software</th>
                            <td style="border-bottom: 1px solid #ccc; padding: 12px;">@selectedPackage?.Name @selectedPackage?.Version</td>
                        </tr>
                        <tr>
                            <th style="background-color: #0c6527; color: white; padding: 12px;">Frota</th>
                            <td style="border-bottom: 1px solid #ccc; padding: 12px;">@selectedFleet?.Name</td>
                        </tr>
                        <tr>
                            <th style="background-color: #0c6527; color: white; padding: 12px;">Placa</th>
                            <td style="padding: 12px;">@selectedBoard?.DeviceName</td>
                        </tr>
                    </table>
                </div>
            </div>

            <div class="center-customization" style="min-height: 30vh;">
                <h4 class="custom-label text-center px-5">
                    @finalBoard
                    <span class="bi bi-pencil-square px-5" aria-hidden="true" style="cursor:pointer" @onclick="ChangeName"></span>
                </h4>
            </div>

            <div class="sticky-footer-center">
                <button type="submit" class="btn btn-color btn-lg" style="width: 20vw; font-size: 1.5rem;" @onclick=ConfirmAndSubmit>OK</button>
            </div>
        }
        else
        {
            <div class="center-customization">
                <div class="edit-form">
                    <label for="text" class="pb-4" style="font-size: 1.5rem;">Alterar tag</label>
                    <input type="text" @bind="editableTag" class="form-control w-100 mx-auto" style="font-size: 1.2rem; text-align: center;" />
                    <div>
                        <button class="btn btn-color mt-5 btn-lg btn-edit-custom" @onclick="SaveName">Salvar</button>
                        <button class="btn btn-danger mt-5 ms-5 btn-lg btn-edit-custom" @onclick="CancelEdit">Cancelar</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    // Parameters
    [Parameter]
    public int deviceId { get; set; }

    [Parameter]
    public int productId { get; set; }

    [Parameter]
    public int stackId { get; set; }

    [Parameter]
    public string packageId { get; set; } = string.Empty;

    [Parameter]
    public string fleetId { get; set; } = string.Empty;

    [Parameter]
    public string boardUuid { get; set; } = string.Empty;

    // Object Variables
    private Device? selectedDevice = new Device();
    private Product? selectedProduct = new Product();
    private Stack? selectedStack = new Stack();
    private Package? selectedPackage = new Package();
    private Fleet? selectedFleet = new Fleet();
    private DetailedDevice? selectedBoard = new DetailedDevice();
    private Package? packageUri = new Package();
    private static readonly ILog log = LogManager.GetLogger(typeof(CustomizationBoard));

    // String Variables
    private string originalFinalBoard = string.Empty;
    private string finalBoard = string.Empty;
    private string editableTag = string.Empty;
    private string notEditable = string.Empty;
    private string serialNumber = string.Empty;

    // Boolean Variables
    private bool isLoading = true;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.Id == deviceId);
            selectedProduct = await context.Products.FirstOrDefaultAsync(p => p.Id == productId);
            selectedStack = await context.Stacks.FirstOrDefaultAsync(s => s.Id == stackId);
            selectedPackage = await context.Packages.FirstOrDefaultAsync(p => p.Id == packageId);
            selectedFleet = await context.Fleets.FirstOrDefaultAsync(f => f.Id == fleetId);
            selectedProduct = await context.Products.FirstOrDefaultAsync(p => p.Id == productId);

            if (await TorizonService.AuthenticateAsync())
            {
                var boardUrl = $"https://app.torizon.io/api/v2beta/devices/{boardUuid}";
                selectedBoard = await TorizonService.GetItemAsync<DetailedDevice>(boardUrl);

                isLoading = false;
            }

            string[] parts = selectedBoard.DeviceId.Split('-');
            serialNumber = parts[2];

            log.Info("Customization page loaded successfully.");
        }
        catch (Exception ex)
        {
            log.Error("Error loading Customization page.", ex);
        }
    }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(finalBoard) && selectedDevice != null && selectedPackage != null && selectedFleet != null && selectedProduct != null)
        {
            notEditable = $"{selectedProduct.Name} _{serialNumber}";
            finalBoard = notEditable;
        }
    }

    private void ChangeName()
    {
        try
        {
            isEditing = true;

            if (!string.IsNullOrEmpty(finalBoard) && !string.IsNullOrEmpty(notEditable) && finalBoard.StartsWith(notEditable))
            {
                var tag = finalBoard.Substring(notEditable.Length).Trim();

                if (tag.StartsWith("(") && tag.EndsWith(")"))
                {
                    editableTag = tag.Substring(1, tag.Length - 2);
                }
                else
                {
                    editableTag = tag;
                }
            }
            else
            {
                editableTag = string.Empty;
            }

            log.Info("Name change successfully");
        }
        catch (Exception ex)
        {
            log.Error("Failed to change name", ex);
        }
    }

    private void SaveName()
    {
        isEditing = false;
        finalBoard = $"{notEditable} ({editableTag})".Trim();
    }

    private void CancelEdit()
    {
        isEditing = false;
    }

    private async Task ConfirmAndSubmit()
    {
        try
        {
            if (!string.IsNullOrEmpty(finalBoard) && finalBoard.Length > 100)
            {
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Nome muito comprido",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonColor = "#d33"
                });
                return;
            }

            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Deseja continuar?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Continuar",
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = "Cancelar"
            });

            if (result.IsConfirmed)
            {
                using var context = DbContextFactory.CreateDbContext();
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Iniciou o carregamento da placa -> Nome: {finalBoard}",
                    ActType = "Wizard",
                    ActTimeStamp = DateTime.Now
                };

                var finalProduct = new FinalProduct
                {
                    DeviceUuid = selectedBoard.DeviceUuid,
                    Name = finalBoard,
                    Status = selectedBoard.DeviceStatus,
                    CreatedAt = DateTime.Now,
                    LastSeen = selectedBoard.LastSeen,
                    DeviceId = deviceId,
                    ProductId = productId,
                    StackId = stackId,
                    PackageId = packageId,
                    FleetId = fleetId,
                    UserId = LoginService.UserId,
                    Enabled = true
                };

                var packageUri = await context.Packages.FirstOrDefaultAsync(p => p.Id == finalProduct.PackageId);

                var deviceDto = new DeviceDTO
                {
                    PackageIds = new List<string> { finalProduct.PackageId.ToString() },
                    Devices = new List<string> { finalProduct.DeviceUuid.ToString() },
                };

                var response = await TorizonService.SendUpdateAsync(deviceDto);

                if (response.IsSuccessStatusCode)
                {
                    context.UserActivities.Add(userAct);
                    context.FinalProducts.Add(finalProduct);
                    await context.SaveChangesAsync();

                    log.Info($"Board '{selectedBoard?.DeviceName}' installed with software successfully.");

                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Pedido efetuado com sucesso!",
                        Icon = SweetAlertIcon.Success,
                        ConfirmButtonColor = "#0B5120"
                    });

                    UriHelper.NavigateTo("/home");
                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Erro ao efetuar pedido",
                        Icon = SweetAlertIcon.Warning,
                        Text = $"{response.StatusCode}",
                        ConfirmButtonColor = "#0B5120"
                    });

                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Erro ao enviar update. Código: {response.StatusCode}");
                    Console.WriteLine($"Conteúdo do erro: {errorContent}");

                    log.Error($"Failed to update board '{selectedBoard?.DeviceName}'. StatusCode: {response.StatusCode}, Error: {errorContent}");
                }
            }
        }
        catch (Exception ex)
        {
            log.Error("Error occurred while installing board software.", ex);
        }
    }

    public class JSResult
    {
        public bool IsConfirmed { get; set; }
    }
}