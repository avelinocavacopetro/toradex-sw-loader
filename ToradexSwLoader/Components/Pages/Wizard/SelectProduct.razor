@page "/selectProduct/{deviceId:int}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Selecionar Produto</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">Selecionar Produto</h3>

        <div class="grid-container">
            @foreach (var product in paginatedProducts)
            {
                <div class="grid-item" @onclick="() => SelectProductName(product)">
                    @product.Name
                </div>
            }
        </div>

        <div class="sticky-footer-right">
            <div class="d-flex align-items-center gap-3 justify-content-end">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Parameters
    [Parameter]
    public int deviceId { get; set; }

    // Object Varibles
    private Product? selectedProduct;
    private Device? selectedDevice;
    private List<Product> products = new();
    private List<Product> paginatedProducts = new();
    
    // Integer Variables
    private int actualPage = 1;
    private int productsPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)products.Count / productsPerPage);

    // Boolean Variables
    private bool isLoading = false;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.Id == deviceId);

        products = await context.DeviceProducts
            .Where(dp => dp.DeviceId == deviceId && dp.Product.Enabled)
            .Select(dp => dp.Product!)
            .Distinct()
            .ToListAsync();

        UpdatePage();
        isLoading = false;
    }

    private async Task SelectProductName(Product product)
    {
        using var context = DbContextFactory.CreateDbContext();

        bool hasStacks = await context.ProductStacks.AnyAsync(ps => ps.ProductId == product.Id);
        if (!hasStacks)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Este produto não tem stacks associadas.",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        selectedProduct = product;
        await OnClick();
    }

    private async Task OnClick()
    {
        if (selectedProduct != null)
        {
            using var context = DbContextFactory.CreateDbContext();
            var userAct = new UserActivity
            {
                UserId = LoginService.UserId,
                ActMessage = $"Selecionou o Produto: Nome: {selectedProduct.Name}",
                ActType = "Wizard",
                ActTimeStamp = DateTime.Now
            };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/selectStack/{deviceId}/{selectedProduct.Id}");
        }
    }

    private void UpdatePage()
    {
        paginatedProducts = products
                              .Skip((actualPage - 1) * productsPerPage)
                              .Take(productsPerPage)
                              .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}