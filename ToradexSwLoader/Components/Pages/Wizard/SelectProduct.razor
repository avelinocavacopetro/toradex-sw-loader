@page "/selectProduct/{deviceId:int}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject FilterService FilterService

<PageTitle>@localizer["SelectProduct"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="max-width: 5vh; cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">@localizer["SelectPackages"]</h3>

        <div class="grid-container">
            @foreach (var product in paginatedProducts)
            {
                <div class="grid-item" style="cursor: pointer;" @onclick="() => SelectProductName(product)">
                    @product.Name
                </div>
            }
        </div>

        <div class="sticky-footer-right">
            <div class="d-flex justify-content-end">
                <div class="d-flex align-items-center gap-3">
                    <button class="custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <span>@actualPage - @TotalPages de @TotalPages</span>

                    <button class="custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Parameters
    [Parameter]
    public int deviceId { get; set; }

    // Variáveis: Object
    Product? selectedProduct = new();
    Device? selectedDevice = new();
    List<Product> products = new();
    List<Product> paginatedProducts = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(SelectProduct));

    // Variáveis: Integer
    int actualPage = 1;
    int productsPerPage = 8;
    int TotalPages => (int)Math.Ceiling((double)products.Count / productsPerPage);

    // Variáveis: Boolean
    bool isLoading = false;
    bool CanGoNext => actualPage < TotalPages;
    bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.Id == deviceId);

            products = await context.DeviceProducts
                .Where(dp => dp.DeviceId == deviceId && dp.Product!.Enabled)
                .Select(dp => dp.Product!)
                .Distinct()
                .ToListAsync();

            UpdatePage();
            isLoading = false;

            _log.Info("Select product page loaded successfully.");
        }
        catch(Exception ex)
        {
            _log.Error("Error loading Select product page.", ex);
        }
    }

    async Task SelectProductName(Product product)
    {
        using var context = DbContextFactory.CreateDbContext();

        bool hasStacks = await context.ProductStacks.AnyAsync(ps => ps.ProductId == product.Id);
        if (!hasStacks)
        {
            ToastService.ShowWarning(@localizer["ProductsStack"]);
            return;
        }

        selectedProduct = product;
        await OnClick();
    }

    async Task OnClick()
    {
        try
        {
            if (selectedProduct != null)
            {
                using var context = DbContextFactory.CreateDbContext();
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou o Produto: Nome: {selectedProduct.Name}",
                    ActType = "Wizard",
                    ActTimeStamp = DateTime.Now
                };

                context.UserActivities.Add(userAct);
                await context.SaveChangesAsync();

                _log.Info($"Product '{selectedProduct.Name}' selected.");

                UriHelper.NavigateTo($"/selectStack/{deviceId}/{selectedProduct.Id}");
            }
        }
        catch(Exception ex)
        {
            _log.Error("Error selecting product.", ex);
        }
    }

    void UpdatePage()
    {
        paginatedProducts = products
                              .Skip((actualPage - 1) * productsPerPage)
                              .Take(productsPerPage)
                              .ToList();
    }

    void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}