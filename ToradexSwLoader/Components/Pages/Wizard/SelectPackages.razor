@page "/packages/{deviceId:int}/{productId:int}/{stackId:int}"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject FilterService FilterService
@inject NavigationManager UriHelper
@inject SweetAlertService Swal
@inject IStringLocalizer<Resource> localizer


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>@localizer["SelectPackages"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">@localizer["SelectPackages"]</h3>

        <table class="table mt-3 w-100">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th style="width: 50%; padding-left: 20px; border-right: 1px solid white; border-top-left-radius: 5px;">@localizer["Name"]</th>
                    <th style="width: 50%; text-align: center; border-top-right-radius: 5px;">@localizer["Version"]</th>
                </tr>
            </thead>
            <tbody style="height: 60px;">
                @if (paginatedPackages is null || !paginatedPackages.Any())
                {
                    <tr>
                        <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                            @localizer["NoData"]
                        </td>
                    </tr>
                }
                else 
                {
                    @foreach (var package in paginatedPackages)
                    {
                        if (package?.Package != null)
                        {
                            <tr @onclick="() => SelectRow(package.Package)">
                                <td title="@package.Package.Name" style="vertical-align: middle; padding-left: 20px;">
                                    @package.Package.Name
                                </td>
                                <td style="text-align: center; vertical-align: middle;">@package.Package.Version</td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>

        <div class="sticky-footer-right">
            <div class="d-flex align-items-center gap-3 justify-content-end">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Parameters
    [Parameter]
    public int deviceId { get; set; }

    [Parameter]
    public int productId { get; set; }

    [Parameter]
    public int stackId { get; set; }

    // Object Variables
    private Device? selectedDevice;
    private Product? selectedProduct;
    private Stack? selectedStack;
    private Package? selectedPackage;
    private List<StackPackage> paginatedPackages = new();
    private List<StackPackage> stacksPackages = new();
    private static readonly ILog log = LogManager.GetLogger(typeof(SelectPackages));

    // Integer Variables
    private int actualPage = 1;
    private int packagesPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)stacksPackages.Count / packagesPerPage);

    // Boolean Variables
    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.Id == deviceId);
            selectedProduct = await context.Products.FirstOrDefaultAsync(p => p.Id == productId);
            selectedStack = await context.Stacks.FirstOrDefaultAsync(s => s.Id == stackId);

            stacksPackages = await context.StackPackages
                .Where(pp => pp.StackId == stackId)
                .Include(pp => pp.Package)
                .ToListAsync();

            await FilterService.LoadFilterAsync();

            UpdatePage();

            isLoading = false;
            StateHasChanged();

            log.Info("Select packages page loaded successfully.");
        }
        catch(Exception ex)
        {
            log.Error("Error loading Select packages page.", ex);
        }
    }

    private async Task SelectRow(Package package)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            selectedPackage = package;

            if (selectedPackage != null)
            {
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou o software: Nome: {selectedPackage.Name} | Versão: {selectedPackage.Version}",
                    ActType = "Wizard",
                    ActTimeStamp = DateTime.Now
                };

                context.UserActivities.Add(userAct);
                await context.SaveChangesAsync();

                log.Info($"Package '{selectedPackage.Name}' selected.");

                UriHelper.NavigateTo($"/selectFleet/{deviceId}/{productId}/{stackId}/{Uri.EscapeDataString(selectedPackage.Id)}");
            }
            else
            {
                log.Warn("No package selected.");

                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = @localizer["NoPackageSelected"],
                    Icon = SweetAlertIcon.Warning,
                    ConfirmButtonColor = "#0B5120",
                });
            }
        }
        catch(Exception ex)
        {
            log.Error("Error selecting package.", ex);
        }
    }

    private void UpdatePage()
    {
        paginatedPackages = stacksPackages
                                 .Skip((actualPage - 1) * packagesPerPage)
                                 .Take(packagesPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}