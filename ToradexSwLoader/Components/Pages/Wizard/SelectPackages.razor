@page "/packages/{deviceId:int}/{productId:int}/{stackId:int}"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject FilterService FilterService
@inject NavigationManager UriHelper

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>@localizer["SelectPackages"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="max-width: 5vh; cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">@localizer["SelectPackages"]</h3>

        <div class="card-body pb-2 px-0 mt-2">
            <div class="border rounded-2">
                <QuickGrid Class="table table-striped m-0"
                           Items="@paginatedPackages.AsQueryable()"
                           ItemKey="@(pp => pp.PackageId)">

                    <!--- Coluna dos nomes dos pacotes --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Name"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context.Package!)">
                                @context.Package?.Name
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna das versões dos pacotes --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Version"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context.Package!)">
                                @context.Package?.Version
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </div>

        <div class="sticky-footer-right">
            <div class="d-flex justify-content-end">
                <div class="d-flex align-items-center gap-3">
                    <button class="custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <span>@actualPage - @TotalPages de @TotalPages</span>

                    <button class="custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Parameters
    [Parameter]
    public int deviceId { get; set; }

    [Parameter]
    public int productId { get; set; }

    [Parameter]
    public int stackId { get; set; }

    // Variáveis: Object
    Device? selectedDevice = new();
    Product? selectedProduct = new();
    Stack? selectedStack = new();
    Package? selectedPackage = new();
    List<StackPackage> paginatedPackages = new();
    List<StackPackage> stacksPackages = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(SelectPackages));

    // Variáveis: Integer
    int actualPage = 1;
    int packagesPerPage = 8;
    int TotalPages => (int)Math.Ceiling((double)stacksPackages.Count / packagesPerPage);

    // Variáveis: Boolean
    bool isLoading = true;
    bool CanGoNext => actualPage < TotalPages;
    bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.Id == deviceId);
            selectedProduct = await context.Products.FirstOrDefaultAsync(p => p.Id == productId);
            selectedStack = await context.Stacks.FirstOrDefaultAsync(s => s.Id == stackId);

            stacksPackages = await context.StackPackages
                .Where(pp => pp.StackId == stackId)
                .Include(pp => pp.Package)
                .ToListAsync();

            await FilterService.LoadFilterAsync();

            UpdatePage();

            isLoading = false;
            StateHasChanged();

            _log.Info("Select packages page loaded successfully.");
        }
        catch(Exception ex)
        {
            _log.Error("Error loading Select packages page.", ex);
        }
    }

    async Task SelectRow(Package package)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            selectedPackage = package;

            if (selectedPackage != null)
            {
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou o software: Nome: {selectedPackage.Name} | Versão: {selectedPackage.Version}",
                    ActType = "Wizard",
                    ActTimeStamp = DateTime.Now
                };

                context.UserActivities.Add(userAct);
                await context.SaveChangesAsync();

                _log.Info($"Package '{selectedPackage.Name}' selected.");

                UriHelper.NavigateTo($"/selectFleet/{deviceId}/{productId}/{stackId}/{Uri.EscapeDataString(selectedPackage.Id)}");
            }
            else
            {
                _log.Warn("No package selected.");

                ToastService.ShowWarning(@localizer["NoPackageSelected"]);
            }
        }
        catch(Exception ex)
        {
            _log.Error("Error selecting package.", ex);
        }
    }

    void UpdatePage()
    {
        paginatedPackages = stacksPackages
                                 .Skip((actualPage - 1) * packagesPerPage)
                                 .Take(packagesPerPage)
                                 .ToList();
    }

    void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}