@page "/selectdevices"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject TorizonService TorizonService
@inject DeviceService DeviceService
@inject LoginService LoginService
@inject FilterService FilterService 
@inject NavigationManager UriHelper

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>@localizer["SelectEquipment"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="max-width: 5vh; cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">@localizer["SelectDevice"]</h3>

        @if (FilterService.SelectedDevices.Count == 0)
        {
            <div class="d-flex justify-content-center align-items-center" style="min-height:50vh;">
                <div class="alert alert-dark text-center w-75" role="alert">
                    @localizer["NoDevices"]
                </div>
            </div>
        }
        else
        {
            <div class="grid-container">
                @foreach (var device in FilterService.SelectedDevices)
                {
                    <div class="grid-item" style="cursor: pointer;" @onclick="() => ChooseDevice(device)">
                        @device.Name
                    </div>
                }
            </div>
        }

        <div class="sticky-footer-right">
            <div class="d-flex justify-content-end">
                <div class="d-flex align-items-center gap-3">
                    <button class="custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <span>@actualPage - @TotalPages de @TotalPages</span>

                    <button class="custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Object
    Device? selectedDevice = new();
    List<Device> allDevices = new();
    List<Device> paginatedDevices = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(SelectDevice));

    // Variáveis: Integer
    int actualPage = 1;
    int devicesPerPage = 8;
    int TotalPages => (int)Math.Ceiling((double)allDevices.Count / devicesPerPage);

    // Variáveis: Boolean
    bool isLoading = true;
    bool CanGoNext => actualPage < TotalPages;
    bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();

            allDevices = FilterService.SelectedDevices.ToList();
            UpdatePage();

            isLoading = false;
            StateHasChanged();

            _log.Info("Select device page loaded successfully.");
        }
        catch(Exception ex)
        {
            _log.Error("Error loading Select device page.", ex);
        }

    }

    async Task ChooseDevice(Device device)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            bool hasProducts = await context.DeviceProducts.AnyAsync(dp => dp.DeviceId == device.Id);

            if (!hasProducts)
            {
                ToastService.ShowWarning(@localizer["DevicesProducts"]);
                return;
            }

            selectedDevice = device;
            await OnClick();

            _log.Info($"Device '{device.Name}' selected");
        }
        catch(Exception ex)
        {
            _log.Error("Error choosing device", ex);
        }
    }

    async Task OnClick()
    {
        try
        {
            if (selectedDevice != null)
            {

                using var context = DbContextFactory.CreateDbContext();

                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou o dispositivo: Nome: {selectedDevice.Name}",
                    ActType = "Wizard",
                    ActTimeStamp = DateTime.Now
                };

                context.UserActivities.Add(userAct);
                await context.SaveChangesAsync();

                _log.Info($"Device '{selectedDevice.Name}' selected");

                UriHelper.NavigateTo($"/selectProduct/{selectedDevice.Id}");
            }
            else
            {
                _log.Warn("No device selected.");

                ToastService.ShowWarning(@localizer["WarningDevice"]);
            }
        }
        catch(Exception ex)
        {
            _log.Error("Error choosing device", ex);
        }
    }

    void UpdatePage()
    {
        paginatedDevices = allDevices
                                 .Skip((actualPage - 1) * devicesPerPage)
                                 .Take(devicesPerPage)
                                 .ToList();
    }

    void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }

    public void Dispose()
    {
        FilterService.OnFilterChanged -= UpdatePage;
    }
}