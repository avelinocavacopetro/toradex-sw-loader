@page "/selectBoard/{deviceId:int}/{productId:int}/{stackId:int}/{packageId}/{fleetId}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject TorizonService TorizonService
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Selecionar Placa</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
} 
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">Placas Disponíveis</h3>

        <table class="table mt-3 w-100">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th style="width: 30%; padding-left: 20px; border-right: 1px solid white; border-top-left-radius: 5px;">ID</th>
                    <th style="width: 30%; padding-left: 20px; border-right: 1px solid white;">Nome</th>
                    <th style="width: 25%; border-right: 1px solid white; text-align: center;">Data de Criação</th>
                    <th style="width: 15%; border-right: 1px solid white; border-top-right-radius: 5px; text-align: center;">Estado</th>
                </tr>
            </thead>
            <tbody style="height: 60px">
                @foreach (var board in paginatedBoards)
                {
                    <tr class="@GetRowClass(board)" @onclick="() => SelectRow(board)">
                        <td title="@board.DeviceUuid" style="width: 30%; padding-left: 20px; vertical-align: middle;">
                            @board.DeviceId
                        </td>
                        <td title="@board.DeviceName" style="width: 20%; padding-left: 20px; vertical-align: middle;">
                            @board.DeviceName
                        </td>
                        <td style="width: 20%; vertical-align: middle; text-align: center;">@board.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                        <td style="width: 20%;">
                            @GetStatusIcon(board.DeviceStatus)
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="sticky-footer-right">
            <div class="d-flex align-items-center gap-3 justify-content-end">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int deviceId { get; set; }

    [Parameter]
    public int productId { get; set; }

    [Parameter]
    public int stackId { get; set; }

    [Parameter]
    public string packageId { get; set; } = string.Empty;

    [Parameter]
    public string fleetId { get; set; } = string.Empty;

    private List<DetailedDevice> boards = new List<DetailedDevice>();
    private List<DetailedDevice> allBoards = new List<DetailedDevice>();
    private List<DetailedDevice> paginatedBoards = new List<DetailedDevice>();
    private List<Pattern> patterns = new List<Pattern>();
    private DetailedDevice? selectedBoard = new DetailedDevice();

    private int actualPage = 1;
    private int boardsPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)boards.Count / boardsPerPage);

    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        patterns = await context.Patterns.ToListAsync();

        bool authOk = await TorizonService.AuthenticateAsync();
        if (authOk)
        {
            foreach (var pattern in FilterService.SelectedPatterns)
            {
                var url = $"https://app.torizon.io/api/v2beta/devices?limit=200&offset=0&nameContains={Uri.EscapeDataString(pattern.NameContains)}";
                var partialBoards = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();
                allBoards.AddRange(partialBoards);
            }

            boards = allBoards
                        .GroupBy(d => d.DeviceUuid)
                        .Select(g => g.First())
                        .ToList();

            isLoading = false;
        }

        UpdatePage();
    }

    private async Task SelectRow(DetailedDevice board)
    {
        selectedBoard = board;

        await OnClick();
    }

    private string GetRowClass(DetailedDevice board)
    {
        return selectedBoard == board ? "table-primary" : string.Empty;
    }

    private async Task OnClick()
    {
        using var context = DbContextFactory.CreateDbContext();

        if (selectedBoard != null && !string.IsNullOrEmpty(selectedBoard.DeviceUuid))
        {
            var userAct = new UserActivity
            {
                UserId = LoginService.UserId,
                ActMessage = $"Selecionou a placa: Nome: {selectedBoard.DeviceName}",
                ActType = "Wizard",
                ActTimeStamp = DateTime.Now
            };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/customization/{deviceId}/{productId}/{stackId}/{Uri.EscapeDataString(packageId)}/{Uri.EscapeDataString(fleetId)}/{Uri.EscapeDataString(selectedBoard.DeviceUuid)}");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Selecione uma placa!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120",
            });
        }
    }

    private void UpdatePage()
    {
        paginatedBoards = boards
                              .Skip((actualPage - 1) * boardsPerPage)
                              .Take(boardsPerPage)
                              .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => @"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>Atualizado</span>
                            </div>",
            "error" => @"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>Erro</span>
                         </div>",
            "updatepending" => @"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>Pendente</span>
                                 </div>",
            "notseen" => @"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>Não Visto</span>
                           </div>",
            "outdated" => @"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>Desatualizado</span>
                            </div>",
            "updatescheduled" => @"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>Agendado</span>
                                   </div>",
            _ => @"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>Scheduled</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }
}
