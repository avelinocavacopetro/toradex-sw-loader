@page "/selectBoard/{deviceId:int}/{productId:int}/{stackId:int}/{packageId}/{fleetId}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject TorizonService TorizonService
@inject FilterService FilterService

<PageTitle>@localizer["SelectBoard"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
} 
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="max-width: 5vh; cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">@localizer["AvailableBoards"]</h3>

        <div class="card-body pb-2 px-0 mt-2">
            <div class="table-responsive border rounded-2">
                <QuickGrid Class="table table-striped m-0"
                           Items="@paginatedBoards.AsQueryable()"
                           ItemKey="@(pp => pp.DeviceUuid)">

                    <!--- Coluna dos IDs das placas --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                ID
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context)">
                                @context.DeviceId
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna dos nomes das placas --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Name"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context)">
                                @context.DeviceName
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da data de criação das placas --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["CreatedAt"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context)">
                                @context.CreatedAt
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado (Online ou Offline) --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["State"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div style="width: 100%; text-align: center; vertical-align: middle; padding-top: 0.5rem;">
                                @CheckOnlineStatus(context)
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado do dispositivo --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["StateUpdate"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div style="width: 100%; text-align: center; vertical-align: middle; padding-top: 0.5rem;">
                                @GetStatusIcon(context.DeviceStatus!)
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </div>

        <div class="sticky-footer-right">
            <div class="d-flex justify-content-end">
                <div class="d-flex align-items-center gap-3">
                    <button class="custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <span>@actualPage - @TotalPages de @TotalPages</span>

                    <button class="custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Parameters
    [Parameter]
    public int deviceId { get; set; }

    [Parameter]
    public int productId { get; set; }

    [Parameter]
    public int stackId { get; set; }

    [Parameter]
    public string packageId { get; set; } = string.Empty;

    [Parameter]
    public string fleetId { get; set; } = string.Empty;

    // Variáveis: String
    public const string Updated = "Updated";
    public const string Error = "Error";
    public const string Pending = "Pending";
    public const string NotSeen = "NotSeen";
    public const string Outdated = "Outdated";
    public const string Scheduled = "Scheduled";
    public const string Unknown = "Unknown";

    // Variáveis: Object
    DetailedDevice? selectedBoard = new();
    List<DetailedDevice> boards = new();
    List<DetailedDevice> allBoards = new();
    List<DetailedDevice> paginatedBoards = new();
    List<Pattern> patterns = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(SelectBoard));

    // Variáveis: Integer
    int actualPage = 1;
    int boardsPerPage = 8;
    int TotalPages => (int)Math.Ceiling((double)boards.Count / boardsPerPage);

    // Variáveis: Boolean
    bool isLoading = true;
    bool CanGoNext => actualPage < TotalPages;
    bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            patterns = await context.Patterns.ToListAsync();

            if (await TorizonService.AuthenticateAsync())
            {
                foreach (var pattern in FilterService.SelectedPatterns)
                {
                    var url = $"https://app.torizon.io/api/v2beta/devices?limit=200&offset=0&nameContains={Uri.EscapeDataString(pattern.NameContains)}";
                    var partialBoards = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();
                    allBoards.AddRange(partialBoards);
                }

                boards = allBoards
                            .Where(d => d.LastSeen.HasValue && (DateTime.UtcNow - d.LastSeen.Value.ToUniversalTime()).TotalMinutes < FilterService.OnlineTime)
                            .GroupBy(d => d.DeviceUuid)
                            .Select(g => g.First())
                            .ToList();

                isLoading = false;
            }

            UpdatePage();

            _log.Info("Select board page loaded successfully.");
        }
        catch (Exception ex)
        {
            _log.Error("Error loading Select board page.", ex);
        }

    }

    async Task SelectRow(DetailedDevice board)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            selectedBoard = board;

            if (selectedBoard != null && !string.IsNullOrEmpty(selectedBoard.DeviceUuid))
            {
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou a placa: Nome: {selectedBoard.DeviceName}",
                    ActType = "Wizard",
                    ActTimeStamp = DateTime.Now
                };

                context.UserActivities.Add(userAct);
                await context.SaveChangesAsync();

                _log.Info($"Board '{selectedBoard.DeviceName}' selected.");

                UriHelper.NavigateTo($"/customization/{deviceId}/{productId}/{stackId}/{Uri.EscapeDataString(packageId)}/{Uri.EscapeDataString(fleetId)}/{Uri.EscapeDataString(selectedBoard.DeviceUuid)}");
            }
            else
            {
                _log.Warn("No board selected.");

                ToastService.ShowWarning(@localizer["NoBoardSelected"]);
            }
        }
        catch(Exception ex)
        {
            _log.Error("Error selecting board.", ex);
        }
    }

    void UpdatePage()
    {
        paginatedBoards = boards
                              .Skip((actualPage - 1) * boardsPerPage)
                              .Take(boardsPerPage)
                              .ToList();
    }

    void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }

    MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => $@"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>{localizer[Updated]}</span>
                            </div>",
            "error" => $@"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>{localizer[Error]}</span>
                         </div>",
            "updatepending" => $@"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>{localizer[Pending]}</span>
                                 </div>",
            "notseen" => $@"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>{localizer[NotSeen]}</span>
                           </div>",
            "outdated" => $@"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>{localizer[Outdated]}</span>
                            </div>",
            "updatescheduled" => $@"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>{localizer[Scheduled]}</span>
                                   </div>",
            _ => $@"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>{localizer[Scheduled]}</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    MarkupString CheckOnlineStatus(DetailedDevice board)
    {
        bool isOnline = board.LastSeen.HasValue && (DateTime.UtcNow - board.LastSeen.Value.ToUniversalTime()).TotalMinutes < FilterService.OnlineTime;
        string iconHtml = string.Empty;

        if (isOnline)
        {
            iconHtml = @"<div class='state' style='padding-right: 0.5rem'>
                        <i class='bi bi-circle-fill text-success fs-4'></i>
                        <span>Online</span>
                     </div>";
        }
        else
        {
            iconHtml = @"<div class='state' style='padding-right: 0.5rem'>
                        <i class='bi bi-x-circle text-danger fs-4'></i>
                        <span>Offline</span>
                     </div>";
        }

        return new MarkupString(iconHtml);
    }
}