@page "/selectFleet/{deviceId:int}/{productId:int}/{stackId:int}/{packageId}"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> localizer
@inject TorizonService TorizonService
@inject FleetService FleetService
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject FilterService FilterService

<PageTitle>@localizer["SelectFleet"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["SelectEquipment"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="max-width: 5vh; cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">@localizer["SelectFleet"]</h3>

        @if(paginatedFleets == null)
        {
            <p>
                @localizer["NoFleets"]
            </p>
        } 
        else
        {
            <div class="grid-container">
                @foreach (var fleet in paginatedFleets)
                {
                    <div class="grid-item" style="cursor: pointer;" @onclick="() => SelectFleetName(fleet)">
                        @fleet.Name
                    </div>
                }
            </div>

            <div class="sticky-footer-right">
                <div class="d-flex justify-content-end">
                    <div class="d-flex align-items-center gap-3">
                        <button class="custom-outline-button btn-lg"
                                @onclick="PrevPage" disabled="@(!CanGoPrev)">
                            &lt;
                        </button>

                        <span>@actualPage - @TotalPages de @TotalPages</span>

                        <button class="custom-outline-button btn-lg"
                                @onclick="NextPage" disabled="@(!CanGoNext)">
                            &gt;
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    // Parameters
    [Parameter]
    public int deviceId { get; set; }

    [Parameter]
    public int stackId { get; set; }

    [Parameter]
    public int productId { get; set; }

    [Parameter]
    public string packageId { get; set; } = string.Empty;

    // Object Variables
    Device? selectedDevice = new();
    Stack? selectedStack = new();
    Product? selectedProduct = new();
    Fleet? selectedFleet = new();
    List<Fleet> fleets = new();
    List<Fleet> paginatedFleets = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(SelectFleet));

    // Integer Variables
    int actualPage = 1;
    int fleetsPerPage = 8;
    int TotalPages => (int)Math.Ceiling((double)fleets.Count / fleetsPerPage);

    // Boolean Variables
    bool isLoading = false;
    bool CanGoNext => actualPage < TotalPages;
    bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.Id == deviceId);
            selectedProduct = await context.Products.FirstOrDefaultAsync(p => p.Id == productId);
            selectedStack = await context.Stacks.FirstOrDefaultAsync(s => s.Id == stackId);

            fleets = new List<Fleet>(FilterService.SelectedFleets);

            UpdatePage();
            isLoading = false;

            _log.Info("Select fleet page loaded successfully.");
        }
        catch(Exception ex)
        {
            _log.Error("Error loading Select fleet page.", ex);
        }
    }

    async void SelectFleetName(Fleet fleet)
    {
        selectedFleet = fleet;
        await OnClick();
    }

    async Task OnClick()
    {
        try
        {
            if (selectedFleet != null)
            {
                using var context = DbContextFactory.CreateDbContext();
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou a frota: Nome: {selectedFleet.Name}",
                    ActTimeStamp = DateTime.Now
                };

                context.UserActivities.Add(userAct);
                await context.SaveChangesAsync();

                UriHelper.NavigateTo($"/selectBoard/{deviceId}/{productId}/{stackId}/{Uri.EscapeDataString(packageId)}/{Uri.EscapeDataString(selectedFleet.Id)}");
            }

            _log.Info($"Fleet '{selectedFleet?.Name}' selected");
        }
        catch (Exception ex)
        {
            _log.Error("Error selecting fleet.", ex);
        }
    }

    void UpdatePage()
    {
        paginatedFleets = fleets
                              .Skip((actualPage - 1) * fleetsPerPage)
                              .Take(fleetsPerPage)
                              .ToList();
    }

    void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}