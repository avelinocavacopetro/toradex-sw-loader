@page "/maintenance"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject TorizonService TorizonService
@inject FilterService FilterService

<PageTitle>@localizer["SelectBoard"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">@localizer["AvailableBoards"]</h3>
        </div>

        <div class="card-body pb-2 px-0 mt-2">
            <div class="table-responsive border rounded-2">
                <QuickGrid Class="table table-striped m-0"
                           Items="@UniqueBoards.AsQueryable()"
                           ItemKey="@(pb => pb.DeviceUuid)">

                    <!--- Coluna dos nomes das placas --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Name"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context)">
                                @context.DeviceName
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do software das placas --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                Software
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context)">
                                @{
                                    var software = context.Packages?
                                    .FirstOrDefault(s => s.Component == "docker-compose")?
                                    .Installed;

                                    var packageName = $"{software?.Name} {software?.Version}" ?? "-";
                                }

                                @packageName
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado da placa (Online ou Offline) --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["State"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div style="width: 100%; text-align: center; vertical-align: middle; padding-top: 0.5rem; cursor: pointer;" @onclick="() => SelectRow(context)">
                                @CheckOnlineStatus(context)
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna dos nomes das placas --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["StateUpdate"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div style="width: 100%; text-align: center; vertical-align: middle; padding-top: 0.5rem; cursor: pointer;" @onclick="() => SelectRow(context)">
                                @GetStatusIcon(context.DeviceStatus!)
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>

                @if (!UniqueBoards.Any())
                {
                    <table class="table table-striped m-0">
                        <tbody>
                            <tr>
                                <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                    @localizer["NoData"]
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>

            <div class="d-flex justify-content-end mt-3 px-3">
                <p>@UniqueBoards.Count() @localizer["Board"]&#40s&#41</p>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Object
    List<DetailedDevice> allBoards = new();

    List<DetailedDevice> UniqueBoards => allBoards
        .GroupBy(d => d.DeviceUuid)
        .Select(g => g.First())
        .ToList();

    List<Pattern> patterns = new();
    DetailedDevice? selectedBoard = null;
    static readonly ILog _log = LogManager.GetLogger(typeof(MaintenanceBoard));

    // Variáveis: Boolean
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();

            if (await TorizonService.AuthenticateAsync())
            {
                await FetchDevicesFromTorizonAsync();
                isLoading = false;
            }

            StateHasChanged();

            _log.Info("Maintenance page loaded successfully.");
        }
        catch (Exception ex)
        {
            _log.Error("Error loading Maintenance page.", ex);
        }
    }

    async Task FetchDevicesFromTorizonAsync()
    {
        try
        {
            foreach (var pattern in FilterService.SelectedPatterns)
            {
                var url = $"https://app.torizon.io/api/v2beta/devices?limit=200&offset=0&nameContains={Uri.EscapeDataString(pattern.NameContains)}";

                var devices = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();

                var detailedTasks = devices.Select(async device =>
                {
                    var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{device.DeviceUuid}";
                    return await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);
                });

                var detailedDevices = await Task.WhenAll(detailedTasks);
                allBoards.AddRange(detailedDevices.Where(d => d!.LastSeen.HasValue && (DateTime.UtcNow - d.LastSeen.Value.ToUniversalTime()).TotalMinutes < FilterService.OnlineTime)!);
            }

            _log.Info("Devices fetched successfully.");
        }
        catch (Exception ex)
        {
            _log.Error("Error authenticating to Torizon Service or loading devices.", ex);
        }
    }

    async Task SelectRow(DetailedDevice board)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            selectedBoard = board;

            if (selectedBoard != null && !string.IsNullOrEmpty(selectedBoard.DeviceUuid))
            {
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou a placa para atualização: Nome: {selectedBoard.DeviceName}",
                    ActTimeStamp = DateTime.Now
                };

                context.UserActivities.Add(userAct);
                await context.SaveChangesAsync();

                _log.Info($"Board '{selectedBoard.DeviceName}' selected for update.");

                UriHelper.NavigateTo($"/selectAction/{selectedBoard.DeviceUuid}");
            }
            else
            {
                _log.Warn("No board selected before attempting update.");

                ToastService.ShowWarning(@localizer["SelectOneBoard"]);   
            }
        }
        catch (Exception ex)
        {
            _log.Error("Error selecting board for update.", ex);
        }
    }

    MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => @"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>Atualizado</span>
                            </div>",
            "error" => @"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>Erro</span>
                         </div>",
            "updatepending" => @"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>Pendente</span>
                                 </div>",
            "notseen" => @"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>Não Visto</span>
                           </div>",
            "outdated" => @"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>Desatualizado</span>
                            </div>",
            "updatescheduled" => @"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>Agendado</span>
                                   </div>",
            _ => @"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>Scheduled</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    MarkupString CheckOnlineStatus(DetailedDevice board)
    {
        bool isOnline = board.LastSeen.HasValue && (DateTime.UtcNow - board.LastSeen.Value.ToUniversalTime()).TotalMinutes < FilterService.OnlineTime;
        string iconHtml = string.Empty;

        if (isOnline)
        {
            iconHtml = @"<div class='state' style='padding-right: 0.5rem;'>
                        <i class='bi bi-circle-fill text-success fs-4'></i>
                        <span>Online</span>
                     </div>";
        }
        else
        {
            iconHtml = @"<div class='state' style='padding-right: 0.5rem;'>
                        <i class='bi bi-x-circle text-danger fs-4'></i>
                        <span>Offline</span>
                     </div>";
        }

        return new MarkupString(iconHtml);
    }
}