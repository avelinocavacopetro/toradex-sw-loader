@page "/maintenance"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject TorizonService TorizonService
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["SelectBoard"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <h3 class="text-center pb-5">@localizer["AvailableBoards"]</h3>

        <table class="table mt-3 w-100">
            <thead>
                <tr>
                    <th style="width: 20%; padding-left: 20px; border-right: 1px solid white; border-top-left-radius: 5px;">@localizer["Name"]</th>
                    <th style="width: 30%; padding-left: 20px; border-right: 1px solid white;">Software</th>
                    <th style="width: 20%; border-right: 1px solid white; text-align: center;">Entidade</th>
                    <th style="width: 15%; border-right: 1px solid white; text-align: center;">@localizer["State"]</th>
                    <th style="width: 15%; border-right: 1px solid white; border-top-right-radius: 5px; text-align: center;">@localizer["StateUpdate"]</th>
                </tr>
            </thead>
            <tbody>
                @if (PaginatedBoards is null || !PaginatedBoards.Any())
                {
                    <tr>
                        <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                            @localizer["NoData"]
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var board in PaginatedBoards)
                    {
                        <tr @onclick="() => SelectRow(board)">
                            <td title="@board.DeviceName" style="width: 20%; padding-left: 20px; vertical-align: middle;">
                                @board.DeviceName
                            </td>
                            <td style="width: 30%; padding: 20px; vertical-align: middle;">@board?.Packages?[1].Name</td>
                            <td style="width: 20%; text-align: center; vertical-align: middle;">
                                @if (deviceEntityNames.TryGetValue(board.DeviceUuid, out var entityList) && entityList.Any())
                                {
                                    <ul class="mb-0 ps-3" style="list-style-type: none;">
                                        @foreach (var entityName in entityList)
                                        {
                                            <li>@entityName</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <span class="text-muted" style="font-size: 18px;">@localizer["NoEntity"]</span>
                                }
                            </td>
                            <td style="width: 15%; text-align: center;">
                                @CheckOnlineStatus(board)
                            </td>
                            <td style="width: 15%; text-align: center;">
                                @GetStatusIcon(board.DeviceStatus)
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div class="sticky-footer-right">
            <div class="d-flex align-items-center gap-3 justify-content-end">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Object Variables
    private List<DetailedDevice> allBoards = new();

    private List<DetailedDevice> UniqueBoards => allBoards
        .GroupBy(d => d.DeviceUuid)
        .Select(g => g.First())
        .ToList();

    private List<DetailedDevice> PaginatedBoards => UniqueBoards
        .Skip((actualPage - 1) * boardsPerPage)
        .Take(boardsPerPage)
        .ToList();

    private List<EntityFleet> entitiesFleets = new();
    private List<Pattern> patterns = new();
    private List<Fleet> fleets = new();
    private Dictionary<string, List<string>> deviceEntityNames = new();
    private DetailedDevice? selectedBoard = null;
    private static readonly ILog log = LogManager.GetLogger(typeof(MaintenanceBoard));

    // String Variables
    public string? EntityName { get; set; }

    // Integer Variables
    private int actualPage = 1;
    private int boardsPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)UniqueBoards.Count / boardsPerPage);

    // Boolean Variables
    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            await LoadPatternsAsync(context);
            if (await TorizonService.AuthenticateAsync())
            {
                await LoadBoardsAsync(context);
                isLoading = false;
                StateHasChanged();
            }

            log.Info("Maintenance page loaded successfully.");
        }
        catch (Exception ex)
        {
            log.Error("Error loading Maintenance page.", ex);
        }

    }

    private async Task LoadPatternsAsync(AppDbContext context)
    {
        try
        {
            patterns = await context.Patterns.ToListAsync();

        }
        catch (Exception ex)
        {
            log.Error("Error loading patterns from database", ex);
        }
    }

    private async Task LoadBoardsAsync(AppDbContext context)
    {
        try
        {
            await FetchDevicesFromTorizonAsync();
            await LoadEntitiesFleetsAsync(context);
            MapDevicesToEntities();
        }
        catch (Exception ex)
        {
            log.Error("Error loading boards from database", ex);
        }
    }

    private async Task FetchDevicesFromTorizonAsync()
    {
        try
        {
            allBoards.Clear();

            foreach (var pattern in FilterService.SelectedPatterns)
            {
                var url = $"https://app.torizon.io/api/v2beta/devices?limit=200&offset=0&nameContains={Uri.EscapeDataString(pattern.NameContains)}";

                var devices = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();

                var detailedTasks = devices.Select(async device =>
                {
                    var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{device.DeviceUuid}";
                    return await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);
                });

                var detailedDevices = await Task.WhenAll(detailedTasks);
                allBoards.AddRange(detailedDevices.Where(d => d is not null)!);
            }

            log.Info("Devices fetched successfully.");
        }
        catch (Exception ex)
        {
            log.Error("Error authenticating to Torizon Service or loading devices.", ex);
        }
    }

    private async Task LoadEntitiesFleetsAsync(AppDbContext context)
    {
        try
        {
            entitiesFleets = await context.EntityFleets
          .Include(ef => ef.Entity)
          .ToListAsync();
        }
        catch (Exception ex)
        {
            log.Error("Error loading entities from database", ex);
        }
    }

    private void MapDevicesToEntities()
    {
        try
        {
            deviceEntityNames.Clear();

            foreach (var board in UniqueBoards)
            {
                var entityNames = new List<string>();

                if (board.Fleets != null && board.Fleets.Count > 0)
                {
                    foreach (var fleet in board.Fleets)
                    {
                        var entityFleetsForFleet = entitiesFleets
                            .Where(ef => ef.FleetId == fleet.Id && ef.Entity != null);

                        foreach (var ef in entityFleetsForFleet)
                        {
                            if (!entityNames.Contains(ef.Entity!.Name))
                            {
                                entityNames.Add(ef.Entity.Name);
                            }
                        }
                    }
                }

                if (entityNames.Count == 0)
                {
                    entityNames.Add("Sem entidade");
                }

                deviceEntityNames[board.DeviceUuid] = entityNames;
            }

            log.Info("Devices mapped to entities successfully.");
        }
        catch (Exception ex)
        {
            log.Error("Error mapping devices to entities.", ex);
        }
    }

    private async Task SelectRow(DetailedDevice board)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            selectedBoard = board;

            if (selectedBoard != null && !string.IsNullOrEmpty(selectedBoard.DeviceUuid))
            {
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou a placa para atualização: Nome: {selectedBoard.DeviceName}",
                    ActTimeStamp = DateTime.Now
                };

                context.UserActivities.Add(userAct);
                await context.SaveChangesAsync();

                log.Info($"Board '{selectedBoard.DeviceName}' selected for update.");

                UriHelper.NavigateTo($"/selectAction/{selectedBoard.DeviceUuid}");
            }
            else
            {
                log.Warn("No board selected before attempting update.");

                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Selecione uma placa!",
                    Icon = SweetAlertIcon.Warning,
                    ConfirmButtonColor = "#0B5120",
                });
            }
        }
        catch (Exception ex)
        {
            log.Error("Error selecting board for update.", ex);
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            StateHasChanged();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            StateHasChanged();
        }
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => @"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>Atualizado</span>
                            </div>",
            "error" => @"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>Erro</span>
                         </div>",
            "updatepending" => @"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>Pendente</span>
                                 </div>",
            "notseen" => @"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>Não Visto</span>
                           </div>",
            "outdated" => @"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>Desatualizado</span>
                            </div>",
            "updatescheduled" => @"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>Agendado</span>
                                   </div>",
            _ => @"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>Scheduled</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    private MarkupString CheckOnlineStatus(DetailedDevice board)
    {
        bool isOnline = board.LastSeen.HasValue && (DateTime.UtcNow - board.LastSeen.Value.ToUniversalTime()).TotalMinutes < 5;
        string iconHtml = string.Empty;

        if (isOnline)
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-circle-fill text-success fs-4'></i>
                        <span>Online</span>
                     </div>";
        }
        else
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-x-circle text-danger fs-4'></i>
                        <span>Offline</span>
                     </div>";
        }

        return new MarkupString(iconHtml);
    }
}