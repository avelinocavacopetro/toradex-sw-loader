@page "/maintenance"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject TorizonService TorizonService
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Selecionar Placa</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <a href="#"
       onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
       class="text-black"
       style="cursor: @(isLoading ? "default" : "pointer");">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

    <h3 class="text-center pb-5">Placas Disponíveis</h3>

    <br />

    <div class="d-flex justify-content-end pe-5">
        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @TotalPages de @TotalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>

    <table class="table mt-3 w-100">
        <thead style="background-color: #0c6527; color: white;">
            <tr>
                <th>Nome</th>
                <td>Software</td>
                <th>Entidade</th>
                <th style="text-align: center;">Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var board in paginatedBoards)
            {
                <tr class="@GetRowClass(board)" @onclick="() => SelectRow(board)">
                    <td title="@board.DeviceName" style="word-break: break-word; white-space: normal; vertical-align: middle;">
                        @board.DeviceName
                    </td>
                    <td style="vertical-align: middle;">@board?.Packages?[1].Name</td>
                    <td style="vertical-align: middle;">ENTIDADE</td>
                    <td style="text-align: center;">
                        @GetStatusIcon(board.DeviceStatus)
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="text-center fixed-bottom pb-5">
        <button class="btn btn-color btn-lg" style="width: 20vw; font-size: 1.5rem;" @onclick="OnClick">Seguinte</button>
    </div>
}

@code {
    private List<DetailedDevice> boards = new List<DetailedDevice>();
    private List<DetailedDevice> allBoards = new List<DetailedDevice>();
    private List<DetailedDevice> paginatedBoards = new List<DetailedDevice>();
    private List<Pattern> patterns = new List<Pattern>();
    private DetailedDevice? selectedBoard = new DetailedDevice();

    private int actualPage = 1;
    private int boardsPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)boards.Count / boardsPerPage);

    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        patterns = await context.Patterns.ToListAsync();

        bool authOk = await TorizonService.AuthenticateAsync();
        if (authOk)
        {
            foreach (var pattern in FilterService.SelectedPatterns)
            {
                var url = $"https://app.torizon.io/api/v2beta/devices?limit=200&offset=0&nameContains={Uri.EscapeDataString(pattern.NameContains)}";

                var devices = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();

                var detailedTasks = devices.Select(async device =>
                {
                    var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{device.DeviceUuid}";
                    var detailedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);
                    return detailedDevice;
                });

                var detailedDevices = await Task.WhenAll(detailedTasks);

                allBoards.AddRange(detailedDevices.Where(d => d != null));
            }

            boards = allBoards
                        .GroupBy(d => d.DeviceUuid)
                        .Select(g => g.First())
                        .ToList();

            isLoading = false;
        }

        UpdatePage();
    }

    private void SelectRow(DetailedDevice board)
    {
        selectedBoard = board;
    }


    private string GetRowClass(DetailedDevice board)
    {
        return selectedBoard == board ? "table-primary" : string.Empty;
    }

    private async Task OnClick()
    {
        using var context = DbContextFactory.CreateDbContext();

        if (selectedBoard != null && !string.IsNullOrEmpty(selectedBoard.DeviceUuid))
        {
            var userAct = new UserActivity
            {
                UserId = LoginService.UserId,
                ActMessage = $"Selecionou a placa para atualização: Nome: {selectedBoard.DeviceName}",
                ActTimeStamp = DateTime.Now
            };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/selectAction/{selectedBoard.DeviceUuid}");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Selecione uma placa!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120",
            });
        }
    }

    private void UpdatePage()
    {
        paginatedBoards = boards
                              .Skip((actualPage - 1) * boardsPerPage)
                              .Take(boardsPerPage)
                              .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => "<i class='bi bi-check-circle text-success fs-4'></i>",
            "error" => "<i class='bi bi-x-circle text-danger fs-4'></i>",
            "updatepending" => "<i class='bi bi-clock text-warning fs-4'></i>",
            "notseen" => "<i class='bi bi-eye-slash text-muted fs-4'></i>",
            "outdated" => "<i class='bi bi-exclamation-circle text-danger fs-4'></i>",
            "updatescheduled" => "<i class='bi bi-calendar-check text-primary fs-4'></i>",
            _ => "<i class='bi bi-question-circle text-secondary fs-4'></i>"
        };

        return new MarkupString(iconHtml);
    }
}
