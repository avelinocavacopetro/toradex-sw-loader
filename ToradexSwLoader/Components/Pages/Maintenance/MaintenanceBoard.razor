@page "/maintenance"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject NavigationManager UriHelper
@inject LoginService LoginService
@inject TorizonService TorizonService
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Selecionar Placa</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">Placas Disponíveis</h3>

        <table class="table mt-3 w-100">
            <thead>
                <tr>
                    <th style="width: 20%; padding-left: 20px; border-right: 1px solid white; border-top-left-radius: 5px;">Nome</th>
                    <th style="width: 30%; padding-left: 20px; border-right: 1px solid white;">Software</th>
                    <th style="width: 30%; border-right: 1px solid white; text-align: center;">Entidade</th>
                    <th style=" width: 20%; border-right: 1px solid white; border-top-right-radius: 5px; text-align: center;">Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var board in paginatedBoards)
                {
                    <tr class="@GetRowClass(board)" @onclick="() => SelectRow(board)">
                        <td title="@board.DeviceName" style="width: 25%; padding-left: 20px; vertical-align: middle;">
                            @board.DeviceName
                        </td>
                        <td style="width: 25%; padding: 20px; vertical-align: middle;">@board?.Packages?[1].Name</td>
                        <td style="width: 25%; text-align: center; vertical-align: middle;">
                            @if (deviceEntityNames.TryGetValue(board.DeviceUuid, out var entityList) && entityList.Any())
                            {
                                <ul class="mb-0 ps-3" style="list-style-type: none;">
                                    @foreach (var entityName in entityList)
                                    {
                                        <li>@entityName</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <span class="text-muted" style="font-size: 18px;">Sem entidade</span>
                            }
                        </td>
                        <td style="width: 25%; text-align: center;">
                            @GetStatusIcon(board.DeviceStatus)
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="sticky-footer-right">
            <div class="d-flex align-items-center gap-3 justify-content-end">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<DetailedDevice> boards = new List<DetailedDevice>();
    private List<DetailedDevice> allBoards = new List<DetailedDevice>();
    private List<DetailedDevice> paginatedBoards = new List<DetailedDevice>();
    private Dictionary<string, List<string>> deviceEntityNames = new();
    private List<EntityFleet> entitiesFleets = new();
    private List<Pattern> patterns = new List<Pattern>();
    private List<Fleet> fleets = new List<Fleet>();
    private DetailedDevice? selectedBoard = new DetailedDevice();

    public string? EntityName { get; set; }

    private int actualPage = 1;
    private int boardsPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)boards.Count / boardsPerPage);

    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;


    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        patterns = await context.Patterns.ToListAsync();

        bool authOk = await TorizonService.AuthenticateAsync();
        if (authOk)
        {
            foreach (var pattern in FilterService.SelectedPatterns)
            {
                var url = $"https://app.torizon.io/api/v2beta/devices?limit=200&offset=0&nameContains={Uri.EscapeDataString(pattern.NameContains)}";

                var devices = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();

                var detailedTasks = devices.Select(async device =>
                {
                    var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{device.DeviceUuid}";
                    var detailedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);
                    return detailedDevice;
                });

                var detailedDevices = await Task.WhenAll(detailedTasks);

                allBoards.AddRange(detailedDevices.Where(d => d != null));
            }

            boards = allBoards
                        .GroupBy(d => d.DeviceUuid)
                        .Select(g => g.First())
                        .ToList();

            entitiesFleets = await context.EntityFleets
                .Include(ef => ef.Entity)
                .ToListAsync();

            deviceEntityNames.Clear();

            foreach (var board in boards)
            {
                var entityNames = new List<string>();

                if (board.Fleets != null && board.Fleets.Count > 0)
                {
                    foreach (var fleet in board.Fleets)
                    {
                        var entityFleetsForThisFleet = entitiesFleets.Where(ef => ef.FleetId == fleet.Id && ef.Entity != null);

                        foreach (var ef in entityFleetsForThisFleet)
                        {
                            if (!entityNames.Contains(ef.Entity!.Name))
                            {
                                entityNames.Add(ef.Entity.Name);
                            }
                        }
                    }
                }

                if (entityNames.Count == 0)
                {
                    entityNames.Add("Sem entidade");
                }

                deviceEntityNames[board.DeviceUuid] = entityNames;
            }

            isLoading = false;
            UpdatePage();
        }
    }

    private async Task SelectRow(DetailedDevice board)
    {
        selectedBoard = board;

        await OnClick();
    }

    private string GetRowClass(DetailedDevice board)
    {
        return selectedBoard == board ? "table-primary" : string.Empty;
    }

    private async Task OnClick()
    {
        using var context = DbContextFactory.CreateDbContext();

        if (selectedBoard != null && !string.IsNullOrEmpty(selectedBoard.DeviceUuid))
        {
            var userAct = new UserActivity
            {
                UserId = LoginService.UserId,
                ActMessage = $"Selecionou a placa para atualização: Nome: {selectedBoard.DeviceName}",
                ActTimeStamp = DateTime.Now
            };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/selectAction/{selectedBoard.DeviceUuid}");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Selecione uma placa!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120",
            });
        }
    }

    private void UpdatePage()
    {
        paginatedBoards = boards
                              .Skip((actualPage - 1) * boardsPerPage)
                              .Take(boardsPerPage)
                              .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => @"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>Atualizado</span>
                            </div>",
            "error" => @"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>Erro</span>
                         </div>",
            "updatepending" => @"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>Pendente</span>
                                 </div>",
            "notseen" => @"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>Não Visto</span>
                           </div>",
            "outdated" => @"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>Desatualizado</span>
                            </div>",
            "updatescheduled" => @"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>Agendado</span>
                                   </div>",
            _ => @"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>Scheduled</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }
}
