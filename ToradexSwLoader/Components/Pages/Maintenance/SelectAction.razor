@page "/selectAction/{deviceUuid}"

@inject NavigationManager UriHelper
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject TorizonService TorizonService
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Selecionar Ação</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">Selecionar Ação</h3>

        <div class="grid-container-action d-flex justify-content-center">
            <div class="grid-item-action" @onclick="UpdateImage">
                Atualizar pacote
            </div>
            <div class="grid-item-action @(hasVersion ? "" : "disabled")"
                 @onclick="UpdateVersion"
                 style="cursor:@(hasVersion ? "pointer" : "not-allowed"); opacity:@(hasVersion ? "1" : "0.5")">
                Atualizar versão
            </div>
        </div>
    </div>
}

@code {
    // Object Variables
    private DetailedDevice? selectedDevice = new();
    private List<StackPackage> stacksPackages = new();

    // String Variables
    [Parameter]
    public string? deviceUuid { get; set; }

    // Boolean Variables
    private bool isLoading = false;
    private bool hasVersion = true;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        if(await TorizonService.AuthenticateAsync())
        {
            await LoadSelectedDeviceAsync();
            await LoadStackPackagesAsync(context);
            CheckIfDeviceHasPackage();
            await FilterService.LoadFilterAsync();

            isLoading = false;
        }
    }

    private async Task LoadSelectedDeviceAsync()
    {
        var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{deviceUuid}";
        selectedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);
    }

    private async Task LoadStackPackagesAsync(AppDbContext context)
    {
        stacksPackages = await context.StackPackages
            .Include(pp => pp.Package)
            .ToListAsync();
    }

    private void CheckIfDeviceHasPackage()
    {
        if (selectedDevice?.Packages == null || selectedDevice.Packages.Count < 2)
        {
            hasVersion = false;
            return;
        }

        var devicePackage = selectedDevice.Packages[1].Name;
        hasVersion = stacksPackages.Any(sp => sp.PackageId == devicePackage);
    }

    private void UpdateImage()
    {
        UriHelper.NavigateTo($"/updateImage/{deviceUuid}");
    }

    private async Task UpdateVersion()
    {
        if (hasVersion)
        {
            UriHelper.NavigateTo($"/updateVersion/{deviceUuid}");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Sem suporte",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
        }
    }
}