@page "/selectAction/{deviceUuid}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject NavigationManager UriHelper
@inject TorizonService TorizonService
@inject FilterService FilterService

<PageTitle>@localizer["SelectAction"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="max-width: 5vh; cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">@localizer["SelectAction"]</h3>

        <div class="grid-container-action d-flex justify-content-center">
            <div class="grid-item-action" style="cursor: pointer;" @onclick="UpdateImage">
                @localizer["UpdatePackage"]
            </div>
            <div class="grid-item-action @(hasVersion ? "" : "disabled")"
                 @onclick="UpdateVersion"
                 style="cursor:@(hasVersion ? "pointer" : "not-allowed"); opacity:@(hasVersion ? "1" : "0.5")">
                @localizer["UpdateVersion"]
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Object
    DetailedDevice? selectedDevice = new();
    List<StackPackage> stacksPackages = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(SelectAction));

    // Variáveis: String
    [Parameter]
    public string? deviceUuid { get; set; }

    // Variáveis: Boolean
    bool isLoading = false;
    bool hasVersion = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            if (await TorizonService.AuthenticateAsync())
            {
                await LoadSelectedDeviceAsync();
                await LoadStackPackagesAsync(context);
                CheckIfDeviceHasPackage();
                await FilterService.LoadFilterAsync();

                isLoading = false;
            }

            _log.Info("Select action page loaded successfully.");
        }
        catch (Exception ex)
        {
            _log.Error("Error loading select action page.", ex);
        }
    }

    async Task LoadSelectedDeviceAsync()
    {
        try
        {
            var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{deviceUuid}";
            selectedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);
        }
        catch (Exception ex)
        {
            _log.Error("Error loading devices from database", ex);
        }
    }

    async Task LoadStackPackagesAsync(AppDbContext context)
    {
        try
        {
            stacksPackages = await context.StackPackages
            .Include(pp => pp.Package)
            .ToListAsync();
        }
        catch (Exception ex)
        {
            _log.Error("Error loading stack packages from database", ex);
        }
    }

    void CheckIfDeviceHasPackage()
    {
        try
        {
            if (selectedDevice?.Packages == null || selectedDevice.Packages.Count == 0)
            {
                hasVersion = false;
                return;
            }

            var devicePackage = selectedDevice.Packages?
                                    .FirstOrDefault(p => p.Component == "docker-compose")?
                                    .Installed.PackageId;

            hasVersion = stacksPackages.Any(sp => sp.PackageId == devicePackage);

            _log.Info($"Checked device package '{devicePackage}'. Has version: {hasVersion}");
        }
        catch (Exception ex)
        {
            _log.Error("Error while checking if device has package.", ex);
        }
    }

    void UpdateImage()
    {
        UriHelper.NavigateTo($"/updateImage/{deviceUuid}");
    }

    void UpdateVersion()
    {
        try
        {
            if (hasVersion)
            {
                _log.Info($"Initiating version update for device '{deviceUuid}'.");
                UriHelper.NavigateTo($"/updateVersion/{deviceUuid}");
            }
            else
            {
                _log.Warn($"Device '{deviceUuid}' does not have version support.");
                
                ToastService.ShowWarning(@localizer["NoSupport"]);
            }
        }
        catch (Exception ex)
        {
            _log.Error($"Error updating version for device '{deviceUuid}'.", ex);
        }
    }
}