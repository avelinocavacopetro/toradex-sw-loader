@page "/updateImage/{deviceUuid}"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject PackageService PackageService
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject FilterService FilterService
@inject NavigationManager UriHelper
@inject SweetAlertService Swal

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>Atualizar pacote</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">Atualizar Pacote</h3>

        <table class="table mt-3 w-100">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th style="width: 50%; padding-left: 20px; border-right: 1px solid white; border-top-left-radius: 5px;">Nome</th>
                    <th style="width: 50%; border-top-right-radius: 5px; text-align: center;">Versão</th>
                </tr>
            </thead>
            <tbody style="height: 60px;">
                @foreach (var package in paginatedPackages)
                {
                    if (package?.Package != null)
                    {
                        <tr class="@GetRowClass(package.Package)" @onclick="() => SelectRow(package.Package)">
                            <td title="@package.Package.Name" style="width: 50%; padding-left: 20px; vertical-align: middle;">
                                @package.Package.Name
                            </td>
                            <td style="width: 50%; text-align: center; vertical-align: middle;">@package.Package.Version</td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div class="sticky-footer-right">
            <div class="d-flex align-items-center gap-3 justify-content-end">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? deviceUuid { get; set; }
    private DetailedDevice? selectedDevice = new DetailedDevice();

    private List<StackPackage> paginatedPackages = new List<StackPackage>();
    private List<StackPackage> stacksPackages = new List<StackPackage>();
    private Package? selectedPackage;
    private WindowDimension? dimension;

    private int actualPage = 1;
    private int packagesPerPage = 6;
    private int TotalPages => (int)Math.Ceiling((double)stacksPackages.Count / packagesPerPage);

    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        bool authOk = await TorizonService.AuthenticateAsync();

        if (!authOk)
        {
            Console.WriteLine("Falha na autenticação.");
            isLoading = false;
            return;
        }

        var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{deviceUuid}";
        selectedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);

        stacksPackages = await context.StackPackages
            .Include(pp => pp.Package)
            .ToListAsync();

        await FilterService.LoadFilterAsync();

        UpdatePage();

        isLoading = false;
        StateHasChanged();
    }

    private void OnDimensionsChanged(WindowDimension newDimension)
    {
        dimension = newDimension;
        packagesPerPage = dimension.Width <= 1024 ? 3 : 5;

        UpdatePage();
        StateHasChanged();
    }

    private async Task SelectRow(Package package)
    {
        selectedPackage = package;

        await OnClick();
    }

    private async Task OnClick()
    {
        using var context = DbContextFactory.CreateDbContext();

        if (selectedPackage != null)
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Deseja continuar?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Continuar",
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = "Cancelar"
            });

            if (result.IsConfirmed)
            {
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou o software: Nome: {selectedPackage.Name} | Versão: {selectedPackage.Version} para a placa {selectedDevice?.DeviceName}",
                    ActType = "Manutenção",
                    ActTimeStamp = DateTime.Now
                };

                var deviceDto = new DeviceDTO
                {
                    PackageIds = new List<string> { selectedPackage.Id.ToString() },
                    Custom = new Dictionary<string, PackageUri>
                {
                    {
                        selectedPackage.Id,
                        new PackageUri
                        {
                            Uri = selectedPackage.Id
                        }
                    }
                },
                    Devices = new List<string> {deviceUuid.ToString()},
                    };

                var response = await TorizonService.SendUpdateAsync(deviceDto);

                if (response.IsSuccessStatusCode)
                {
                    context.UserActivities.Add(userAct);
                    await context.SaveChangesAsync();

                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Imagem atualizada com sucesso!",
                        Icon = SweetAlertIcon.Success,
                        ConfirmButtonColor = "#0B5120"
                    });

                    UriHelper.NavigateTo("/home");
                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Erro ao atualizar imagem",
                        Icon = SweetAlertIcon.Warning,
                        Text = $"{response.StatusCode}",
                        ConfirmButtonColor = "#0B5120"
                    });

                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Erro ao enviar update. Código: {response.StatusCode}");
                    Console.WriteLine($"Conteúdo do erro: {errorContent}");
                }
            }
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Selecione um software!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120",
            });
        }
    }

    private string GetRowClass(Package package)
    {
        return selectedPackage == package ? "table-primary" : string.Empty;
    }

    private void UpdatePage()
    {
        paginatedPackages = stacksPackages
                                 .Skip((actualPage - 1) * packagesPerPage)
                                 .Take(packagesPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}