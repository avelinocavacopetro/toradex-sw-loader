@page "/updateImage/{deviceUuid}"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject FilterService FilterService
@inject NavigationManager UriHelper
@inject SweetAlertService Swal
@inject IStringLocalizer<Resource> localizer

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>@localizer["UpdatePackage"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">@localizer["UpdatePackage"]</h3>

        <table class="table mt-3 w-100">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th style="width: 50%; padding-left: 20px; border-right: 1px solid white; border-top-left-radius: 5px;">@localizer["Name"]</th>
                    <th style="width: 50%; border-top-right-radius: 5px; text-align: center;">@localizer["Version"]</th>
                </tr>
            </thead>
            <tbody style="height: 60px;">
                @foreach (var package in paginatedPackages)
                {
                    if (package?.Package != null)
                    {
                        <tr @onclick="() => SelectRow(package.Package)">
                            <td title="@package.Package.Name" style="width: 50%; padding-left: 20px; vertical-align: middle;">
                                @package.Package.Name
                            </td>
                            <td style="width: 50%; text-align: center; vertical-align: middle;">@package.Package.Version</td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div class="sticky-footer-right">
            <div class="d-flex align-items-center gap-3 justify-content-end">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Object Variables
    private DetailedDevice? selectedDevice = new();
    private Package? selectedPackage;
    private List<StackPackage> paginatedPackages = new();
    private List<StackPackage> stacksPackages = new();
    private static readonly ILog log = LogManager.GetLogger(typeof(UpdateImage));

    // String Variables
    [Parameter]
    public string? deviceUuid { get; set; }

    // Integer Variables
    private int actualPage = 1;
    private int packagesPerPage = 6;
    private int TotalPages => (int)Math.Ceiling((double)stacksPackages.Count / packagesPerPage);

    // Boolean Variables
    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            if (await TorizonService.AuthenticateAsync())
            {
                var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{deviceUuid}";
                selectedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);

                stacksPackages = await context.StackPackages
                    .Include(pp => pp.Package)
                    .ToListAsync();

                await FilterService.LoadFilterAsync();

                UpdatePage();

                isLoading = false;
                StateHasChanged();
            }

            log.Info("Update Image page loaded successfully.");
        }
        catch (Exception ex)
        {
            log.Error("Error loading Update Image page.", ex);
        }
    }

    private async Task SelectRow(Package package)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            if (selectedPackage != null)
            {
                var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Deseja continuar?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Continuar",
                    ConfirmButtonColor = "#0B5120",
                    CancelButtonText = "Cancelar"
                });

                if (result.IsConfirmed)
                {
                    var userAct = new UserActivity
                    {
                        UserId = LoginService.UserId,
                        ActMessage = $"Selecionou o software: Nome: {selectedPackage.Name} | Versão: {selectedPackage.Version} para a placa {selectedDevice?.DeviceName}",
                        ActType = "Manutenção",
                        ActTimeStamp = DateTime.Now
                    };

                    var deviceDto = new DeviceDTO
                    {
                        PackageIds = new List<string> { selectedPackage.Id.ToString() },
                        Devices = new List<string> { deviceUuid.ToString() },
                    };

                    var response = await TorizonService.SendUpdateAsync(deviceDto);

                    if (response.IsSuccessStatusCode)
                    {
                        context.UserActivities.Add(userAct);
                        await context.SaveChangesAsync();

                        log.Info($"Software '{selectedPackage.Name}' selected for update.");

                        await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Imagem atualizada com sucesso!",
                            Icon = SweetAlertIcon.Success,
                            ConfirmButtonColor = "#0B5120"
                        });

                        UriHelper.NavigateTo("/home");
                    }
                    else
                    {
                        await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Erro ao atualizar imagem",
                            Icon = SweetAlertIcon.Warning,
                            Text = $"{response.StatusCode}",
                            ConfirmButtonColor = "#0B5120"
                        });

                        var errorContent = await response.Content.ReadAsStringAsync();
                    }
                }
            }
            else
            {
                log.Warn("No image selected before attempting update.");

                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Selecione um software!",
                    Icon = SweetAlertIcon.Warning,
                    ConfirmButtonColor = "#0B5120",
                });
            }
        } 
        catch (Exception ex)
        {
            log.Error("Error selecting image for update.", ex);
        }
    }

    private void UpdatePage()
    {
        paginatedPackages = stacksPackages
                                 .Skip((actualPage - 1) * packagesPerPage)
                                 .Take(packagesPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}