@page "/updateImage/{deviceUuid}"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject FilterService FilterService
@inject NavigationManager UriHelper
@inject SweetAlertService Swal

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>@localizer["UpdatePackage"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <a href="#"
           onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
           class="text-black"
           style="max-width: 5vh; cursor: @(isLoading ? "default" : "pointer");">
            <i class="bi bi-arrow-left fs-1"></i>
        </a>

        <h3 class="text-center pb-5">@localizer["UpdatePackage"]</h3>

        <div class="card-body pb-2 px-0 mt-2">
            <div class="table-responsive border rounded-2">
                <QuickGrid Class="table table-striped m-0"
                           Items="stacksPackages.AsQueryable()"
                           ItemKey="@(pp => pp.StackId + pp.PackageId)">

                    <!--- Coluna dos nomes dos pacotes --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Name"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context.Package!)">
                                @context.Package?.Name
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna das versões --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Version"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left" style="cursor: pointer;" @onclick="() => SelectRow(context.Package!)">
                                @context.Package?.Version
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>

                @if (!stacksPackages.Any())
                {
                    <table class="table table-striped m-0">
                        <tbody>
                            <tr>
                                <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                    @localizer["NoData"]
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Object
    DetailedDevice? selectedDevice = new();
    Package? selectedPackage;
    List<StackPackage> stacksPackages = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(UpdateImage));

    // Variáveis: String
    [Parameter]
    public string? deviceUuid { get; set; }

    // Variáveis: Boolean
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            if (await TorizonService.AuthenticateAsync())
            {
                var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{deviceUuid}";
                selectedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);

                stacksPackages = await context.StackPackages
                    .Include(pp => pp.Package)
                    .ToListAsync();

                await FilterService.LoadFilterAsync();

                UpdatePage();

                isLoading = false;
                StateHasChanged();
            }

            _log.Info("Update Image page loaded successfully.");
        }
        catch (Exception ex)
        {
            _log.Error("Error loading Update Image page.", ex);
        }
    }

    async Task SelectRow(Package package)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            selectedPackage = package;

            if (selectedPackage != null)
            {
                var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Deseja continuar?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText =  @localizer["Continue"],
                    ConfirmButtonColor = "#0B5120",
                    CancelButtonText = @localizer["Cancel"],
                    CancelButtonColor = "#dc3545"
                });

                if (result.IsConfirmed)
                {
                    var userAct = new UserActivity
                    {
                        UserId = LoginService.UserId,
                        ActMessage = $"Selecionou o software: Nome: {selectedPackage.Name} | Versão: {selectedPackage.Version} para a placa {selectedDevice?.DeviceName}",
                        ActType = "Manutenção",
                        ActTimeStamp = DateTime.Now
                    };

                    var deviceDto = new DeviceDTO
                    {
                        PackageIds = new List<string> { selectedPackage.Id.ToString() },
                        Devices = new List<string> { deviceUuid!.ToString() },
                    };

                    var response = await TorizonService.SendUpdateAsync(deviceDto);

                    if (response.IsSuccessStatusCode)
                    {
                        context.UserActivities.Add(userAct);
                        await context.SaveChangesAsync();

                        _log.Info($"Software '{selectedPackage.Name}' selected for update.");

                        ToastService.ShowSuccess(@localizer["ImageSuccess"]);

                        UriHelper.NavigateTo("/home");
                    }
                    else
                    {
                        ToastService.ShowError(@localizer["ImageError"]);

                        var errorContent = await response.Content.ReadAsStringAsync();
                    }
                }
            }
            else
            {
                _log.Warn("No image selected before attempting update.");

                ToastService.ShowWarning(@localizer["NoPackageSelected"]);
            }
        } 
        catch (Exception ex)
        {
            _log.Error("Error selecting image for update.", ex);
        }
    }

    void UpdatePage()
    {
        InvokeAsync(StateHasChanged);        
    }
}