@page "/adminHistory"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject LoginService LoginService
@inject TorizonService TorizonService

<PageTitle>Histórico de Carregamentos</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <h3 class="text-center">Histórico de Carregamentos</h3>

    <a href="#"
       onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
       class="text-black"
       style="cursor: @(isLoading ? "default" : "pointer");">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <div class="d-flex gap-3 align-items-center w-50">
            <input type="text" class="form-control" placeholder="Pesquisar placa pelo nome..."
                   @bind="searchTerm" @bind:event="oninput" />

            <label>Início</label>
            <input type="date" class="form-control w-25" @bind="startDate" max="@today"/>

            <label>Fim</label>
            <input type="date" class="form-control w-25" @bind="endDate" max="@today" />
        </div>


        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @TotalPages de @TotalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-center align-items-center">
        <table class="table mt-5 w-100">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th>Placa</th>
                    <th class="text-center">Data</th>
                    <th class="text-center">Colaborador</th>
                    <th class="text-center">Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var finalProduct in paginatedFinalProducts)
                {
                    <tr>
                        <td>@finalProduct.Name</td>
                        <td class="text-center">@finalProduct.CreatedAt</td>
                        <td class="text-center">@finalProduct.UserPetrotec?.UserName</td>
                        <td class="text-center">@finalProduct.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<FinalProduct> finalProducts = new List<FinalProduct>();
    private List<FinalProduct> paginatedFinalProducts = new List<FinalProduct>();
    private DateTime? startDate = DateTime.Today.AddDays(-30);
    private DateTime? endDate = DateTime.Today;

    private System.Threading.Timer? refreshTimer;

    private string today = DateTime.Today.ToString("yyyy-MM-dd");

    private int actualPage = 1;
    private int finalProductsPerPage = 7;
    private int TotalPages => (int)Math.Ceiling((double)finalProducts.Count / finalProductsPerPage);

    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;
    
    private IEnumerable<FinalProduct> FilteredPages =>
    finalProducts
        .Where(fp => (string.IsNullOrWhiteSpace(searchTerm)) &&
                     (!startDate.HasValue || fp.CreatedAt.Date >= startDate.Value.Date) &&
                     (!endDate.HasValue || fp.CreatedAt.Date <= endDate.Value.Date));

    private IEnumerable<FinalProduct> PaginatedActivities =>
    FilteredPages
        .Skip((actualPage - 1) * finalProductsPerPage)
        .Take(finalProductsPerPage);

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFinalProductsAsync();

        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await RefreshStatusesAsync();
                UpdatePage();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(0), TimeSpan.FromSeconds(30));
    }

    private async Task LoadFinalProductsAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        finalProducts = await context.FinalProducts
            .Include(fp => fp.UserPetrotec)
            .OrderByDescending(fp => fp.CreatedAt)
            .ToListAsync();

        UpdatePage();
        isLoading = false;
    }

    private async Task RefreshStatusesAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        bool authOk = await TorizonService.AuthenticateAsync();
        if (!authOk) return;

        foreach (var fp in finalProducts)
        {
            var url = $"https://app.torizon.io/api/v2beta/devices/{fp.DeviceUuid}";
            string? atualStatus = await TorizonService.GetDeviceStatusAsync(url);

            if (!string.IsNullOrEmpty(atualStatus) && fp.Status != atualStatus)
            {
                fp.Status = atualStatus;
                context.Update(fp);
            }
        }

        await context.SaveChangesAsync();

        finalProducts = await context.FinalProducts
            .Include(fp => fp.UserPetrotec)
            .OrderByDescending(fp => fp.CreatedAt)
            .ToListAsync();
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    private void UpdatePage()
    {
        paginatedFinalProducts = finalProducts
                                 .Skip((actualPage - 1) * finalProductsPerPage)
                                 .Take(finalProductsPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}
