@page "/adminHistory"

@inject IDbContextFactory<AppDbContext> DbContextFactory

<PageTitle>Histórico de Carregamentos</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <h3 class="text-center">Histórico de Carregamentos</h3>

    <a href="#"
       onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
       class="text-black"
       style="cursor: @(isLoading ? "default" : "pointer");">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <div class="w-50">
            <input type="text" class="form-control" placeholder="Pesquisar placa pelo nome..."
                   @bind="searchTerm" @bind:event="oninput" />
        </div>

        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @totalPages de @totalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-center align-items-center">
        <table class="table mt-5 w-100">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th>Placa</th>
                    <th class="text-center">Hora</th>
                    <th class="text-center">Colaborador</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var activity in PaginatedActivities)
                {
                    <tr>
                        <td>@GetPlacaFromMessage(activity.ActMessage)</td>
                        <td class="text-center">@activity.ActTimeStamp.ToString(" HH:mm:ss dd-MM-yyyy")</td>
                        <td class="text-center">@activity.UserPetrotec?.UserName</td>
                        <td>VER</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<UserActivity> AllUserActivities = new List<UserActivity>();
    private List<UserActivity> paginatedActivities = new List<UserActivity>();

    private int actualPage = 1;
    private int activitiesPerPage = 7;
    private int totalPages => (int)Math.Ceiling((double)AllUserActivities.Count / activitiesPerPage);
    bool isLoading = true;
    private bool CanGoNext => actualPage < totalPages;
    private bool CanGoPrev => actualPage > 1;

    private IEnumerable<UserActivity> FilteredPages =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? AllUserActivities
        : AllUserActivities.Where(a => a.ActMessage.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<UserActivity> PaginatedActivities =>
    FilteredPages
        .Skip((actualPage - 1) * activitiesPerPage)
        .Take(activitiesPerPage);

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        AllUserActivities = await context.UserActivities
            .Include(a => a.UserPetrotec)
            .Where(a => a.ActMessage.Contains("Iniciou o carregamento da placa"))
            .OrderByDescending(a => a.ActTimeStamp)
            .ToListAsync();

        isLoading = false;

        UpdatePage();
    }

    private string GetPlacaFromMessage(string message)
    {
        var parts = message.Split("-> Nome:");
        return parts.Length > 1 ? parts[1].Trim() : "N/A";
    }

    private void UpdatePage()
    {
        paginatedActivities = AllUserActivities
                                 .Skip((actualPage - 1) * activitiesPerPage)
                                 .Take(activitiesPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (actualPage < totalPages)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (actualPage > 1)
        {
            actualPage--;
            UpdatePage();
        }
    }
}
