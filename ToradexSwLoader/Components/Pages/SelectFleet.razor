@page "/selectFleet/{selectedDeviceName}/{selectedPackageName}"

@using ToradexSwLoader.Data
@using ToradexSwLoader.Models
@using ToradexSwLoader.Services
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject TorizonService TorizonService
@inject FleetService FleetService
@inject NavigationManager UriHelper
@inject IJSRuntime JS
@inject SweetAlertService Swal
@inject LoginService LoginService

<PageTitle>Selecionar Frota</PageTitle>

<a href="#"
   onclick="if (@(isLoading.ToString().ToLower())) { event.preventDefault(); } else { history.back(); }"
   class="text-black"
   style="cursor: @(isLoading ? "default" : "pointer");">
    <i class="bi bi-arrow-left fs-1"></i>
</a>

<h3 class="text-center pb-5">Selecionar Frota</h3>
<br />
<br />

<div class="grid-container">
    @foreach (var fleet in fleets)
    {
        <div class="grid-item" @onclick="() => SelectFleetName(fleet)">@fleet.FleetName</div>
    }
</div>

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 25px;
        padding: 10px;
    }

    .grid-item {
        background-color: #4CAF50;
        color: white;
        text-align: center;
        padding: 30px 15px;
        font-size: 22px;
        border-radius: 5px;
    }
</style>

@code {
    [Parameter]
    public string selectedDeviceName { get; set; }

    [Parameter]
    public string selectedPackageName { get; set; }
    private List<Fleet> fleets = new List<Fleet>();
    private Fleet? selectedFleet;
    private string selectedFleetName;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        fleets = await context.Fleets.ToListAsync();

        StateHasChanged();

        var importTask = Task.Run(async () =>
        {
            var fleetUrl = "https://app.torizon.io/api/v2beta/fleets";
            bool imported = await FleetService.ImportFleetsFromApiAsync(fleetUrl);
            return imported;
        });

        bool importResult = await importTask;

        if (importResult)
        {
            using var newContext = DbContextFactory.CreateDbContext();
            fleets = await newContext.Fleets.ToListAsync();
            StateHasChanged();
        }

        isLoading = false;
    }

    private async void SelectFleetName(Fleet fleet)
    {
        selectedFleet = fleet;
        selectedFleetName = fleet.FleetName;
        await OnClick();
    }

    private async Task OnClick()
    {
        if (selectedFleet != null)
        {
            using var context = DbContextFactory.CreateDbContext();
            var userAct = new UserActivity
            {
                UserLoginId = LoginService.CurrentLoginId,
                ActMessage = $"Colaborador selecionou a frota -> Nome: {selectedFleet.FleetName}",
                ActTimeStamp = DateTime.Now
            };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/charging/{Uri.EscapeDataString(selectedDeviceName)}/{Uri.EscapeDataString(selectedPackageName)}/{Uri.EscapeDataString(selectedFleetName)}");
        }
    }
}

