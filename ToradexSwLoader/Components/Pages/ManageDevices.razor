@page "/manageDevices"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Gerir Dispositivos</PageTitle>

<h3>Configurar filtros a aplicar:</h3>

<br />

@if (devices != null)
{
    <table class="table table-hover table-bordered align-middle text-center">
        <thead style="background-color: #0c6527; color: white;">
            <tr>
                <th>Nome do Dispositivo</th>
                <th>Selecionar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in devices)
            {
                <tr class="table-light">
                    <td>@device.DeviceName</td>
                    <td>
                        <div class="form-check d-flex justify-content-center">
                            <input type="checkbox" class="largerCheckbox" id="toggle-@device.DeviceId"
                                   @onchange="(e => ToggleProduct(e, device))"
                                   checked="@selectedDevices.Any(d => d.DeviceId == device.DeviceId)" />
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <br />

    <div class="row mb-3">
        <div class="col-auto">
            <label for="onlineTime" class="fw-bold fs-5">
                Duração de estado online (máx. 5 min.)
            </label>
            <input id="onlineTime" @bind="onlineTime" type="number" min="1" max="5" class="form-control mt-2" />
        </div>
    </div>

    <div class="text-center fixed-bottom pb-5">
        <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="ApplyFilter">Aplicar</button>
    </div>
}

@code {
    private List<Device>? devices;
    private List<Device> selectedDevices = new List<Device>();

    private string deviceName = string.Empty;
    private bool isLoading = true;
    private int onlineTime = 1;

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();
        devices = await context.Devices.ToListAsync();

        selectedDevices = FilterService.SelectedDevices;
        onlineTime = FilterService.OnlineTime;

        isLoading = false;
    }

    private void ToggleProduct(ChangeEventArgs e, Device device)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedDevices.Any(d => d.DeviceId == device.DeviceId))
                selectedDevices.Add(device);
        }
        else
        {
            selectedDevices.RemoveAll(d => d.DeviceId == device.DeviceId);
        }
    }

    private async Task ApplyFilter()
    {
        if (onlineTime < 1 || onlineTime > 5)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor coloque um valor entre 1 a 5 minutos!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        if (selectedDevices.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos um dispositivo!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
            
        await FilterService.ApplyDevicesFilter(new List<Device>(selectedDevices));

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Filtros aplicados com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }
}