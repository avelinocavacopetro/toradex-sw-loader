@page "/managePackages"

@using Microsoft.EntityFrameworkCore
@using ToradexSwLoader.Data
@using ToradexSwLoader.Models
@using ToradexSwLoader.Services
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject PackageService PackageService
@inject FilterService FilterService
@inject NavigationManager UriHelper
@inject SweetAlertService Swal
@inject IJSRuntime JS

<h3 class="pb-5">Configurar pacotes a visualizar</h3>

<div class="pt-3 w-50">
    <label for="packageName" class="pt-4" style="font-size: 18px; font-weight: bold;">Nome</label>
    <select id="packageName" class="form-select" @onchange="OnPackageNameChanged">
        <option value="">Selecione um pacote</option>
        @foreach (var name in packageNames)
        {
            <option value="@name">@name</option>
        }
    </select>


    <label for="packageVersion" class="pt-4" style="font-size: 18px; font-weight: bold;">Versão</label>
    <select id="packageVersion" class="form-select" @bind="selectedPackageVersion">
        <option value="">Selecione uma versão</option>
        @foreach (var version in filteredVersions)
        {
            <option value="@version">@version</option>
        }
    </select>
</div>

<div class="text-center fixed-bottom pb-4">
    <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="SavePackageFilter">Aplicar</button>
</div>

@code {
    private List<Package> packages = new List<Package>();
    private List<Package> paginatedPackages = new List<Package>();
    private Package? selectedPackage;
    private WindowDimension? dimension;

    private HashSet<string> packageNames = new();
    private List<string> filteredVersions = new();
    private string? selectedPackageName;
    private string? selectedPackageVersion;
    private int actualPage = 1;
    private int packagesPerPage = 5;
    private int totalPages => (int)Math.Ceiling((double)packages.Count / packagesPerPage);

    private void OnDimensionsChanged(WindowDimension newDimension)
    {
        dimension = newDimension;
        packagesPerPage = dimension.Width <= 1024 ? 3 : 5;

        StateHasChanged();
    }

    private async Task SavePackageFilter()
    {
        if (string.IsNullOrEmpty(selectedPackageName))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione um dispositivo e a versão!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        FilterService.ApplyPackageFilter(selectedPackageName, selectedPackageVersion);

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Filtros aplicados com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        packages = await context.Packages
                                     .Include(p => p.PackageHardwares)
                                     .ThenInclude(ph => ph.Hardware)
                                     .ToListAsync();
        packageNames = packages
            .Select(p => p.PackageName)
            .Distinct()
            .OrderBy(p => p)
            .ToHashSet();
    }

    private void OnPackageNameChanged(ChangeEventArgs e)
    {
        selectedPackageName = e.Value?.ToString();
        filteredVersions = packages
            .Where(p => p.PackageName == selectedPackageName)
            .Select(p => p.PackageVersion)
            .OrderByDescending(v => v)
            .ToList();

        selectedPackageVersion = null;
    }
}
