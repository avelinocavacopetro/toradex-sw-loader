@page "/managePackages"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject SweetAlertService Swal
@inject FilterService FilterService

<PageTitle>Gerir Pacotes</PageTitle>

<h3 class="pb-3">Configurar pacotes a visualizar</h3>

<div>
    <table class="table w-50">
        <tbody>
            @foreach (var products in FilterService.SelectedProducts)
            {
                <tr class="table-light">
                    <td>@products.ProductName</td>
                    <td>
                        <div class="form-check d-flex justify-content-center">
                            <input type="checkbox" class="largerCheckbox" />
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="w-50">
    <label for="packageInput" class="pt-4" style="font-size: 18px; font-weight: bold;">Nome</label>
    <div class="position-relative">
        <input id="packageInput" class="form-control" type="text"
               @bind="searchTerm"
               @oninput="FilterPackageNames"
               @onfocus="() => showSuggestions = true"
               @onblur="HideSuggestions" />

        @if (showSuggestions && filteredPackageNames.Any())
        {
            <ul class="list-group position-absolute w-100 shadow"
                style="z-index: 1000; max-height: 200px; overflow-y: auto;">
                @foreach (var name in filteredPackageNames)
                {
                    <li class="list-group-item list-group-item-action"
                        style="cursor: pointer;"
                        @onclick="() => SelectPackage(name)">
                        @name
                    </li>
                }
            </ul>
        }
    </div>

    <label for="versionInput" class="pt-3" style="font-size: 18px; font-weight: bold;">Versão</label>
    <div class="position-relative">
        <input id="versionInput" class="form-control" type="text"
               @bind="versionSearchTerm"
               @oninput="FilterVersions"
               @onfocus="() => showVersionSuggestions = true"
               @onblur="HideVersionSuggestions"
               disabled="@versionDisabled" />

        @if (showVersionSuggestions && filteredVersionList.Any())
        {
            <ul class="list-group position-absolute w-100 shadow"
                style="z-index: 1000; max-height: 200px; overflow-y: auto;">
                @foreach (var version in filteredVersionList)
                {
                    <li class="list-group-item list-group-item-action"
                        style="cursor: pointer;"
                        @onclick="() => SelectVersion(version)">
                        @version
                    </li>
                }
            </ul>
        }
    </div>
</div>

<div class="text-center fixed-bottom pb-4">
    <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="SavePackageFilter">Aplicar</button>
</div>

@code {
    private List<Package> packages = new();
    private HashSet<string> packageNames = new();
    private List<string> filteredVersions = new();
    private List<string> filteredVersionList = new();
    private List<string> filteredPackageNames = new();
    private string? selectedPackageName;
    private string? selectedPackageVersion;
    private string versionSearchTerm = "";
    private bool showVersionSuggestions = false;
    private string searchTerm = "";
    private bool showSuggestions = false;
    private bool versionDisabled = true;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        packages = await context.Packages
                                .Include(p => p.PackageHardwares)
                                .ThenInclude(ph => ph.Hardware)
                                .ToListAsync();

        packageNames = packages
            .Select(p => p.PackageName)
            .Distinct()
            .OrderBy(p => p)
            .ToHashSet();

        filteredPackageNames = packageNames.ToList();

        await FilterService.LoadFilterAsync();
    }

    private void FilterPackageNames(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        showSuggestions = true;

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPackageNames = packageNames.ToList();
        }
        else
        {
            filteredPackageNames = packageNames
                .Where(p => p.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void SelectPackage(string name)
    {
        selectedPackageName = name;
        searchTerm = name;
        showSuggestions = false;

        filteredVersions = packages
            .Where(p => p.PackageName == selectedPackageName)
            .Select(p => p.PackageVersion)
            .OrderByDescending(v => v)
            .ToList();

        filteredVersionList = filteredVersions.ToList();

        selectedPackageVersion = null;
        versionSearchTerm = "";

        versionDisabled = false;
    }


    private async Task HideSuggestions()
    {
        await Task.Delay(200);
        showSuggestions = false;
    }

    private async Task SavePackageFilter()
    {
        if (string.IsNullOrEmpty(selectedPackageName))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione um dispositivo e a versão!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        await FilterService.ApplyPackageFilter(selectedPackageName, selectedPackageVersion);

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Filtros aplicados com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void FilterVersions(ChangeEventArgs e)
    {
        versionSearchTerm = e.Value?.ToString() ?? "";
        showVersionSuggestions = true;

        if (string.IsNullOrWhiteSpace(versionSearchTerm))
        {
            filteredVersionList = filteredVersions.ToList();
        }
        else
        {
            filteredVersionList = filteredVersions
                .Where(v => v.Contains(versionSearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void SelectVersion(string version)
    {
        selectedPackageVersion = version;
        versionSearchTerm = version;
        showVersionSuggestions = false;
    }

    private async Task HideVersionSuggestions()
    {
        await Task.Delay(200);
        showVersionSuggestions = false;
    }

}