@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject TorizonService TorizonService
@inject SweetAlertService Swal
@inject LoginService LoginService

<h6 class="pb-5">A sessão termina automaticamente após a duração selecionada. A duração predefinida é de 90 minutos e a sessão pode ser terminada manualmente a qualquer altura.</h6>

<h6>Duração da sessão de acesso (@FormatDuration(duration))</h6>

<div style="display: flex; align-items: center; flex-direction: column;">
    <input type="range"
           min="30"
           max="720"
           step="30"
           style="width: 470px; accent-color: #0078d7;"
           @bind="duration" />

    <div class="pt-1" style="display: flex; justify-content: space-between; width: 470px; font-size: 0.9rem; color: #666;">
        <p>30 min</p>
        <p>12 horas</p>
    </div>
</div>

<div class="text-center py-5">
    <button class="btn btn-color btn-lg" style="width: 20vw; font-size: 1.5rem;" @onclick="OnClick">Criar</button>
</div>

@code {
    [Parameter]
    public string? DeviceUuid { get; set; }
    private DetailedDevice? selectedDevice = new DetailedDevice();

    [Parameter]
    public SshKey? SelectedKey { get; set; }
    private int duration = 90;
    [Parameter]
    public EventCallback OnCloseModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        bool authOk = await TorizonService.AuthenticateAsync();

        if (!authOk)
        {
            Console.WriteLine("Falha na autenticação.");
            return;
        }

        var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{DeviceUuid}";
        selectedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);

        StateHasChanged();

        Console.WriteLine($"{selectedDevice.DeviceName}");
    }

    private string FormatDuration(int minutes)
    {
        int hours = minutes / 60;
        int remainingMinutes = minutes % 60;

        if (hours > 0 && remainingMinutes > 0)
            return $"{hours} hora{(hours > 1 ? "s" : "")} e {remainingMinutes} minuto{(remainingMinutes > 1 ? "s" : "")}";
        else if (hours > 0)
            return $"{hours} hora{(hours > 1 ? "s" : "")}";
        else
            return $"{remainingMinutes} minuto{(remainingMinutes > 1 ? "s" : "")}";
    }

    private async Task OnClick()
    {
        using var context = DbContextFactory.CreateDbContext();

        if (duration != 0)
        {
            var resultClick = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Deseja continuar?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Continuar",
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = "Cancelar"
            });

            if (resultClick.IsConfirmed)
            {
                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Criou uma sessão para a placa {selectedDevice?.DeviceName} com duração {duration}",
                    ActType = "Remote Acess",
                    ActTimeStamp = DateTime.Now
                };

                var sessionUrl = $"https://app.torizon.io/api/v2beta/remote-access/device/{DeviceUuid}/sessions";

                var response = await TorizonService.SendCreateSession(DeviceUuid, duration, SelectedKey.Pubkey);

                if (response.IsSuccessStatusCode)
                {
                    context.UserActivities.Add(userAct);
                    await context.SaveChangesAsync();

                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Sessão criada com sucesso!",
                        Icon = SweetAlertIcon.Success,
                        ConfirmButtonColor = "#0B5120"
                    });

                    if (OnCloseModal.HasDelegate)
                    {
                        await OnCloseModal.InvokeAsync(null);
                    }

                }
                else
                {
                    if ((int)response.StatusCode == 409)
                    {
                        var result = await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Já existe uma sessão",
                            Icon = SweetAlertIcon.Error,
                            Text = $"Deseja apagar a sessão atual?",
                            ShowDenyButton = true, 
                            ConfirmButtonColor = "#0B5120",
                            ConfirmButtonText = "Sim",
                            DenyButtonText = "Não"
                        });

                        if (result.IsConfirmed)
                        {
                            await TorizonService.CancelSessionAsync(DeviceUuid);

                            await Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Sessão removida com sucesso!",
                                Icon = SweetAlertIcon.Success,
                                ConfirmButtonColor = "#0B5120"
                            });
                        }
                    }
                    else
                    {
                        await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Erro ao criar sessão",
                            Icon = SweetAlertIcon.Error,
                            Text = $"{response.StatusCode}",
                            ConfirmButtonColor = "#0B5120"
                        });
                    }
                    
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Erro ao enviar update. Código: {response.StatusCode}");
                    Console.WriteLine($"Conteúdo do erro: {errorContent}");
                }
            }
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Selecione uma duração!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120",
            });
        }
    }
}
