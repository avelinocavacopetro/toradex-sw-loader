@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject TorizonService TorizonService
@inject SweetAlertService Swal
@inject LoginService LoginService

<h6 class="pb-5" style="white-space: wrap;">@localizer["SessionDurationText"]</h6>

<h6>@localizer["SessionDuration"] (@FormatDuration(duration))</h6>

<div style="display: flex; align-items: center; flex-direction: column;">
    <input type="range"
           min="30"
           max="720"
           step="30"
           style="width: 470px; accent-color: #0078d7;"
           @bind="duration" />

    <div class="pt-1" style="display: flex; justify-content: space-between; width: 470px; font-size: 0.9rem; color: #666;">
        <p>@MinutesString min</p>
        <p>@HoursString @localizer["Hour"]s</p>
    </div>
</div>

<div class="text-center py-5">
    <button class="btn btn-color btn-lg" style="width: 20vw; font-size: 1.5rem;" @onclick="OnClick">@localizer["Create"]</button>
</div>

@code {
    // Variáveis: Parameters
    [Parameter]
    public string? DeviceUuid { get; set; }

    [Parameter]
    public SshKey? SelectedKey { get; set; }

    [Parameter]
    public EventCallback<SessionSsh> OnNextModal { get; set; }

    // Variáveis: Object
    DetailedDevice? selectedDevice = new();
    Modal modalAcess = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(RemoteAcess));

    // Variáveis: Integer
    int duration = 90;
    const int MinutesInAHour = 60;
    const int SecondsInAMinute = 60;

    // Variáveis: String
    const string MinutesString = "30";
    const string HoursString = "12";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            if (!await TorizonService.AuthenticateAsync())
            {
                _log.Error("Error authenticating to Torizon Service.");
                return;
            }

            var detailUrl = $"https://app.torizon.io/api/v2beta/devices/{DeviceUuid}";
            selectedDevice = await TorizonService.GetItemAsync<DetailedDevice>(detailUrl);

            _log.Info($"Device - {selectedDevice?.DeviceName} loaded successfully.");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            _log.Error("Error authenticating to Torizon Service or loading device.", ex);
        }
    }

    string FormatDuration(int minutes)
    {
        int hours = minutes / MinutesInAHour;
        int remainingMinutes = minutes % SecondsInAMinute;

        if (hours > 0 && remainingMinutes > 0)
            return $"{hours} hora{(hours > 1 ? "s" : "")} e {remainingMinutes} minuto{(remainingMinutes > 1 ? "s" : "")}";
        else if (hours > 0)
            return $"{hours} hora{(hours > 1 ? "s" : "")}";
        else
            return $"{remainingMinutes} minuto{(remainingMinutes > 1 ? "s" : "")}";
    }

    async Task OnClick()
    {
        if (duration == 0)
        {
            _log.Warn($"User {LoginService.UserId} attempted to create a session without selecting a duration.");

            ToastService.ShowWarning(@localizer["SelectDuration"]);
            return;
        }

        var confirmed = await ConfirmAsync(@localizer["WantContinue"]);
        if (!confirmed)
        {
            _log.Info($"User {LoginService.UserId} cancelled session creation.");
            return;
        }

        _log.Info($"User {LoginService.UserId} initiated session creation for device {selectedDevice?.DeviceName} with duration {duration}.");

        var response = await TorizonService.SendCreateSession(DeviceUuid!, duration, SelectedKey!.Pubkey);

        if (response.IsSuccessStatusCode)
        {
            await HandleSessionCreatedAsync();
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            _log.Error($"Failed to create session for device {selectedDevice?.DeviceName} by user {LoginService.UserId}. Status: {response.StatusCode}, Response: {errorContent}");

            if ((int)response.StatusCode == 409)
            {
                var shouldCancel = await ConfirmAsync(@localizer["SessionsExists"], true);
                if (shouldCancel)
                {
                    _log.Info($"User {LoginService.UserId} opted to cancel existing session for device {selectedDevice?.DeviceName}.");
                    await TorizonService.CancelSessionAsync(DeviceUuid!);
                    ToastService.ShowSuccess(@localizer["SessionRemoved"]);
                }
                else
                {
                    _log.Info($"User {LoginService.UserId} declined to cancel existing session for device {selectedDevice?.DeviceName}.");
                }
            }
            else
            {
                ToastService.ShowError($"{@localizer["Error"]}. {response.StatusCode}");
            }
        }
    }

    async Task<bool> ConfirmAsync(string message, bool showDeny = false)
    {
        var options = new SweetAlertOptions
        {
            Title = message,
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = !showDeny,
            ShowDenyButton = showDeny,
            ConfirmButtonText = @localizer["Continue"],
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = showDeny ? @localizer["No"] : @localizer["Cancel"],
            CancelButtonColor = "#dc3545",
            DenyButtonText = showDeny ? @localizer["No"] : ""
        };

        var result = await Swal.FireAsync(options);
        return result.IsConfirmed;
    }

    async Task HandleSessionCreatedAsync()
    {
        _log.Info($"Session successfully created for device {selectedDevice?.DeviceName} by user {LoginService.UserId}.");

        using var context = DbContextFactory.CreateDbContext();

        var userAct = new UserActivity
        {
            UserId = LoginService.UserId,
            ActMessage = $"Criou uma sessão para a placa {selectedDevice?.DeviceName} com duração {duration}",
            ActType = "Remote Access",
            ActTimeStamp = DateTime.Now
        };

        context.UserActivities.Add(userAct);
        await context.SaveChangesAsync();

        ToastService.ShowSuccess(@localizer["SessionSuccessful"]);

        await OnNextModal.InvokeAsync();
    }
}