@page "/devices"
@using log4net

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject TorizonService TorizonService
@inject DeviceService DeviceService
@inject IJSRuntime js
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["Devices"]</PageTitle>
<HeadContent>
    <script type="text/javascript" src="~/js/site.js"></script>
</HeadContent>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">@localizer["Devices"]</h3>
        </div>

        <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mt-4 gap-4 pb-3">
            <div class="position-relative" style="width: 40%;">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder=@localizer["SearchDevice"]
                       style="border: 1px solid grey;"
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex flex-grow-1 gap-3">

                <div class="d-flex align-items-center" style="width: 30%;">
                    <label for="fleetSelect" class="fw-bold mb-0" style="min-width: 50px;">@localizer["Fleet"]</label>
                    <select id="fleetSelect" class="form-select w-100"
                            @bind="selectedFleetId"
                            @bind:after="OnFleetChanged"
                            style="border: 1px solid grey;">
                        <option value="">@localizer["SelectOneFleet"]</option>
                        @foreach (var fleet in fleets)
                        {
                            <option value="@fleet.Id">@fleet.Name</option>
                        }
                    </select>
                </div>

                <div class="d-flex align-items-center" style="width: 35%;">
                    <label for="statusOrder" class="fw-bold mb-0" style="min-width: 175px;">@localizer["StateUpdate"]</label>
                    <select id="statusOrder" class="form-select w-100"
                            @onchange='e => OnOrderChanged(e, "Status")'>
                        <option value="all">@localizer["All"]</option>
                        <option value="uptodate">@localizer["UpToDate"]</option>
                        <option value="error">@localizer["Error"]</option>
                        <option value="notseen">@localizer["NotSeen"]</option>
                        <option value="updatepending">@localizer["Pending"]</option>
                        <option value="updatescheduled">@localizer["Scheduled"]</option>
                        <option value="outdated">@localizer["Outdated"]</option>
                    </select>
                </div>

                <div class="d-flex align-items-center px-2 ms-auto">
                    <button class="btn btn-color d-flex align-items-center" @onclick="ExportToExcel">
                        <i class="bi bi-download me-2"></i>
                        @localizer["Export"]
                    </button>
                </div>

            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-custom" style="min-width: 2000px;">
                <thead>
                    <tr>
                        <th style="width: 50px; border-top-left-radius: 5px; border-right: 1px solid white;"></th>
                        <th style="width: 250px; padding-left: 20px; text-align: left; border-right: 1px solid white;">ID</th>
                        <th @onclick="@(() => SortByColumn("DeviceName"))"
                            style="width: 250px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            @localizer["Name"]
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "DeviceName" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "DeviceName" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("Hibernated"))"
                            style="width: 150px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            @localizer["Hibernation"]
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "Hibernated" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "Hibernated" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("Notes"))"
                            style="width: 170px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            @localizer["Notes"]
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "Notes" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "Notes" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("CreatedAt"))"
                            style="width: 150px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            @localizer["CreatedAt"]
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "CreatedAt" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "CreatedAt" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("ActivatedAt"))"
                            style="width: 150px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            @localizer["ActivatedAt"]
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "ActivatedAt" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "ActivatedAt" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("LastSeen"))"
                            style="width: 150px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            @localizer["LastSeen"]
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "LastSeen" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "LastSeen" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th style="width: 150px; text-align: center; border-right: 1px solid white;">@localizer["State"]</th>
                        <th style="width: 180px; text-align: center; border-top-right-radius: 5px;">@localizer["StateUpdate"]</th>
                    </tr>

                </thead>
                <tbody style="min-height: 100vh;">
                    @if (FilteredDevices is null || !FilteredDevices.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                                @localizer["NoData"]
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var device in FilteredDevices)
                        {
                            <tr>
                                <td style="width: 50px; vertical-align: middle;">
                                    <i @onclick="() => ToggleMenu(device.DeviceId)" class="bi bi-three-dots-vertical px-3" style="font-size: 1.2rem; cursor: pointer;"></i>
                                    @if (openMenuDeviceId == device.DeviceId)
                                    {
                                        <div class="actions-dropdown">
                                            <button @onclick="UpdateDevice" class="dropdown-item">
                                                <i class="bi bi-arrow-clockwise"></i> @localizer["Update"]
                                            </button>
                                            <button @onclick="RemoteAcess" class="dropdown-item">
                                                <i class="bi bi-broadcast"></i> @localizer["RemoteAcess"]
                                            </button>
                                        </div>
                                    }
                                </td>
                                <td style="width: 250px; padding-left: 20px; word-break: break-word; white-space: normal; vertical-align: middle;">
                                    @device.DeviceId
                                </td>
                                <td title="@device.DeviceName" style="width: 250px; word-break: break-word; white-space: normal; vertical-align: middle;">
                                    @device.DeviceName
                                </td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">@(device.Hibernated ? "Sim" : "Não")</td>
                                <td style="width: 170px; text-align: center; word-break: break-word; white-space: normal; vertical-align: middle;">
                                    @(string.IsNullOrEmpty(device.Notes) ? "-" : device.Notes)
                                </td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">@device.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">@(device.LastSeen?.ToString("dd/MM/yyyy HH:mm") ?? "-")</td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">
                                    @(device.LastSeen?.ToString("dd/MM/yyyy HH:mm") ?? "-")
                                </td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">
                                    @CheckOnlineStatus(device)
                                </td>
                                <td style="width: 170px; text-align: center;">
                                    @GetStatusIcon(device.DeviceStatus!)
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <Modal @ref="modalSelect" Title="@localizer["SelectUser"]" IsVerticallyCentered="true" Size="ModalSize.Large">
                <BodyTemplate>
                    <SelectUserModel DeviceUuid="@currentDeviceUuid" OnNextModal="NextModalAccess" />
                </BodyTemplate>
            </Modal>

            <Modal @ref="modalAcess" Title="@localizer["CreateAccess"]" IsVerticallyCentered="true" Size="ModalSize.Large">
                <BodyTemplate>
                    <RemoteAcess DeviceUuid="@currentDeviceUuid" SelectedKey="selectedSshKey" OnNextModal="NextModalLink" />
                </BodyTemplate>
            </Modal>

            <Modal @ref="modalSsh" Title="@localizer["VisualizeSSH"]" IsVerticallyCentered="true" Size="ModalSize.Large">
                <BodyTemplate>
                    <SshLinkModal DeviceUuid="@currentDeviceUuid" OnCloseModal="CloseModal" />
                </BodyTemplate>
            </Modal>

            <Modal @ref="modalUpdate" Title="@localizer["SelectPackages"]" IsVerticallyCentered="true" Size="ModalSize.Large">
                <BodyTemplate>
                    <UpdateImageModal DeviceUuid="@currentDeviceUuid" OnCloseModal="CloseModal"/>
                </BodyTemplate>
            </Modal>
        </div>

        <div class="d-flex justify-content-end mt-3 px-3">
            <p>@FilteredDevices.Count() @localizer["Devices"]</p>
        </div>

    </div>
}

@code {
    // Object Variables
    private DetailedDevice currentDevice = new();
    private SshKey selectedSshKey = new();
    private Modal modalSelect = new();
    private Modal modalAcess = new();
    private Modal modalUpdate = new();
    private Modal modalSsh = new();
    private List<DetailedDevice> originalDevices = new();
    private List<DetailedDevice> devices = new();
    private List<Fleet> fleets = new();
    private static readonly ILog log = LogManager.GetLogger(typeof(Devices));

    // String Variables
    private string? openMenuDeviceId = null;
    private string? currentSortColumn = "DeviceName";
    private string? currentDeviceUuid;
    private string selectedFleetId = string.Empty;
    private int deviceCount;
    public const string Updated = "Updated";
    public const string Error = "Error";
    public const string Pending = "Pending";
    public const string NotSeen = "NotSeen";
    public const string Outdated = "Outdated";
    public const string Scheduled = "Scheduled";

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
            }
        }
    }

    // Boolean Variables
    private bool isLoading = true;
    private bool sortAscending = true;

    private IEnumerable<DetailedDevice> FilteredDevices =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? devices
        : devices.Where(d => d.DeviceName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!await TorizonService.AuthenticateAsync())
            {
                log.Error("Error authenticating to Torizon Service.");
                return;
            }

            using var context = DbContextFactory.CreateDbContext();

            fleets = await context.Fleets
                .Join(context.EntityFleets, f => f.Id, ef => ef.FleetId, (f, ef) => new { f, ef })
                .Join(context.Entities, fe => fe.ef.EntityId, e => e.Id, (fe, e) => new { fe.f, e })
                .Join(context.Users, fe => fe.e.Id, up => up.EntityId, (fe, up) => new { fe.f, up })
                .Where(x => x.up.Id == LoginService.UserId)
                .Select(x => x.f)
                .ToListAsync();

            if (!fleets.Any())
            {
                devices = new List<DetailedDevice>();
                originalDevices = new List<DetailedDevice>();
                isLoading = false;
                log.Warn($"No fleets found for user {LoginService.UserId}.");
                return;
            }

            var fleetDeviceTasks = fleets.Select(async fleet =>
            {
                var url = $"https://app.torizon.io/api/v2beta/fleets/{fleet.Id}/devices";
                var fleetDevices = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();
                return fleetDevices;
            });

            var fleetDevicesLists = await Task.WhenAll(fleetDeviceTasks);

            var allEntityDevices = fleetDevicesLists
                .SelectMany(fd => fd)
                .GroupBy(d => d.DeviceUuid)
                .Select(g => g.First())
                .ToList();

            originalDevices = new List<DetailedDevice>(allEntityDevices);
            devices = new List<DetailedDevice>(originalDevices);

            isLoading = false;

            log.Info($"Loaded {devices.Count} devices for user {LoginService.UserId}.");
            StateHasChanged();

            deviceCount = devices.Count();
        }
        catch (Exception ex)
        {
            log.Error("Error loading devices for user.", ex);
        }
    }

    private async Task ExportToExcel()
    {
        MemoryStream ms = new MemoryStream();
        using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(ms, SpreadsheetDocumentType.Workbook))
        {
            WorkbookPart workbookPart = spreadsheetDocument.AddWorkbookPart();
            workbookPart.Workbook = new Workbook();

            WorksheetPart worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
            var sheetData = new SheetData();
            worksheetPart.Worksheet = new Worksheet(sheetData);

            Row headerRow = new Row();
            String[] headerNames = {"ID", "Nome", "Hibernação", "Notas", "Data de Criação", "Data de Ativação", "Ultima Vez Visto", "Estado", "Estado de Atualização"};
            Cell[] headerCells = new Cell[headerNames.Length];

            for(var i = 0; i<headerNames.Length; i++)
            {
                headerCells[i] = new Cell();
                headerCells[i].DataType = CellValues.String;
                headerCells[i].CellValue = new CellValue(headerNames[i]);
                headerRow.Append(headerCells[i]);
            }
            sheetData.Append(headerRow);

            Row dataRow;
            Cell[] dataCells;

            foreach (var device in FilteredDevices)
            {
                dataRow = new Row();

                dataCells = new Cell[9];

                dataCells[0] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.DeviceId) };

                dataCells[1] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.DeviceName) };

                dataCells[2] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.Hibernated ? "Sim" : "Não") };

                dataCells[3] = new Cell { DataType = CellValues.String, CellValue = new CellValue(string.IsNullOrEmpty(device.Notes) ? "-" : device.Notes) };

                dataCells[4] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.CreatedAt.ToString("dd/MM/yyyy HH:mm")) };

                dataCells[5] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.ActivatedAt?.ToString("dd/MM/yyyy HH:mm") ?? "-") };

                dataCells[6] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.LastSeen?.ToString("dd/MM/yyyy HH:mm") ?? "-") };

                bool isOnline = device.LastSeen.HasValue && (DateTime.UtcNow - device.LastSeen.Value.ToUniversalTime()).TotalMinutes < 5;
                dataCells[7] = new Cell { DataType = CellValues.String, CellValue = new CellValue(isOnline ? "Online" : "Offline") };

                dataCells[8] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.DeviceStatus) };

                foreach (var cell in dataCells)
                    dataRow.Append(cell);

                sheetData.Append(dataRow);
            }

            Sheets sheets = workbookPart.Workbook.AppendChild(new Sheets());

            Sheet sheet = new Sheet() { Id = workbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = "mySheet" };
            sheets.Append(sheet);

            workbookPart.Workbook.Save();
            spreadsheetDocument.Save();

            spreadsheetDocument.Dispose();

            await js.InvokeVoidAsync("downloadFile", "Devices.xlsx", Convert.ToBase64String(ms.ToArray()));
        }
    }

    private async Task NextModalAccess(SshKey key)
    {
        selectedSshKey = key;
        await modalSelect.HideAsync();
        await modalAcess.ShowAsync();
    }

    private async Task NextModalLink()
    {
        await modalAcess.HideAsync();
        await modalSsh.ShowAsync();
    }

    private async Task CloseModal()
    {
        await modalAcess.HideAsync();
        await modalUpdate.HideAsync();
        await modalSsh.HideAsync(); 
    }

    private async Task UpdateDevice()
    {
        await modalUpdate.ShowAsync();
        openMenuDeviceId = null;
    }

    private async Task RemoteAcess()
    {
        await modalSelect.ShowAsync();
        openMenuDeviceId = null;
    }

    private void ToggleMenu(string deviceId)
    {
        if (openMenuDeviceId == deviceId)
        {
            openMenuDeviceId = null;
        }
        else
        {
            openMenuDeviceId = deviceId;
            currentDevice = devices.FirstOrDefault(d => d.DeviceId == deviceId);
            currentDeviceUuid = currentDevice?.DeviceUuid;
        }
    }

    private async Task OnFleetChanged()
    {
        log.Info($"Selected fleet change to: {(string.IsNullOrEmpty(selectedFleetId) ? "all" : selectedFleetId)}");

        try
        {
            if (string.IsNullOrWhiteSpace(selectedFleetId))
            {
                devices = new List<DetailedDevice>(originalDevices);
            }
            else
            {
                var url = $"https://app.torizon.io/api/v2beta/fleets/{selectedFleetId}/devices";
                var fleetDevices = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();
                devices = fleetDevices;
            }

            log.Info($"Devices loaded after fleet change: {devices.Count} devices.");
        }
        catch (Exception ex)
        {
            log.Error("Error loading devices after fleet change.", ex);
        }

        StateHasChanged();
    }

    private void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            sortAscending = true;
        }

        SortDevices();
    }

    private void SortDevices()
    {
        devices = currentSortColumn switch
        {
            "DeviceName" => (sortAscending ? devices.OrderBy(d => d.DeviceName) : devices.OrderByDescending(d => d.DeviceName)).ToList(),
            "Hibernated" => (sortAscending ? devices.OrderBy(d => d.Hibernated) : devices.OrderByDescending(d => d.Hibernated)).ToList(),
            "Notes" => (sortAscending ? devices.OrderBy(d => d.Notes) : devices.OrderByDescending(d => d.Notes)).ToList(),
            "CreatedAt" => (sortAscending ? devices.OrderBy(d => d.CreatedAt) : devices.OrderByDescending(d => d.CreatedAt)).ToList(),
            "ActivatedAt" => (sortAscending ? devices.OrderBy(d => d.ActivatedAt) : devices.OrderByDescending(d => d.ActivatedAt)).ToList(),
            "LastSeen" => (sortAscending ? devices.OrderBy(d => d.LastSeen) : devices.OrderByDescending(d => d.LastSeen)).ToList(),
            _ => devices
        };
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => $@"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>{localizer[Updated]}</span>
                            </div>",
            "error" => $@"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>{localizer[Error]}</span>
                         </div>",
            "updatepending" => $@"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>{localizer[Pending]}</span>
                                 </div>",
            "notseen" => $@"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>{localizer[NotSeen]}</span>
                           </div>",
            "outdated" => $@"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>{localizer[Outdated]}</span>
                            </div>",
            "updatescheduled" => $@"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>{localizer[Scheduled]}</span>
                                   </div>",
            _ => $@"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>{localizer[Scheduled]}</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    private MarkupString CheckOnlineStatus(DetailedDevice device)
    {
        bool isOnline = device.LastSeen.HasValue && (DateTime.UtcNow - device.LastSeen.Value.ToUniversalTime()).TotalMinutes < 5;
        string iconHtml = string.Empty;

        if (isOnline)
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-circle-fill text-success fs-4'></i>
                        <span>Online</span>
                     </div>";
        }
        else
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-x-circle text-danger fs-4'></i>
                        <span>Offline</span>
                     </div>";
        }

        return new MarkupString(iconHtml);
    }

    private void OnOrderChanged(ChangeEventArgs e, string orderByField)
    {
        var selectedStatusOrder = e.Value?.ToString() ?? "uptodate";

        switch (orderByField)
        {
            case "Status":
                devices = selectedStatusOrder switch
                {
                    "uptodate" => originalDevices.Where(d => d.DeviceStatus == "UpToDate").ToList(),
                    "error" => originalDevices.Where(d => d.DeviceStatus == "Error").ToList(),
                    "notseen" => originalDevices.Where(d => d.DeviceStatus == "NotSeen").ToList(),
                    "updatepending" => originalDevices.Where(d => d.DeviceStatus == "UpdatePending").ToList(),
                    "updatescheduled" => originalDevices.Where(d => d.DeviceStatus == "UpdateScheduled").ToList(),
                    "outdated" => originalDevices.Where(d => d.DeviceStatus == "Outdated").ToList(),
                    "all" => originalDevices.ToList(),
                    _ => devices
                };
                break;
        }

        StateHasChanged();
    }
}