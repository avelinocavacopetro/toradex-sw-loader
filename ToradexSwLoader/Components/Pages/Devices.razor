@page "/devices"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject TorizonService TorizonService
@inject DeviceService DeviceService

<PageTitle>Dispositivos</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">Dispositivos</h3>
        </div>

        <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mt-4 gap-3">
            <div class="position-relative w-50">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="Pesquisar dispositivo pelo nome..."
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex flex-grow-1 gap-3">

                <div class="d-flex align-items-center" style="width: 50%;">
                    <label for="fleetSelect" class="fw-bold mb-0" style="min-width: 60px;">Frota</label>
                    <select id="fleetSelect" class="form-select w-100"
                            @bind="selectedFleetId"
                            @bind:after="OnFleetChanged"
                            style="border: 1px solid grey;">
                        <option value="">Selecione uma frota</option>
                        @foreach (var fleet in fleets)
                        {
                            <option value="@fleet.Id">@fleet.Name</option>
                        }
                    </select>
                </div>

                <div class="d-flex align-items-center" style="width: 50%;">
                    <label for="statusOrder" class="fw-bold mb-0" style="min-width: 60px;">Estado</label>
                    <select id="statusOrder" class="form-select w-100"
                            @onchange='e => OnOrderChanged(e, "Status")'>
                        <option value="all">Tudo</option>
                        <option value="uptodate">Atualizado</option>
                        <option value="error">Erro</option>
                        <option value="notseen">Não Visto</option>
                        <option value="updatepending">Pendente</option>
                        <option value="updatescheduled">Agendado</option>
                        <option value="outdated">Desatualizado</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-custom mt-3" style="min-width: 2200px;">
                <thead>
                    <tr>
                        <th style="width: 250px; text-align: left; padding-left: 20px; border-top-left-radius: 5px;
                                   border-right: 1px solid white;">ID</th>
                        <th @onclick="@(() => SortByColumn("DeviceName"))"
                            style="width: 250px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            Nome
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "DeviceName" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "DeviceName" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("Hibernated"))"
                            style="width: 150px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            Hibernação
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "Hibernated" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "Hibernated" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("Notes"))"
                            style="width: 170px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            Notas
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "Notes" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "Notes" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("CreatedAt"))"
                            style="width: 150px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            Data de Criação
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "CreatedAt" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "CreatedAt" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("ActivatedAt"))"
                            style="width: 150px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            Data de Ativação
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "ActivatedAt" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "ActivatedAt" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th @onclick="@(() => SortByColumn("LastSeen"))"
                            style="width: 150px; text-align: center; border-right: 1px solid white; cursor: pointer;">
                            Última Vez Visto
                            <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "LastSeen" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "LastSeen" ? (sortAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th style="width: 150px; text-align: center; border-right: 1px solid white;">Estado</th>
                        <th style="width: 180px; text-align: center; border-top-right-radius: 5px;">Estado de atualização</th>
                    </tr>

                </thead>
                <tbody style="max-height: 350px;">
                    @if (FilteredDevices is null || !FilteredDevices.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                                Sem dados disponíveis
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var device in FilteredDevices)
                        {
                            <tr>
                                <td style="position: relative; width: 250px; word-break: break-word; white-space: normal; vertical-align: middle;">
                                    <i @onclick="() => ToggleMenu(device.DeviceId)" class="bi bi-three-dots-vertical px-3" style="font-size: 1.2rem; cursor: pointer;"></i>
                                    @device.DeviceId

                                    @if (openMenuDeviceId == device.DeviceId)
                                    {
                                        <div class="actions-dropdown">
                                            <button @onclick="UpdateDevice" class="dropdown-item">
                                                <i class="bi bi-arrow-clockwise"></i> Atualizar
                                            </button>
                                            <button @onclick="RemoteAcess" class="dropdown-item">
                                                <i class="bi bi-broadcast"></i> Acesso remoto
                                            </button>
                                        </div>
                                    }
                                </td>

                                <td title="@device.DeviceName" style="width: 250px; word-break: break-word; white-space: normal; vertical-align: middle;">
                                    @device.DeviceName
                                </td>

                                <td style="width: 150px; text-align: center; vertical-align: middle;">@(device.Hibernated ? "Sim" : "Não")</td>
                                <td style="width: 170px; text-align: center; word-break: break-word; white-space: normal; vertical-align: middle;">
                                    @(string.IsNullOrEmpty(device.Notes) ? "-" : device.Notes)
                                </td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">@device.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">@(device.LastSeen?.ToString("dd/MM/yyyy HH:mm") ?? "-")</td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">
                                    @(device.LastSeen?.ToString("dd/MM/yyyy HH:mm") ?? "-")
                                </td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">
                                    @CheckOnlineStatus(device)
                                </td>
                                <td style="width: 170px; text-align: center;">
                                    @GetStatusIcon(device.DeviceStatus!)
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <Modal @ref="modalUpdate" Title="Atualizar dispositivo" IsVerticallyCentered="true">
                <BodyTemplate>
                    <div style="width: 450px;">
                        <span> TESTE ATUALIZAR DISPOSITIVO </span>
                    </div>
                </BodyTemplate>
            </Modal>

            <Modal @ref="modalAcess" Title="Acesso Remoto" IsVerticallyCentered="true">
                <BodyTemplate>
                    <div style="width: 450px;">
                        <span> TESTE ACESSO REMOTO </span>
                    </div>
                </BodyTemplate>
            </Modal>

        </div>
    </div>
}

@code {
    private List<DetailedDevice> originalDevices = new List<DetailedDevice>();
    private List<DetailedDevice> devices = new List<DetailedDevice>();
    private List<DetailedDevice> paginatedDevices = new List<DetailedDevice>();
    private WindowDimension? dimension;
    private Modal modalUpdate;
    private Modal modalAcess;
    private int actualPage = 1;
    private int devicesPerPage = 4;
    private int TotalPages => (int)Math.Ceiling((double)FilteredDevices.Count() / devicesPerPage);
    private string? openMenuDeviceId = null;
    private bool isOnline = false;
    private List<Fleet> fleets = new List<Fleet>();

    private string currentSortColumn = "DeviceName";

    private bool isLoading = true;
    private bool sortAscending = true;

    private string selectedFleetId = string.Empty;

    private IEnumerable<DetailedDevice> FilteredDevices =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? devices
        : devices.Where(d => d.DeviceName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var devicesUrl = "https://app.torizon.io/api/v2beta/devices?limit=200&offset=0";
        var fleetDevicesUrl = $"https://app.torizon.io/api/v2beta/fleets/{selectedFleetId}/devices";

        bool authOk = await TorizonService.AuthenticateAsync();
        if (authOk)
        {
            var apiDevices = await TorizonService.GetItemsAsync<DetailedDevice>(devicesUrl) ?? new List<DetailedDevice>();

            originalDevices = new List<DetailedDevice>(apiDevices);
            devices = new List<DetailedDevice>(originalDevices);

            using var context = DbContextFactory.CreateDbContext();
            fleets = await context.Fleets.ToListAsync();

            isLoading = false;
        }

        StateHasChanged();
    }

    private async Task OnFleetChanged()
    {
        if (string.IsNullOrWhiteSpace(selectedFleetId))
        {
            var allDevices = await TorizonService.GetItemsAsync<DetailedDevice>("https://app.torizon.io/api/v2beta/devices?limit=200&offset=0");
            devices = allDevices?.ToList() ?? new();
        }
        else
        {
            var url = $"https://app.torizon.io/api/v2beta/fleets/{selectedFleetId}/devices";
            var fleetDevices = await TorizonService.GetItemsAsync<DetailedDevice>(url);
            devices = fleetDevices?.ToList() ?? new();
        }

        StateHasChanged();
    void ToggleMenu(string deviceId)
    {
        if (openMenuDeviceId == deviceId)
            openMenuDeviceId = null;
        else
            openMenuDeviceId = deviceId;
    }


    private async Task UpdateDevice()
    {
        await modalUpdate?.ShowAsync();
        openMenuDeviceId = null;
    }

    private async Task RemoteAcess()
    {
        await modalAcess?.ShowAsync();
        openMenuDeviceId = null;
    }

    private void UpdatePage()
    {
        paginatedDevices = devices.Skip((actualPage - 1) * devicesPerPage)
                                 .Take(devicesPerPage)
                                 .ToList();
    }

    private void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            sortAscending = true;
        }

        SortDevices();
    }

    private void SortDevices()
    {
        devices = currentSortColumn switch
        {
            "DeviceName" => (sortAscending ? devices.OrderBy(d => d.DeviceName) : devices.OrderByDescending(d => d.DeviceName)).ToList(),
            "Hibernated" => (sortAscending ? devices.OrderBy(d => d.Hibernated) : devices.OrderByDescending(d => d.Hibernated)).ToList(),
            "Notes" => (sortAscending ? devices.OrderBy(d => d.Notes) : devices.OrderByDescending(d => d.Notes)).ToList(),
            "CreatedAt" => (sortAscending ? devices.OrderBy(d => d.CreatedAt) : devices.OrderByDescending(d => d.CreatedAt)).ToList(),
            "ActivatedAt" => (sortAscending ? devices.OrderBy(d => d.ActivatedAt) : devices.OrderByDescending(d => d.ActivatedAt)).ToList(),
            "LastSeen" => (sortAscending ? devices.OrderBy(d => d.LastSeen) : devices.OrderByDescending(d => d.LastSeen)).ToList(),
            _ => devices
        };
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => @"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>Atualizado</span>
                            </div>",
            "error" => @"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>Erro</span>
                         </div>",
            "updatepending" => @"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>Pendente</span>
                                 </div>",
            "notseen" => @"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>Não Visto</span>
                           </div>",
            "outdated" => @"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>Desatualizado</span>
                            </div>",
            "updatescheduled" => @"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>Agendado</span>
                                   </div>",
            _ => @"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>Scheduled</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    private MarkupString CheckOnlineStatus(DetailedDevice device)
    {
        bool isOnline = device.LastSeen.HasValue && (DateTime.UtcNow - device.LastSeen.Value.ToUniversalTime()).TotalMinutes < 5;
        string iconHtml = string.Empty;

        if (isOnline)
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-circle-fill text-success fs-4'></i>
                        <span>Online</span>
                     </div>";
        } else
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-x-circle text-danger fs-4'></i>
                        <span>Offline</span>
                     </div>";
        }

        return new MarkupString(iconHtml);
    }

    private void OnOrderChanged(ChangeEventArgs e, string orderByField)
    {
        var selectedStatusOrder = e.Value?.ToString() ?? "uptodate";

        switch (orderByField)
        {
            case "Status":
                devices = selectedStatusOrder switch
                {
                    "uptodate" => originalDevices.Where(d => d.DeviceStatus == "UpToDate").ToList(),
                    "error" => originalDevices.Where(d => d.DeviceStatus == "Error").ToList(),
                    "notseen" => originalDevices.Where(d => d.DeviceStatus == "NotSeen").ToList(),
                    "updatepending" => originalDevices.Where(d => d.DeviceStatus == "UpdatePending").ToList(),
                    "updatescheduled" => originalDevices.Where(d => d.DeviceStatus == "UpdateScheduled").ToList(),
                    "outdated" => originalDevices.Where(d => d.DeviceStatus == "Outdated").ToList(),
                    "all" => originalDevices.ToList(),
                    _ => devices
                };
                break;
        }

        StateHasChanged();
    }
}