@page "/devices"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime js
@inject IStringLocalizer<Resource> localizer
@inject TorizonService TorizonService
@inject DeviceService DeviceService
@inject LoginService LoginService
@inject FilterService FilterService

<PageTitle>@localizer["Devices"]</PageTitle>

<HeadContent>
    <script type="text/javascript" src="~/js/site.js"></script>
</HeadContent>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">@localizer["Devices"]</h3>
        </div>

        <div class="devices-filters">
            <div class="position-relative" style="width: 40%;">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder=@localizer["SearchDevice"]
                       style="border: 1px solid grey;"
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="device-filters-inputs">

                <div class="d-flex align-items-center" style="width: 100%; gap: 10px;">
                    <label for="fleetSelect" class="fw-bold mb-0">@localizer["Fleet"]</label>
                    <select id="fleetSelect" class="form-select w-75"
                            @bind="selectedFleetId"
                            @bind:after="OnFleetChanged"
                            style="border: 1px solid grey;">
                        <option value="">@localizer["All"]</option>
                        @foreach (var fleet in fleets)
                        {
                            <option value="@fleet.Id">@fleet.Name</option>
                        }
                    </select>
                </div>

                <div class="d-flex align-items-center" style="width: 100%; gap: 10px;">
                    <label for="statusOrder" class="fw-bold mb-0" style="white-space: nowrap;">@localizer["StateUpdate"]</label>
                    <select id="statusOrder" class="form-select w-50" style="border: 1px solid grey"
                            @onchange='e => OnOrderChanged(e, "Status")'>
                        <option value="all">@localizer["All"]</option>
                        <option value="uptodate">@localizer["UpToDate"]</option>
                        <option value="error">@localizer["Error"]</option>
                        <option value="notseen">@localizer["NotSeen"]</option>
                        <option value="updatepending">@localizer["Pending"]</option>
                        <option value="updatescheduled">@localizer["Scheduled"]</option>
                        <option value="outdated">@localizer["Outdated"]</option>
                    </select>
                </div>

                <div class="d-flex align-items-center px-2 ms-auto">
                    <button class="btn btn-color d-flex align-items-center" @onclick="ExportToExcel">
                        <i class="bi bi-download me-2"></i>
                        @localizer["Export"]
                    </button>
                </div>

            </div>
        </div>

        <div class="card-body pb-2 px-0 mt-2">
            <div class="table-responsive border rounded-2">
                <QuickGrid Class="table table-striped m-0"
                           Items="@FilteredDevices.AsQueryable()"
                           ItemKey="@(d => d.DeviceUuid)">

                    <TemplateColumn>
                        <HeaderTemplate>
                            <div style="width: 50px;"></div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div style="width: 50px; height: 50px; position: relative;">
                                <i @onclick="() => ToggleMenu(context.DeviceId)" 
                                    class="bi bi-three-dots-vertical px-3" 
                                    style="font-size: 1rem; cursor: pointer; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"></i>
                                @if (openMenuDeviceId == context.DeviceId)
                                {
                                    <div class="actions-dropdown">
                                        <button @onclick="UpdateDevice" class="dropdown-item">
                                            <i class="bi bi-arrow-clockwise"></i> @localizer["Update"]
                                        </button>
                                        <button @onclick="RemoteAcess" class="dropdown-item">
                                            <i class="bi bi-broadcast"></i> @localizer["RemoteAcess"]
                                        </button>
                                    </div>
                                }
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna dos IDs dos dispositivos --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                ID
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @context.DeviceId
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna dos nomes dos dispositivos --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left" style="cursor: pointer;" @onclick="@(() => SortByColumn("DeviceName"))">
                                @localizer["Name"]
                                <span style="font-size: 1rem; margin-left: 5px; color: @(currentSortColumn == "DeviceName" ? "white" : "rgba(255,255,255,0.5)")">
                                    @(currentSortColumn == "DeviceName" ? (sortAscending ? "▲" : "▼") : "▲")
                                </span>
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @context.DeviceName
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da hibernação dos dispositivos --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center" style="cursor: pointer;" @onclick="@(() => SortByColumn("Hibernated"))">
                                @localizer["Hibernation"]
                                <span style="font-size: 1rem; margin-left: 5px; color: @(currentSortColumn == "Hibernated" ? "white" : "rgba(255,255,255,0.5)")">
                                    @(currentSortColumn == "Hibernated" ? (sortAscending ? "▲" : "▼") : "▲")
                                </span>
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-center">
                                @(context.Hibernated ? "Sim" : "Não")
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna das notas dos dispositivos --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left" style="cursor: pointer;" @onclick="@(() => SortByColumn("Notes"))">
                                @localizer["Notes"]
                                <span style="font-size: 1rem; margin-left: 5px; color: @(currentSortColumn == "Notes" ? "white" : "rgba(255,255,255,0.5)")">
                                    @(currentSortColumn == "Notes" ? (sortAscending ? "▲" : "▼") : "▲")
                                </span>
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            @if (string.IsNullOrEmpty(context.Notes))
                            {
                                <div class="body-table-center">
                                    <span style="font-size: 1rem;">
                                        -
                                    </span>
                                </div>
                            }
                            else
                            {
                                <div class="body-table-left">
                                    <span style="font-size: 1rem;">
                                        @context.Notes
                                    </span>
                                </div>
                            }
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da data de criação dos dispositivos --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center" style="cursor: pointer;" @onclick="@(() => SortByColumn("CreatedAt"))">
                                @localizer["CreatedAt"]
                                <span style="font-size: 1rem; margin-left: 5px; color: @(currentSortColumn == "CreatedAt" ? "white" : "rgba(255,255,255,0.5)")">
                                    @(currentSortColumn == "CreatedAt" ? (sortAscending ? "▲" : "▼") : "▲")
                                </span>
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-center">
                                @context.CreatedAt
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da data de ativação dos dispositivos --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center" style="cursor: pointer;" @onclick="@(() => SortByColumn("ActivatedAt"))">
                                @localizer["ActivatedAt"]
                                <span style="font-size: 1rem; margin-left: 5px; color: @(currentSortColumn == "ActivatedAt" ? "white" : "rgba(255,255,255,0.5)")">
                                    @(currentSortColumn == "ActivatedAt" ? (sortAscending ? "▲" : "▼") : "▲")
                                </span>
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-center">
                                @context.ActivatedAt
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da data que foi visto pela última vez visto --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center" style="cursor: pointer;" @onclick ="@(() => SortByColumn("LastSeen"))">
                                @localizer["LastSeen"]
                                <span style="font-size: 0.9rem; margin-left: 5px; color: @(currentSortColumn == "LastSeen" ? "white" : "rgba(255,255,255,0.5)")">
                                    @(currentSortColumn == "LastSeen" ? (sortAscending ? "▲" : "▼") : "▲")
                                </span>
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-center">
                                @context.LastSeen
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado (Online ou Offline) --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["State"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div style="width: 100%; text-align: center; vertical-align: middle; padding-top: 0.5rem;">
                                @CheckOnlineStatus(context)
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado do dispositivo --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["StateUpdate"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div style="width: 100%; text-align: center; vertical-align: middle; padding-top: 0.5rem;">
                                @GetStatusIcon(context.DeviceStatus!)
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>

                @if (!FilteredDevices.Any())
                {
                    <table class="table table-striped m-0">
                        <tbody>
                            <tr>
                                <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                    @localizer["NoData"]
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }

                <Modal @ref="modalSelect" Title="@localizer["SelectUser"]" IsVerticallyCentered="true" Size="ModalSize.Large">
                    <BodyTemplate>
                        <SelectUserModel DeviceUuid="@currentDeviceUuid" OnNextModal="NextModalAccess" />
                    </BodyTemplate>
                </Modal>

                <Modal @ref="modalAcess" Title="@localizer["CreateAccess"]" IsVerticallyCentered="true" Size="ModalSize.Large">
                    <BodyTemplate>
                        <RemoteAcess DeviceUuid="@currentDeviceUuid" SelectedKey="selectedSshKey" OnNextModal="NextModalLink" />
                    </BodyTemplate>
                </Modal>

                <Modal @ref="modalSsh" Title="@localizer["VisualizeSSH"]" IsVerticallyCentered="true" Size="ModalSize.Large">
                    <BodyTemplate>
                        <SshLinkModal DeviceUuid="@currentDeviceUuid" OnCloseModal="CloseModal" />
                    </BodyTemplate>
                </Modal>

                <Modal @ref="modalUpdate" Title="@localizer["SelectPackages"]" IsVerticallyCentered="true" Size="ModalSize.Large">
                    <BodyTemplate>
                        <UpdateImageModal DeviceUuid="@currentDeviceUuid" OnCloseModal="CloseModal" />
                    </BodyTemplate>
                </Modal>
            </div>

            <div class="d-flex justify-content-end mt-3 px-3">
                <p>@FilteredDevices.Count() @localizer["Device"]&#40s&#41</p>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Object
    DetailedDevice currentDevice = new();
    SshKey selectedSshKey = new();
    Modal modalSelect = new();
    Modal modalAcess = new();
    Modal modalUpdate = new();
    Modal modalSsh = new();
    List<DetailedDevice> originalDevices = new();
    List<DetailedDevice> devices = new();
    List<Fleet> fleets = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(Devices));

    IEnumerable<DetailedDevice> FilteredDevices =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? devices
            : devices.Where(d => d.DeviceName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    // Variáveis: String
    public const string Updated = "Updated";
    public const string Error = "Error";
    public const string Pending = "Pending";
    public const string NotSeen = "NotSeen";
    public const string Outdated = "Outdated";
    public const string Scheduled = "Scheduled";
    string? openMenuDeviceId = null;
    string? currentSortColumn = "DeviceName";
    string? currentDeviceUuid;
    string selectedFleetId = string.Empty;

    string _searchTerm = string.Empty;
    string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
            }
        }
    }

    // Variáveis: Boolean
    bool isLoading = true;
    bool sortAscending = true;

    // Variáveis: Integer
    const int AdminRoleId = 1;
    int deviceCount;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!await TorizonService.AuthenticateAsync())
            {
                _log.Error("Error authenticating to Torizon Service.");
                return;
            }

            using var context = DbContextFactory.CreateDbContext();

            var user = await context.Users.FirstOrDefaultAsync(u => u.Id == LoginService.UserId);

            if (user?.UserRoleId != AdminRoleId)
            {
                fleets = await context.Fleets
                            .Join(context.EntityFleets, f => f.Id, ef => ef.FleetId, (f, ef) => new { f, ef })
                            .Join(context.Entities, fe => fe.ef.EntityId, e => e.Id, (fe, e) => new { fe.f, e })
                            .Join(context.Users, fe => fe.e.Id, up => up.EntityId, (fe, up) => new { fe.f, up })
                            .Where(x => x.up.Id == LoginService.UserId)
                            .Select(x => x.f)
                            .ToListAsync();

                if (!fleets.Any())
                {
                    devices = new List<DetailedDevice>();
                    originalDevices = new List<DetailedDevice>();
                    isLoading = false;
                    _log.Warn($"No fleets found for user {LoginService.UserId}.");
                    return;
                }

                var fleetDeviceTasks = fleets.Select(async fleet =>
                {
                    var url = $"https://app.torizon.io/api/v2beta/fleets/{fleet.Id}/devices";
                    var fleetDevices = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();
                    return fleetDevices;
                });

                var fleetDevicesLists = await Task.WhenAll(fleetDeviceTasks);

                var allEntityDevices = fleetDevicesLists
                    .SelectMany(fd => fd)
                    .GroupBy(d => d.DeviceUuid)
                    .Select(g => g.First())
                    .ToList();

                originalDevices = new List<DetailedDevice>(allEntityDevices);
                devices = new List<DetailedDevice>(originalDevices);
            } 
            else
            {
                fleets = await context.Fleets.ToListAsync();

                var url = "https://app.torizon.io/api/v2beta/devices?limit=200";

                originalDevices = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();
                devices = new List<DetailedDevice>(originalDevices);
            }

            isLoading = false;
            
            _log.Info($"Loaded {devices.Count} devices for user {LoginService.UserId}.");
            StateHasChanged();

            deviceCount = devices.Count();
        }
        catch (Exception ex)
        {
            _log.Error("Error loading devices for user.", ex);
        }
    }

    async Task ExportToExcel()
    {
        MemoryStream ms = new MemoryStream();
        using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(ms, SpreadsheetDocumentType.Workbook))
        {
            WorkbookPart workbookPart = spreadsheetDocument.AddWorkbookPart();
            workbookPart.Workbook = new Workbook();

            WorksheetPart worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
            var sheetData = new SheetData();
            worksheetPart.Worksheet = new Worksheet(sheetData);

            Row headerRow = new Row();
            String[] headerNames = {"ID", "Nome", "Hibernação", "Notas", "Data de Criação", "Data de Ativação", "Ultima Vez Visto", "Estado", "Estado de Atualização"};
            Cell[] headerCells = new Cell[headerNames.Length];

            for(var i = 0; i<headerNames.Length; i++)
            {
                headerCells[i] = new Cell();
                headerCells[i].DataType = CellValues.String;
                headerCells[i].CellValue = new CellValue(headerNames[i]);
                headerRow.Append(headerCells[i]);
            }
            sheetData.Append(headerRow);

            Row dataRow;
            Cell[] dataCells;

            foreach (var device in FilteredDevices)
            {
                dataRow = new Row();

                dataCells = new Cell[9];

                dataCells[0] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.DeviceId) };

                dataCells[1] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.DeviceName) };

                dataCells[2] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.Hibernated ? "Sim" : "Não") };

                dataCells[3] = new Cell { DataType = CellValues.String, CellValue = new CellValue(string.IsNullOrEmpty(device.Notes) ? "-" : device.Notes) };

                dataCells[4] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.CreatedAt.ToString("dd/MM/yyyy HH:mm")) };

                dataCells[5] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.ActivatedAt?.ToString("dd/MM/yyyy HH:mm") ?? "-") };

                dataCells[6] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.LastSeen?.ToString("dd/MM/yyyy HH:mm") ?? "-") };

                bool isOnline = device.LastSeen.HasValue && (DateTime.UtcNow - device.LastSeen.Value.ToUniversalTime()).TotalMinutes < FilterService.OnlineTime;

                dataCells[7] = new Cell { DataType = CellValues.String, CellValue = new CellValue(isOnline ? "Online" : "Offline") };

                dataCells[8] = new Cell { DataType = CellValues.String, CellValue = new CellValue(device.DeviceStatus) };

                foreach (var cell in dataCells)
                    dataRow.Append(cell);

                sheetData.Append(dataRow);
            }

            Sheets sheets = workbookPart.Workbook.AppendChild(new Sheets());

            Sheet sheet = new Sheet() { Id = workbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = "mySheet" };
            sheets.Append(sheet);

            workbookPart.Workbook.Save();
            spreadsheetDocument.Save();

            spreadsheetDocument.Dispose();

            await js.InvokeVoidAsync("downloadFile", "Devices.xlsx", Convert.ToBase64String(ms.ToArray()));
        }
    }

    async Task NextModalAccess(SshKey key)
    {
        selectedSshKey = key;
        await modalSelect.HideAsync();
        await modalAcess.ShowAsync();
    }

    async Task NextModalLink()
    {
        await modalAcess.HideAsync();
        await modalSsh.ShowAsync();
    }

    async Task CloseModal()
    {
        await modalAcess.HideAsync();
        await modalUpdate.HideAsync();
        await modalSsh.HideAsync(); 
    }

    async Task UpdateDevice()
    {
        await modalUpdate.ShowAsync();
        openMenuDeviceId = null;
    }

    async Task RemoteAcess()
    {
        await modalSelect.ShowAsync();
        openMenuDeviceId = null;
    }

    void ToggleMenu(string deviceId)
    {
        if (openMenuDeviceId == deviceId)
        {
            openMenuDeviceId = null;
        }
        else
        {
            openMenuDeviceId = deviceId;
            currentDevice = devices.FirstOrDefault(d => d.DeviceId == deviceId)!;
            currentDeviceUuid = currentDevice?.DeviceUuid;
        }
    }

    async Task OnFleetChanged()
    {
        _log.Info($"Selected fleet change to: {(string.IsNullOrEmpty(selectedFleetId) ? "all" : selectedFleetId)}");

        try
        {
            if (string.IsNullOrWhiteSpace(selectedFleetId))
            {
                devices = new List<DetailedDevice>(originalDevices);
            }
            else
            {
                var url = $"https://app.torizon.io/api/v2beta/fleets/{selectedFleetId}/devices";
                var fleetDevices = await TorizonService.GetItemsAsync<DetailedDevice>(url) ?? new List<DetailedDevice>();
                devices = fleetDevices;
            }

            _log.Info($"Devices loaded after fleet change: {devices.Count} devices.");
        }
        catch (Exception ex)
        {
            _log.Error("Error loading devices after fleet change.", ex);
        }

        StateHasChanged();
    }

    void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            sortAscending = true;
        }

        SortDevices();
    }

    void SortDevices()
    {
        devices = currentSortColumn switch
        {
            "DeviceName" => (sortAscending ? devices.OrderBy(d => d.DeviceName) : devices.OrderByDescending(d => d.DeviceName)).ToList(),
            "Hibernated" => (sortAscending ? devices.OrderBy(d => d.Hibernated) : devices.OrderByDescending(d => d.Hibernated)).ToList(),
            "Notes" => (sortAscending ? devices.OrderBy(d => d.Notes) : devices.OrderByDescending(d => d.Notes)).ToList(),
            "CreatedAt" => (sortAscending ? devices.OrderBy(d => d.CreatedAt) : devices.OrderByDescending(d => d.CreatedAt)).ToList(),
            "ActivatedAt" => (sortAscending ? devices.OrderBy(d => d.ActivatedAt) : devices.OrderByDescending(d => d.ActivatedAt)).ToList(),
            "LastSeen" => (sortAscending ? devices.OrderBy(d => d.LastSeen) : devices.OrderByDescending(d => d.LastSeen)).ToList(),
            _ => devices
        };
    }

    MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => $@"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>{localizer[Updated]}</span>
                            </div>",
            "error" => $@"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>{localizer[Error]}</span>
                         </div>",
            "updatepending" => $@"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>{localizer[Pending]}</span>
                                 </div>",
            "notseen" => $@"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>{localizer[NotSeen]}</span>
                           </div>",
            "outdated" => $@"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>{localizer[Outdated]}</span>
                            </div>",
            "updatescheduled" => $@"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>{localizer[Scheduled]}</span>
                                   </div>",
            _ => $@"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>{localizer[Scheduled]}</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    MarkupString CheckOnlineStatus(DetailedDevice device)
    {
        bool isOnline = device.LastSeen.HasValue && (DateTime.UtcNow - device.LastSeen.Value.ToUniversalTime()).TotalMinutes < FilterService.OnlineTime;
        string iconHtml = string.Empty;

        if (isOnline)
        {
            iconHtml = @"<div class='state' style='padding-right: 0.5rem;'>
                        <i class='bi bi-circle-fill text-success fs-4'></i>
                        <span>Online</span>
                     </div>";
        }
        else
        {
            iconHtml = @"<div class='state' style='padding-right: 0.5rem;'>
                        <i class='bi bi-x-circle text-danger fs-4'></i>
                        <span>Offline</span>
                     </div>";
        }

        return new MarkupString(iconHtml);
    }

    void OnOrderChanged(ChangeEventArgs e, string orderByField)
    {
        var selectedStatusOrder = e.Value?.ToString() ?? "uptodate";

        switch (orderByField)
        {
            case "Status":
                devices = selectedStatusOrder switch
                {
                    "uptodate" => originalDevices.Where(d => d.DeviceStatus == "UpToDate").ToList(),
                    "error" => originalDevices.Where(d => d.DeviceStatus == "Error").ToList(),
                    "notseen" => originalDevices.Where(d => d.DeviceStatus == "NotSeen").ToList(),
                    "updatepending" => originalDevices.Where(d => d.DeviceStatus == "UpdatePending").ToList(),
                    "updatescheduled" => originalDevices.Where(d => d.DeviceStatus == "UpdateScheduled").ToList(),
                    "outdated" => originalDevices.Where(d => d.DeviceStatus == "Outdated").ToList(),
                    "all" => originalDevices.ToList(),
                    _ => devices
                };
                break;
        }

        StateHasChanged();
    }
}