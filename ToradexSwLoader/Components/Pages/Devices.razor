@page "/devices"

@rendermode InteractiveServer
@inject AppDbContext DbContext
@inject TorizonService TorizonService
@inject DeviceService DeviceService

<PageTitle>Dispositivos</PageTitle>

<WindowDimensions OnChange="OnDimensionsChanged" />

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <a href="/home" class="text-black">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

    <br />
    <br />

    <div class="w-50">
        <input type="text" class="form-control" placeholder="Pesquisar dispositivo pelo nome..."
               @bind="searchTerm" @bind:event="oninput" />
    </div>

    <br />

    @* <div class="mt-4">
        <span style="font-size: 20px; font-weight: bold;">Filtrar por:</span>
    </div> *@

    <div class="d-flex justify-content-between align-items-center mt-2">
        <div class="d-flex gap-4">

            <div class="d-flex flex-column">
                <label for="nameOrder" style="font-size: 18px; font-weight: bold;">Nome</label>
                <select id="nameOrder" class="form-select" @onchange='e => OnOrderChanged(e, "DeviceName")'>
                    <option value="relevance">Relevância</option>
                    <option value="ascendent">Ascendente</option>
                    <option value="descendent">Descendente</option>
                </select>
            </div>

            <div class="d-flex flex-column">
                <label for="hibernationOrder" style="font-size: 18px; font-weight: bold;">Hibernação</label>
                <select id="hibernationOrder" class="form-select" @onchange='e => OnOrderChanged(e, "Hibernation")'>
                    <option value="everything">Tudo</option>
                    <option value="yes">Sim</option>
                    <option value="no">Não</option>
                </select>
            </div>

            <div class="d-flex flex-column">
                <label for="hourOrder" style="font-size: 18px; font-weight: bold;">Data de Criação</label>
                <select id="hourOrder" class="form-select" @onchange='e => OnOrderChanged(e, "CreatedAt")'>
                    <option value="relevance">Relevância</option>
                    <option value="ascendent">Ascendente</option>
                    <option value="descendent">Descendente</option>
                </select>
            </div>

            <div class="d-flex flex-column">
                <label for="statusOrder" style="font-size: 18px; font-weight: bold;">Estado</label>
                <select id="statusOrder" class="form-select" @onchange='e => OnOrderChanged(e, "Status")'>
                    <option value="all">Tudo</option>
                    <option value="uptodate">UpToDate</option>
                    <option value="error">Error</option>
                    <option value="notseen">NotSeen</option>
                    <option value="updatepending">UpdatePending</option>
                    <option value="updatescheduled">UpdateSchedule</option>
                    <option value="outdated">Outdated</option>
                </select>
            </div>

        </div>

        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @TotalPages de @TotalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>

    <table class="table custom-table mt-5">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nome</th>
                <th style="text-align: center;">Hibernação</th>
                <th style="text-align: center;">Notas</th>
                <th>Data de Criação</th>
                <th style="text-align: center;">Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in PaginatedDevices)
            {
                <tr>
                    <td title="@device.DeviceId" style="word-break: break-word; white-space: normal; vertical-align: middle;">
                        @device.DeviceId
                    </td>
                    <td title="@device.DeviceName" style="word-break: break-word; white-space: normal; vertical-align: middle;">
                        @device.DeviceName
                    </td>

                    <td style="text-align: center; vertical-align: middle;">@(device.Hibernated ? "Sim" : "Não")</td>
                    <td style="text-align: center; vertical-align: middle;">@(string.IsNullOrEmpty(device.Notes) ? "-" : device.Notes)</td>
                    <td style="vertical-align: middle;">@device.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                    <td style="text-align: center;">
                        @GetStatusIcon(device.DeviceStatus!)
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DetailedDevice> originalDevices = new List<DetailedDevice>();
    private List<DetailedDevice> devices = new List<DetailedDevice>();
    private List<DetailedDevice> paginatedDevices = new List<DetailedDevice>();
    private WindowDimension? dimension;

    private int actualPage = 1;
    private int devicesPerPage = 4;
    private int TotalPages => (int)Math.Ceiling((double)FilteredDevices.Count() / devicesPerPage);

    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    private IEnumerable<DetailedDevice> FilteredDevices =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? devices
        : devices.Where(d => d.DeviceName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<DetailedDevice> PaginatedDevices =>
    FilteredDevices
        .Skip((actualPage - 1) * devicesPerPage)
        .Take(devicesPerPage);

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    private void OnDimensionsChanged(WindowDimension newDimension)
    {
        dimension = newDimension;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var devicesUrl = "https://app.torizon.io/api/v2beta/devices?limit=200&offset=0";

        bool authOk = await TorizonService.AuthenticateAsync();
        if (authOk)
        {
            var apiDevices = await TorizonService.GetItemsAsync<DetailedDevice>(devicesUrl) ?? new List<DetailedDevice>();

            originalDevices = new List<DetailedDevice>(apiDevices);
            devices = new List<DetailedDevice>(originalDevices);

            isLoading = false;
        }

        UpdatePage();
    }

    private void UpdatePage()
    {
        paginatedDevices = devices.Skip((actualPage - 1) * devicesPerPage)
                                 .Take(devicesPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => "<i class='bi bi-check-circle text-success fs-4'></i>",
            "error" => "<i class='bi bi-x-circle text-danger fs-4'></i>",
            "updatepending" => "<i class='bi bi-clock text-warning fs-4'></i>",
            _ => "<i class='bi bi-question-circle text-secondary fs-4'></i>"
        };

        return new MarkupString(iconHtml);
    }

    private void OnOrderChanged(ChangeEventArgs e, string orderByField)
    {
        var selectedOrder = e.Value?.ToString() ?? "relevance";
        var selectedHibernationOrder = e.Value?.ToString() ?? "everything";
        var selectedStatusOrder = e.Value?.ToString() ?? "uptodate";

        switch (orderByField)
        {
            case "CreatedAt":
                devices = selectedOrder switch
                {
                    "ascendent" => originalDevices.OrderBy(d => d.CreatedAt).ToList(),
                    "descendent" => originalDevices.OrderByDescending(d => d.CreatedAt).ToList(),
                    "relevance" => originalDevices.ToList(),
                    _ => devices
                };
                break;

            case "DeviceName":
                devices = selectedOrder switch
                {
                    "ascendent" => originalDevices.OrderBy(d => d.DeviceName).ToList(),
                    "descendent" => originalDevices.OrderByDescending(d => d.DeviceName).ToList(),
                    "relevance" => originalDevices.ToList(),
                    _ => devices
                };
                break;

            case "Hibernation":
                devices = selectedHibernationOrder switch
                {
                    "yes" => originalDevices.Where(d => d.Hibernated).ToList(),
                    "no" => originalDevices.Where(d => !d.Hibernated).ToList(),
                    "everything" => originalDevices.ToList(),
                    _ => devices
                };
                break;

            case "Status":
                devices = selectedHibernationOrder switch
                {
                    "uptodate" => originalDevices.Where(d => d.DeviceStatus == "UpToDate").ToList(),
                    "error" => originalDevices.Where(d => d.DeviceStatus == "Error").ToList(),
                    "notseen" => originalDevices.Where(d => d.DeviceStatus == "NotSeen").ToList(),
                    "updatepending" => originalDevices.Where(d => d.DeviceStatus == "UpdatePending").ToList(),
                    "updateschedule" => originalDevices.Where(d => d.DeviceStatus == "UpdateSchedule").ToList(),
                    "outdated" => originalDevices.Where(d => d.DeviceStatus == "Outdated").ToList(),
                    "all" => originalDevices.ToList(),
                    _ => devices
                };
                break;
        }

        actualPage = 1;
        UpdatePage();
    }
}