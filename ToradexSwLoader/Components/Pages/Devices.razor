@page "/devices"

@rendermode InteractiveServer
@inject AppDbContext DbContext
@inject TorizonService TorizonService
@inject DeviceService DeviceService
@using ToradexSwLoader.Data
@using ToradexSwLoader.Models
@using ToradexSwLoader.Services
@using Microsoft.EntityFrameworkCore

<PageTitle>Dispositivos</PageTitle>

@if (devices == null)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">A carregar...</span>
        </div>
        <p class="mt-3">A carregar...</p>
    </div>

}
else
{
    <a href="" onclick="history.back()" class="text-black">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

    <div class="mt-4">
        <span style="font-size: 20px; font-weight: bold;">Filtrar por:</span>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-2">
        <div class="d-flex gap-4">

            <div class="d-flex flex-column">
                <label for="nameOrder" style="font-size: 18px; font-weight: bold;">Nome</label>
                <select id="nameOrder" class="form-select" @onchange='e => OnOrderChanged(e, "DeviceName")'>
                    <option value="relevance">Relevância</option>
                    <option value="ascendent">Ascendente</option>
                    <option value="descendent">Descendente</option>
                </select>
            </div>

            <div class="d-flex flex-column">
                <label for="hibernationOrder" style="font-size: 18px; font-weight: bold;">Hibernação</label>
                <select id="hibernationOrder" class="form-select" @onchange='e => OnOrderChanged(e, "Hibernation")'>
                    <option value="everything">Tudo</option>
                    <option value="yes">Sim</option>
                    <option value="no">Não</option>
                </select>
            </div>

            <div class="d-flex flex-column">
                <label for="hourOrder" style="font-size: 18px; font-weight: bold;">Data de Criação</label>
                <select id="hourOrder" class="form-select" @onchange='e => OnOrderChanged(e, "CreatedAt")'>
                    <option value="relevance">Relevância</option>
                    <option value="ascendent">Ascendente</option>
                    <option value="descendent">Descendente</option>
                </select>
            </div>

            <div class="d-flex flex-column">
                <label for="statusOrder" style="font-size: 18px; font-weight: bold;">Estado</label>
                <select id="statusOrder" class="form-select" @onchange='e => OnOrderChanged(e, "Status")'>
                    <option value="all">Tudo</option>
                    <option value="uptodate">UpToDate</option>
                    <option value="error">Error</option>
                    <option value="notseen">NotSeen</option>
                    <option value="updatepending">UpdatePending</option>
                    <option value="updatescheduled">UpdateSchedule</option>
                    <option value="outdated">Outdated</option>
                </select>
            </div>

        </div>

        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @totalPages de @totalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>


    <table class="table custom-table mt-5">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nome</th>
                <th style="text-align: center;">Hibernação</th>
                <th style="text-align: center;">Notas</th>
                <th>Data de Criação</th>
                <th style="text-align: center;">Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in paginetdDevices)
            {
                <tr>
                    <td>@device.DeviceId</td>
                    <td>@device.DeviceName</td>
                    <td style="text-align: center;">@(device.Hibernated ? "Sim" : "Não")</td>
                    <td style="text-align: center;">@(string.IsNullOrEmpty(device.Notes) ? "-" : device.Notes)</td>
                    <td>@device.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                    <td style="text-align: center;">
                        <span class="status-box @(GetStatusClass(device.DeviceStatus))">
                            @device.DeviceStatus
                        </span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Device> originalDevices = new List<Device>();
    private List<Device> devices = new List<Device>();
    private List<Device> paginetdDevices = new List<Device>();
    private bool isLoading = true;
    private int actualPage = 1;
    private int devicesPerPage = 5;
    private int totalPages => (int)Math.Ceiling((double)devices.Count / devicesPerPage);

    private string selectedOrder = "relevance";

    protected override async Task OnInitializedAsync()
    {
        var devicesUrl = "https://app.torizon.io/api/v2beta/devices?limit=100&offset=0";

        bool imported = await DeviceService.ImportDevicesFromApiAsync(devicesUrl);

        if (imported)
        {
            originalDevices = await DbContext.Devices.ToListAsync();
            devices = new List<Device>(originalDevices);
        }
        else
        {
            originalDevices = new List<Device>();
        }

        isLoading = false;

        UpdatePage();
    }

    private void UpdatePage()
    {
        paginetdDevices = devices.Skip((actualPage - 1) * devicesPerPage)
                                 .Take(devicesPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (actualPage < totalPages)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (actualPage > 1)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private bool CanGoNext => actualPage < totalPages;
    private bool CanGoPrev => actualPage > 1;

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "uptodate" => "status-uptodate",
            "error" => "status-error",
            "notseen" => "status-notseen",
            "outdated" => "status-outdated",
            "updatepending" => "status-updatepending",
            _ => "status-default"
        };
    }

    private void OnOrderChanged(ChangeEventArgs e, string orderByField)
    {
        var selectedOrder = e.Value?.ToString() ?? "relevance";
        var selectedHibernationOrder = e.Value?.ToString() ?? "everything";
        var selectedStatusOrder = e.Value?.ToString() ?? "uptodate";

        switch (orderByField)
        {
            case "CreatedAt":
                devices = selectedOrder switch
                {
                    "ascendent" => originalDevices.OrderBy(d => d.CreatedAt).ToList(),
                    "descendent" => originalDevices.OrderByDescending(d => d.CreatedAt).ToList(),
                    "relevance" => originalDevices.ToList(),
                    _ => devices
                };
                break;

            case "DeviceName":
                devices = selectedOrder switch
                {
                    "ascendent" => originalDevices.OrderBy(d => d.DeviceName).ToList(),
                    "descendent" => originalDevices.OrderByDescending(d => d.DeviceName).ToList(),
                    "relevance" => originalDevices.ToList(),
                    _ => devices
                };
                break;

            case "Hibernation":
                devices = selectedHibernationOrder switch
                {
                    "yes" => originalDevices.Where(d => d.Hibernated).ToList(),
                    "no" => originalDevices.Where(d => !d.Hibernated).ToList(),
                    "everything" => originalDevices.ToList(),
                    _ => devices
                };
                break;

            case "Status":
                devices = selectedHibernationOrder switch
                {
                    "uptodate" => originalDevices.Where(d => d.DeviceStatus == "UpToDate").ToList(),
                    "error" => originalDevices.Where(d => d.DeviceStatus == "Error").ToList(),
                    "notseen" => originalDevices.Where(d => d.DeviceStatus == "NotSeen").ToList(),
                    "updatepending" => originalDevices.Where(d => d.DeviceStatus == "UpdatePending").ToList(),
                    "updateschedule" => originalDevices.Where(d => d.DeviceStatus == "UpdateSchedule").ToList(),
                    "outdated" => originalDevices.Where(d => d.DeviceStatus == "Outdated").ToList(),
                    "all" => originalDevices.ToList(),
                    _ => devices
                };
                break;
        }

        actualPage = 1;
        UpdatePage();
    }
}