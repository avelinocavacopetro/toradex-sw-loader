@page "/devices"

@rendermode InteractiveServer
@inject AppDbContext DbContext
@inject TorizonService TorizonService
@inject DeviceService DeviceService

<PageTitle>Dispositivos</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">Dispositivos</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-25 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="Pesquisar dispositivo pelo nome..."
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex justify-content-end align-items-center gap-2">
                <div class="d-flex flex-column">
                    <label for="nameOrder" style="font-size: 18px; font-weight: bold;">Nome</label>
                    <select id="nameOrder" class="form-select" @onchange='e => OnOrderChanged(e, "DeviceName")'>
                        <option value="relevance">Relevância</option>
                        <option value="ascendent">Ascendente</option>
                        <option value="descendent">Descendente</option>
                    </select>
                </div>

                <div class="d-flex flex-column">
                    <label for="hibernationOrder" style="font-size: 18px; font-weight: bold;">Hibernação</label>
                    <select id="hibernationOrder" class="form-select" @onchange='e => OnOrderChanged(e, "Hibernation")'>
                        <option value="everything">Tudo</option>
                        <option value="yes">Sim</option>
                        <option value="no">Não</option>
                    </select>
                </div>

                <div class="d-flex flex-column">
                    <label for="hourOrder" style="font-size: 18px; font-weight: bold;">Data de Criação</label>
                    <select id="hourOrder" class="form-select" @onchange='e => OnOrderChanged(e, "CreatedAt")'>
                        <option value="relevance">Relevância</option>
                        <option value="ascendent">Ascendente</option>
                        <option value="descendent">Descendente</option>
                    </select>
                </div>

                <div class="d-flex flex-column">
                    <label for="statusOrder" style="font-size: 18px; font-weight: bold;">Estado</label>
                    <select id="statusOrder" class="form-select" @onchange='e => OnOrderChanged(e, "Status")'>
                        <option value="all">Tudo</option>
                        <option value="uptodate">Atualizado</option>
                        <option value="error">Erro</option>
                        <option value="notseen">Não Visto</option>
                        <option value="updatepending">Pendente</option>
                        <option value="updatescheduled">Agendado</option>
                        <option value="outdated">Desatualizado</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-custom mt-3" style="min-width: 2000px;">
                <thead>
                    <tr>
                        <th style="width: 250px; text-align: left; padding-left: 20px; border-top-left-radius: 5px;
                                   border-right: 1px solid white;">ID</th>
                        <th style="width: 250px; text-align: center; border-right: 1px solid white;">Nome</th>
                        <th style="width: 150px; text-align: center; border-right: 1px solid white;">Hibernação</th>
                        <th style="width: 170px; text-align: center; border-right: 1px solid white;">Notas</th>
                        <th style="width: 150px; text-align: center; border-right: 1px solid white;">Data de Criação</th>
                        <th style="width: 150px; text-align: center; border-right: 1px solid white;">Data de Ativação</th>
                        <th style="width: 150px; text-align: center; border-right: 1px solid white;">Última Vez Visto</th>
                        <th style="width: 150px; text-align: center; border-right: 1px solid white;">Estado</th>
                        <th style="width: 180px; text-align: center; border-top-right-radius: 5px;">Estado de atualização</th>
                    </tr>

                </thead>
                <tbody style="max-height: 350px;">
                    @if (FilteredDevices is null || !FilteredDevices.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                                Sem dados disponíveis
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var device in FilteredDevices)
                        {
                            <tr>
                                <td title="@device.DeviceId" style="width: 250px; word-break: break-word; white-space: normal; vertical-align: middle;">
                                    @device.DeviceId
                                </td>
                                <td title="@device.DeviceName" style="width: 250px; word-break: break-word; white-space: normal; vertical-align: middle;">
                                    @device.DeviceName
                                </td>

                                <td style="width: 150px; text-align: center; vertical-align: middle;">@(device.Hibernated ? "Sim" : "Não")</td>
                                <td style="width: 170px; text-align: center; word-break: break-word; white-space: normal; vertical-align: middle;">
                                    @(string.IsNullOrEmpty(device.Notes) ? "-" : device.Notes)
                                </td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">@device.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">@(device.LastSeen?.ToString("dd/MM/yyyy HH:mm") ?? "-")</td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">
                                    @(device.LastSeen?.ToString("dd/MM/yyyy HH:mm") ?? "-")
                                </td>
                                <td style="width: 150px; text-align: center; vertical-align: middle;">
                                    @CheckOnlineStatus(device)
                                </td>
                                <td style="width: 170px; text-align: center;">
                                    @GetStatusIcon(device.DeviceStatus!)
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<DetailedDevice> originalDevices = new List<DetailedDevice>();
    private List<DetailedDevice> devices = new List<DetailedDevice>();
    private List<DetailedDevice> paginatedDevices = new List<DetailedDevice>();
    private WindowDimension? dimension;

    private int actualPage = 1;
    private int devicesPerPage = 4;
    private int TotalPages => (int)Math.Ceiling((double)FilteredDevices.Count() / devicesPerPage);

    private bool isOnline = false;
    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    private IEnumerable<DetailedDevice> FilteredDevices =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? devices
        : devices.Where(d => d.DeviceName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<DetailedDevice> PaginatedDevices =>
    FilteredDevices
        .Skip((actualPage - 1) * devicesPerPage)
        .Take(devicesPerPage);

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var devicesUrl = "https://app.torizon.io/api/v2beta/devices?limit=200&offset=0";

        bool authOk = await TorizonService.AuthenticateAsync();
        if (authOk)
        {
            var apiDevices = await TorizonService.GetItemsAsync<DetailedDevice>(devicesUrl) ?? new List<DetailedDevice>();

            originalDevices = new List<DetailedDevice>(apiDevices);
            devices = new List<DetailedDevice>(originalDevices);

            Console.WriteLine($"DISPOSITIVOS: {originalDevices.Count}");

            isLoading = false;
        }

        UpdatePage();
    }

    private void UpdatePage()
    {
        paginatedDevices = devices.Skip((actualPage - 1) * devicesPerPage)
                                 .Take(devicesPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => @"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>Atualizado</span>
                            </div>",
            "error" => @"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>Erro</span>
                         </div>",
            "updatepending" => @"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>Pendente</span>
                                 </div>",
            "notseen" => @"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>Não Visto</span>
                           </div>",
            "outdated" => @"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>Desatualizado</span>
                            </div>",
            "updatescheduled" => @"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>Agendado</span>
                                   </div>",
            _ => @"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>Scheduled</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    private MarkupString CheckOnlineStatus(DetailedDevice device)
    {
        bool isOnline = device.LastSeen.HasValue && (DateTime.UtcNow - device.LastSeen.Value.ToUniversalTime()).TotalMinutes < 5;
        string iconHtml = string.Empty;

        if (isOnline)
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-circle-fill text-success fs-4'></i>
                        <span>Online</span>
                     </div>";
        } else
        {
            iconHtml = @"<div class='state'>
                        <i class='bi bi-x-circle text-danger fs-4'></i>
                        <span>Offline</span>
                     </div>";
        }

        return new MarkupString(iconHtml);
    }

    private void OnOrderChanged(ChangeEventArgs e, string orderByField)
    {
        var selectedOrder = e.Value?.ToString() ?? "relevance";
        var selectedHibernationOrder = e.Value?.ToString() ?? "everything";
        var selectedStatusOrder = e.Value?.ToString() ?? "uptodate";

        switch (orderByField)
        {
            case "CreatedAt":
                devices = selectedOrder switch
                {
                    "ascendent" => originalDevices.OrderBy(d => d.CreatedAt).ToList(),
                    "descendent" => originalDevices.OrderByDescending(d => d.CreatedAt).ToList(),
                    "relevance" => originalDevices.ToList(),
                    _ => devices
                };
                break;

            case "DeviceName":
                devices = selectedOrder switch
                {
                    "ascendent" => originalDevices.OrderBy(d => d.DeviceName).ToList(),
                    "descendent" => originalDevices.OrderByDescending(d => d.DeviceName).ToList(),
                    "relevance" => originalDevices.ToList(),
                    _ => devices
                };
                break;

            case "Hibernation":
                devices = selectedHibernationOrder switch
                {
                    "yes" => originalDevices.Where(d => d.Hibernated).ToList(),
                    "no" => originalDevices.Where(d => !d.Hibernated).ToList(),
                    "everything" => originalDevices.ToList(),
                    _ => devices
                };
                break;

            case "Status":
                devices = selectedHibernationOrder switch
                {
                    "uptodate" => originalDevices.Where(d => d.DeviceStatus == "UpToDate").ToList(),
                    "error" => originalDevices.Where(d => d.DeviceStatus == "Error").ToList(),
                    "notseen" => originalDevices.Where(d => d.DeviceStatus == "NotSeen").ToList(),
                    "updatepending" => originalDevices.Where(d => d.DeviceStatus == "UpdatePending").ToList(),
                    "updatescheduled" => originalDevices.Where(d => d.DeviceStatus == "UpdateScheduled").ToList(),
                    "outdated" => originalDevices.Where(d => d.DeviceStatus == "Outdated").ToList(),
                    "all" => originalDevices.ToList(),
                    _ => devices
                };
                break;
        }

        actualPage = 1;
        UpdatePage();
    }
}