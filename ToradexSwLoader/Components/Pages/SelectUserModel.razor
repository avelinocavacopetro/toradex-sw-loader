@using log4net
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject TorizonService TorizonService
@inject LoginService LoginService
@inject FilterService FilterService
@inject SweetAlertService Swal

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>Atualizar pacote</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <table class="table mt-3 w-100">
        <thead style="background-color: #0c6527; color: white;">
            <tr>
                <th style="padding-left: 20px; border-top-left-radius: 5px; border-top-right-radius: 5px;">Nome</th>
            </tr>
        </thead>
        <tbody style="height: 50px;">
            @foreach (var key in paginatedKeys)
            {
                <tr @onclick="@(() => OnClick(key))" style="cursor:pointer;">
                    <td style="padding-left: 20px;">@key.Name</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-end pe-lg-0">
        <div class="d-flex justify-content-between align-items-center gap-3 ms-auto">
            <span>@actualPage - @TotalPages de @TotalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>
}

@code {
    // Parameters
    [Parameter]
    public string? DeviceUuid { get; set; }

    [Parameter] 
    public EventCallback<SshKey> OnNextModal { get; set; }

    // Object Variables
    private DetailedDevice? selectedDevice = new();
    private List<SshKey> sshKeys = new();
    private List<SshKey> paginatedKeys = new();
    private SshKey? selectedKey;
    private static readonly ILog log = LogManager.GetLogger(typeof(SelectUserModel));

    // Integer Variables
    private int actualPage = 1;
    private int keysPerPage = 5;
    private int TotalPages => (int)Math.Ceiling((double)sshKeys.Count / keysPerPage);

    // Boolean Variables
    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            if (!await TorizonService.AuthenticateAsync())
            {
                log.Error("Error authenticating to Torizon Service.");
                return;
            }

            var keyUrl = $"https://app.torizon.io/api/v2beta/remote-access/user/public-keys";
            sshKeys = await TorizonService.GetFlatSshKeysAsync(keyUrl);

            UpdatePage();

            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            log.Error("Error authenticating to Torizon Service or loading ssh keys.", ex);
        }
    }

    private async Task OnClick(SshKey key)
    {
        using var context = DbContextFactory.CreateDbContext();

        selectedKey = key;

        if (selectedKey != null)
        {
            log.Info($"User {LoginService.UserId} started selecting user '{selectedKey.Name}' for device '{selectedDevice?.DeviceName}'.");

            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Deseja continuar?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Continuar",
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = "Cancelar"
            });

            if (result.IsConfirmed)
            {
                log.Info($"User {LoginService.UserId} confirmed selection of user '{selectedKey.Name}' for device '{selectedDevice?.DeviceName}'.");

                var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selected user: Name: {selectedKey.Name} for device {selectedDevice?.DeviceName}",
                    ActType = "Maintenance",
                    ActTimeStamp = DateTime.Now
                };

                context.UserActivities.Add(userAct);
                await context.SaveChangesAsync();

                log.Info($"User activity successfully saved for user {LoginService.UserId}.");

                await OnNextModal.InvokeAsync(key);
            }
            else
            {
                log.Info($"User {LoginService.UserId} canceled the selection of user '{selectedKey.Name}'.");
            }
        }
        else
        {
            log.Warn($"User {LoginService.UserId} attempted to proceed without selecting a valid user.");

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Selecione um utilizador!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120",
            });
        }
    }

    private void UpdatePage()
    {
        paginatedKeys = sshKeys
                                 .Skip((actualPage - 1) * keysPerPage)
                                 .Take(keysPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}