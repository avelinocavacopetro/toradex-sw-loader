@page "/selectdevices"

@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject TorizonService TorizonService
@inject DeviceService DeviceService
@inject LoginService LoginService
@inject FilterService FilterService 
@inject NavigationManager UriHelper
@inject SweetAlertService Swal

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>Selecionar Equipamento</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <a href="/home" class="text-black">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

    <h3 class="text-center pb-5">Selecionar Equipamento</h3>
    <br />
    <br />

    @* <div class="d-flex justify-content-end pe-5">
        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @totalPages de @totalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div> *@

    <div class="grid-container">
        @foreach (var device in FilterService.SelectedDevices)
        {
            <div class="grid-item" @onclick="() => ChooseDevice(device)">
                @device.Name
            </div>
        }
    </div>
}

@code {
    private List<Device> totalDevices = new List<Device>();
    private List<Device> devices = new List<Device>();
    private List<Device> paginatedDevices = new List<Device>();
    private Device? selectedDevice;
    private WindowDimension? dimension;

    private bool isLoading = true;
    private int actualPage = 1;
    private int devicesPerPage = 8;
    private int totalPages => (int)Math.Ceiling((double)devices.Count / devicesPerPage);
    private int OnlineTime => FilterService.OnlineTime;
    private bool CanGoNext => actualPage < totalPages;
    private bool CanGoPrev => actualPage > 1;

    private void OnDimensionsChanged(WindowDimension newDimension)
    {
        dimension = newDimension;
        devicesPerPage = dimension.Width <= 1024 ? 8 : devices.Count;

        UpdatePage();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();

        totalDevices = FilterService.SelectedDevices;
        devices = new List<Device>(totalDevices);
        UpdatePage();

        isLoading = false;
        StateHasChanged();
    }

    private async Task ChooseDevice(Device device)
    {
        using var context = DbContextFactory.CreateDbContext();

        bool hasProducts = await context.DeviceProducts
            .AnyAsync(dp => dp.DeviceId == device.Id);

        if (!hasProducts)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Este dispositivo não tem produtos associados.",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        selectedDevice = device;
        await OnClick();
    }


    private async Task OnClick()
    {
        if (selectedDevice != null)
        {

            using var context = DbContextFactory.CreateDbContext();

            var userAct = new UserActivity
                {
                    UserId = LoginService.UserId,
                    ActMessage = $"Selecionou o dispositivo: Nome: {selectedDevice.Name}",
                    ActTimeStamp = DateTime.Now
                };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/selectProduct/{selectedDevice.Id}");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Selecione um dispositivo!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120",
            });
        }
    }

    private void UpdatePage()
    {
        paginatedDevices = totalDevices
                                 .Skip((actualPage - 1) * devicesPerPage)
                                 .Take(devicesPerPage)
                                 .ToList();
        devices = totalDevices.ToList();
    }

    private void NextPage()
    {
        if (actualPage < totalPages)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (actualPage > 1)
        {
            actualPage--;
            UpdatePage();
        }
    }

    public void Dispose()
    {
        FilterService.OnFilterChanged -= UpdatePage;
    }
}