@page "/selectdevices"

@using ToradexSwLoader.Data
@using ToradexSwLoader.Models
@using ToradexSwLoader.Services
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject TorizonService TorizonService
@inject DeviceService DeviceService
@inject LoginService LoginService
@inject NavigationManager UriHelper
@inject IJSRuntime JS
@inject SweetAlertService Swal

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>Selecionar Equipamento</PageTitle>



@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <a href="" onclick="history.back()" class="text-black">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

    <h3 class="text-center pb-5">Selecionar Equipamento</h3>
    <br />
    <br />
    <br />

    <div class="d-flex justify-content-end pe-5">
        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @totalPages de @totalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>

    <table class="table custom-table1 custom-td mt-5">
        <thead>
            <tr>
                <th>ID</th>
                <th style="text-align: center;">Nome</th>
                <th style="text-align: center;">Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in paginetdDevices)
            {
                <tr class="@GetRowClass(device)" @onclick="() => SelectRow(device)">
                    <td>@device.DeviceId</td>
                    <td style="text-align: center;">@device.DeviceName</td>
                    <td style="text-align: center;">
                        <span class="status-box @(GetStatusClass(device.DeviceStatus))">
                            @device.DeviceStatus
                        </span>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="text-center fixed-bottom pb-5">
        <button class="btn btn-color btn-lg" @onclick="OnClick">Seguinte</button>
    </div>
}

<style>
    table tbody{
        vertical-align: initial !important;
    }

    .center {
		display: flex;
		justify-content: center;
		align-items: center;
		text-align: center;
		min-height: 80vh;
	}

</style>

@code {
    private List<Device> totalDevices = new List<Device>();
    private List<Device> devices = new List<Device>();
    private List<Device> paginetdDevices = new List<Device>();
    private Device? selectedDevice;
    private bool isLoading = true;

    private int actualPage = 1;
    private int devicesPerPage = 5;
    private int totalPages => (int)Math.Ceiling((double)devices.Count / devicesPerPage);
    private string state = "Error";
    private string selectedDeviceName;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        totalDevices = await context.Devices.Where(d => d.DeviceStatus.Equals(state)).ToListAsync();

        isLoading = false;

        UpdatePage();
    }

    private void SelectRow(Device device)
    {
        selectedDevice = device;
        selectedDeviceName = device.DeviceName;
    }

    private async Task OnClick()
    {
        if (selectedDevice != null)
        {

            using var context = DbContextFactory.CreateDbContext();

            var userAct = new UserActivity
                {
                    UserLoginId = LoginService.CurrentLoginId,
                    ActMessage = $"Colaborador selecionou o dispositivo: Nome = {selectedDevice.DeviceName}",
                    ActTimeStamp = DateTime.Now
                };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/packages/{Uri.EscapeDataString(selectedDeviceName)}");
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Selecione um dispositivo!",
                icon = "warning",
                confirmButtonColor = "#0B5120"
            });
        }
    }

    private string GetRowClass(Device device)
    {
        return selectedDevice == device ? "table-primary" : string.Empty;
    }

    private void UpdatePage()
    {

        paginetdDevices = totalDevices
                                 .Skip((actualPage - 1) * devicesPerPage)
                                 .Take(devicesPerPage)
                                 .ToList();
        devices = totalDevices.ToList();
    }

    private void NextPage()
    {
        if (actualPage < totalPages)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (actualPage > 1)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private bool CanGoNext => actualPage < totalPages;
    private bool CanGoPrev => actualPage > 1;

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "uptodate" => "status-uptodate",
            "error" => "status-error",
            "updatepending" => "status-updatepending",
            _ => "status-default"
        };
    }
}