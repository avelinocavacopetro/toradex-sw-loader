@page "/selectdevices"

@using ToradexSwLoader.Data
@using ToradexSwLoader.Models
@using ToradexSwLoader.Services
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject TorizonService TorizonService
@inject DeviceService DeviceService
@inject LoginService LoginService
@inject FilterService FilterService 
@inject NavigationManager UriHelper
@inject SweetAlertService Swal

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>Selecionar Equipamento</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <a href="/home" class="text-black">
        <i class="bi bi-arrow-left fs-1"></i>
    </a>

    <h3 class="text-center pb-5">Selecionar Equipamento</h3>
    <br />
    <br />

    <div class="d-flex justify-content-end pe-5">
        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @totalPages de @totalPages</span>
            <div class="d-flex gap-2">
                <button class="btn custom-outline-button btn-lg"
                        @onclick="PrevPage" disabled="@(!CanGoPrev)">
                    &lt;
                </button>

                <button class="btn custom-outline-button btn-lg"
                        @onclick="NextPage" disabled="@(!CanGoNext)">
                    &gt;
                </button>
            </div>
        </div>
    </div>

    <table class="table custom-table1 custom-td mt-5">
        <thead>
            <tr>
                <th>ID</th>
                <th style="text-align: center;">Nome</th>
                <th style="text-align: center;">Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in paginetdDevices)
            {
                <tr class="@GetRowClass(device)" @onclick="() => SelectRow(device)">
                    <td>@device.DeviceId</td>
                    <td style="text-align: center;">@device.DeviceName</td>
                    <td style="text-align: center;">
                        @if (device.LastSeen.HasValue && (DateTime.Now - device.LastSeen.Value).TotalMinutes <= OnlineTime)
                        {
                            <span class="fw-bold" style="color: forestgreen;">Online</span>
                        }
                        else
                        {
                            <span class="fw-bold" style="color: red;">Offline</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="text-center fixed-bottom pb-5">
        <button class="btn btn-color btn-lg" style="width: 20vw; font-size: 1.5rem;" @onclick="OnClick">Seguinte</button>
    </div>
}

@code {
    private List<Device> totalDevices = new List<Device>();
    private List<Device> devices = new List<Device>();
    private List<Device> paginetdDevices = new List<Device>();
    private Device? selectedDevice;
    private bool isLoading = true;

    private int actualPage = 1;
    private int devicesPerPage = 4;
    private int totalPages => (int)Math.Ceiling((double)devices.Count / devicesPerPage);
    private string state = "Error";
    private int OnlineTime => FilterService.OnlineTime;

    private bool CanGoNext => actualPage < totalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        FilterService.OnFilterChanged += async () => await LoadDevicesAsync();

        await LoadDevicesAsync();

        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadDevicesAsync()
    {
        actualPage = 1;

        var deviceFilter = FilterService.SelectedDevice;

        var devicesUrl = "https://app.torizon.io/api/v2beta/devices?limit=200&offset=0";

        if (!string.IsNullOrWhiteSpace(deviceFilter))
        {
            devicesUrl += $"&nameContains={Uri.EscapeDataString(deviceFilter)}";
        }

        bool authOk = await TorizonService.AuthenticateAsync();
        if (authOk)
        {
            var apiDevices = await TorizonService.GetItemsAsync<Device>(devicesUrl) ?? new List<Device>();

            totalDevices = new List<Device>(apiDevices);
            devices = new List<Device>(totalDevices);

            UpdatePage();
        }
    }

    private async void SelectRow(Device device)
    {
        bool isOnline = device.LastSeen.HasValue && (DateTime.Now - device.LastSeen.Value).TotalMinutes <= OnlineTime;

        // if (!isOnline)
        // {
        //     await Swal.FireAsync(new SweetAlertOptions
        //     {
        //         Title = "Este dispositivo está offline e não pode ser selecionado.",
        //         Icon = SweetAlertIcon.Warning,
        //         ConfirmButtonColor = "#0B5120"
        //     });
        //     return;
        // }

        selectedDevice = device;
    }

    private async Task OnClick()
    {
        if (selectedDevice != null)
        {

            using var context = DbContextFactory.CreateDbContext();

            var userAct = new UserActivity
                {
                    UserLoginId = LoginService.CurrentLoginId,
                    ActMessage = $"Colaborador selecionou o dispositivo: Nome = {selectedDevice.DeviceName}",
                    ActTimeStamp = DateTime.Now
                };

            context.UserActivities.Add(userAct);
            await context.SaveChangesAsync();

            UriHelper.NavigateTo($"/packages/{Uri.EscapeDataString(selectedDevice.DeviceId)}");
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Selecione um dispositivo!",
                icon = "warning",
                confirmButtonColor = "#0B5120"
            });
        }
    }

    private string GetRowClass(Device device)
    {
        return selectedDevice == device ? "table-primary" : string.Empty;
    }

    private void UpdatePage()
    {
        paginetdDevices = totalDevices
                                 .Skip((actualPage - 1) * devicesPerPage)
                                 .Take(devicesPerPage)
                                 .ToList();
        devices = totalDevices.ToList();
    }

    private void NextPage()
    {
        if (actualPage < totalPages)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (actualPage > 1)
        {
            actualPage--;
            UpdatePage();
        }
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "uptodate" => "status-uptodate",
            "error" => "status-error",
            "updatepending" => "status-updatepending",
            _ => "status-default"
        };
    }

    public void Dispose()
    {
        FilterService.OnFilterChanged -= UpdatePage;
    }
}