@page "/manageStacks"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Gerir Stacks</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else if (isAdding || isEditing)
{
    <div class="center-edit">
        <div class="edit-form">
            <label for="text" class="pb-4" style="font-size: 1.5rem;">Nome da Stack</label>
            <input type="text" @bind="stackName" class="form-control w-100 mx-auto" style="font-size: 1.2rem; text-align: center;" />

            <br />
            <h4>Selecionar Produto(s):</h4>

            <table class="table mt-3 w-100">
                <thead style="background-color: #0c6527; color: white;">
                    <tr>
                        <th>Produto</th>
                        <th class="text-center">Selecionar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in FilterService.SelectedProducts)
                    {
                        <tr class="table-light">
                            <td>@product.Name</td>
                            <td>
                                <div class="form-check d-flex justify-content-center">
                                    <input type="checkbox" class="largerCheckbox" id="toggle-@product.Id"
                                           @onchange="(e => ToggleProduct(e, product))"
                                           checked="@selectedProducts.Any(p => p.Id == product.Id)" />
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="d-flex flex-row flex-wrap justify-content-center gap-3 mt-5">
                <button class="btn btn-color btn-lg btn-edit-custom" style="min-width: 120px;"
                        @onclick="isAdding? SaveStack : EditStack">
                    Salvar
                </button>
                <button class="btn btn-danger btn-lg btn-edit-custom" style="min-width: 120px;"
                        @onclick="isAdding? CancelAdd : CancelEdit">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="center-customization">
        @if (!isAdding)
        {
            <div class="container-fluid">
                <h3 style="text-align: left;">Configurar filtros a aplicar:</h3>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <div class="w-50">
                        <input type="text" class="form-control" placeholder="Pesquisar stack pelo nome..."
                               @bind="searchTerm" @bind:event="oninput" />
                    </div>

                    <div class="d-flex justify-content-between align-items-center gap-3">
                        <span>@actualPage - @TotalPages de @TotalPages</span>
                        <div class="d-flex gap-2">
                            <button class="btn custom-outline-button btn-lg"
                                    @onclick="PrevPage" disabled="@(!CanGoPrev)">
                                &lt;
                            </button>

                            <button class="btn custom-outline-button btn-lg"
                                    @onclick="NextPage" disabled="@(!CanGoNext)">
                                &gt;
                            </button>
                        </div>
                    </div>
                </div>

                <div class="pb-2 pt-4" style="text-align: right;">
                    <button class="btn btn-color btn-lg"
                            style="font-size: 2rem; width: 50px; height: 50px; padding: 0;"
                            @onclick="AddStack">
                        +
                    </button>
                </div>

                <div class="pb-5">
                    <table class="table mt-3 w-100">
                        <thead style="background-color: #0c6527; color: white;">
                            <tr>
                                <th>Nome da Stack</th>
                                <th>Produtos associados</th>
                                <th class="text-center">Ativo</th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var stack in PaginatedStacks)
                            {
                                <tr class="table-light">
                                    <td>@stack.Name</td>
                                    <td>
                                        @if (stack.ProductStacks?.Any() == true)
                                        {
                                            <ul class="mb-0 ps-3">
                                                @foreach (var ps in stack.ProductStacks)
                                                {
                                                    <li>@ps.Product?.Name</li>
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <span class="text-muted" style="font-size:18px;">Sem produtos</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="form-check d-flex justify-content-center">
                                            <input type="checkbox" class="largerCheckbox" id="toggle-@stack.Id"
                                                   @onchange="(e => ToggleStack(e, stack))"
                                                   checked="@selectedStacks.Any(s => s.Id == stack.Id)" />
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-sm"
                                                title="Editar"
                                                @onclick="() => EditStack(stack.Id)"
                                                style="padding: 0; display: flex; justify-content: center; align-items: center; height: 32px; width: 32px;">
                                            <i class="bi bi-pencil-square" style="font-size: 1.4rem; vertical-align: middle;"></i>
                                        </button>
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-danger btn-sm"
                                                title="Desativar"
                                                @onclick="() => DisableStack(stack.Id)"
                                                style="padding: 0; display: flex; justify-content: center; align-items: center; height: 32px; width: 32px;">
                                            <i class="bi bi-trash-fill" style="font-size: 1.4rem; vertical-align: middle;"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="text-center fixed-bottom pb-4">
                    <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="ApplyFilter">Aplicar</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Stack> stacks = new List<Stack>();
    private List<Stack> selectedStacks = new List<Stack>();
    private List<Product> selectedProducts = new List<Product>();
    private List<Stack> paginatedStacks = new List<Stack>();
    private Stack? selectedStack = new Stack();
    private WindowDimension dimension = new WindowDimension();

    private string stackName = string.Empty;

    private int actualPage = 1;
    private int stacksPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)stacks.Count / stacksPerPage);

    private bool isLoading = true;
    private bool isAdding = false;
    private bool isEditing = false;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    private IEnumerable<Stack> FilteredStacks =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? stacks
        : stacks.Where(s => s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<Stack> PaginatedStacks =>
    FilteredStacks
        .Skip((actualPage - 1) * stacksPerPage)
        .Take(stacksPerPage);

    private void OnDimensionsChanged(WindowDimension newDimension)
    {
        dimension = newDimension;

        UpdatePage();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();
        stacks = await context.Stacks
               .Include(s => s.ProductStacks)
                   .ThenInclude(ps => ps.Product)
               .ToListAsync();

        selectedStacks = FilterService.SelectedStacks;
        selectedProducts = new List<Product>(FilterService.SelectedProducts);

        UpdatePage();

        isLoading = false;
    }

    private void ToggleStack(ChangeEventArgs e, Stack stack)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedStacks.Any(s => s.Id == stack.Id))
                selectedStacks.Add(stack);
        }
        else
        {
            selectedStacks.RemoveAll(s => s.Id == stack.Id);
        }
    }

    private void AddStack()
    {
        stackName = string.Empty;
        selectedProducts.Clear();
        selectedStack = null;
        isAdding = true;
        isEditing = false;
    }

    private async Task EditStack(int id)
    {
        isEditing = true;
        isAdding = false;

        using var context = DbContextFactory.CreateDbContext();
        selectedStack = await context.Stacks.FirstOrDefaultAsync(s => s.Id == id);

        if (selectedStack != null)
        {
            stackName = selectedStack.Name;

            selectedProducts = await context.ProductStacks
                .Where(ps => ps.StackId == id)
                .Select(ps => ps.Product!)
                .ToListAsync();
        }
    }

    private async Task EditStack()
    {
        if (selectedStack == null) return;

        using var context = DbContextFactory.CreateDbContext();

        var stackDb = await context.Stacks.FirstOrDefaultAsync(s => s.Id == selectedStack.Id);
        if (stackDb == null) return;

        stackDb.Name = stackName;

        var oldProductStacks = context.ProductStacks.Where(ps => ps.StackId == stackDb.Id);
        context.ProductStacks.RemoveRange(oldProductStacks);

        foreach (var product in selectedProducts)
        {
            context.ProductStacks.Add(new ProductStack
            {
                ProductId = product.Id,
                StackId = stackDb.Id
            });
        }

        await context.SaveChangesAsync();

        var localStack = stacks.FirstOrDefault(s => s.Id == stackDb.Id);
        if (localStack != null)
        {
            localStack.Name = stackDb.Name;

            localStack.ProductStacks = selectedProducts.Select(p => new ProductStack
            {
                StackId = stackDb.Id,
                ProductId = p.Id,
                Product = p
            }).ToList();
        }

        UpdatePage();

        CancelEdit();

        StateHasChanged();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Stack editada com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void ToggleProduct(ChangeEventArgs e, Product product)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedProducts.Any(p => p.Id == product.Id))
                selectedProducts.Add(product);
        }
        else
        {
            selectedProducts.RemoveAll(p => p.Id == product.Id);
        }
    }

    private async Task ApplyFilter()
    {
        if (selectedStacks.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos uma stack!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
        else
        {
            await FilterService.ApplyStacksFilter(new List<Stack>(selectedStacks));

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Filtros aplicados com sucesso!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonColor = "#0B5120"
            });
        }
    }

    private async Task SaveStack()
    {
        if (string.IsNullOrWhiteSpace(stackName))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor insira um nome válido!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        using var context = DbContextFactory.CreateDbContext();

        bool exists = await context.Stacks.AnyAsync(s => s.Name.ToLower() == stackName.Trim().ToLower());

        if (exists)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta stack já existe!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        var newStack = new Stack
        {
            Name = stackName,
            Enabled = true
        };

        context.Stacks.Add(newStack);
        await context.SaveChangesAsync();

        foreach (var product in selectedProducts)
        {
            context.ProductStacks.Add(new ProductStack
            {
                StackId = newStack.Id,
                ProductId = product.Id
            });
        }

        await context.SaveChangesAsync();

        newStack.ProductStacks = selectedProducts.Select(p => new ProductStack
        {
            StackId = newStack.Id,
            ProductId = p.Id,
            Product = p
        }).ToList();


        stacks.Add(newStack);

        newStack.ProductStacks = selectedProducts.Select(p => new ProductStack
        {
            Product = p,
            StackId = newStack.Id,
            ProductId = p.Id
        }).ToList();

        CancelAdd();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Stack adicionada com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void CancelAdd()
    {
        isAdding = false;
        stackName = string.Empty;
        selectedProducts.Clear();
        selectedStack = null;
    }

    private void CancelEdit()
    {
        isEditing = false;
        stackName = string.Empty;
        selectedProducts.Clear();
        selectedStack = null;
    }

    private async Task DisableStack(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Deseja desativar esta stack?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Continuar",
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = "Cancelar"
        });

        if (result.IsConfirmed)
        {
            isLoading = true;

            using var context = DbContextFactory.CreateDbContext();
            var stackDb = await context.Stacks.FirstOrDefaultAsync(s => s.Id == id);

            if (stackDb != null)
            {
                stackDb.Enabled = false;
                await context.SaveChangesAsync();
            }

            stacks.RemoveAll(s => s.Id == id);

            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdatePage()
    {
        paginatedStacks = FilteredStacks
                                 .Skip((actualPage - 1) * stacksPerPage)
                                 .Take(stacksPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}