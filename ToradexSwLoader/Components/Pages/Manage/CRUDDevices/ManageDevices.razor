@page "/manageDevices"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>@localizer["ManageDevices"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">@localizer["ManageDevices"]</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-50 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="@localizer["SearchDevice"]"
                       style="border: 1px solid grey;"
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div>
                <button class="btn btn-color btn-lg"
                        style="font-size: 1.25rem;"
                        @onclick="NavigateToAddDevice">
                    <i class="bi bi-plus icon-align"></i> @localizer["New"]
                </button>
                <button class="btn btn-color btn-lg"
                        style="font-size: 1.25rem;"
                        @onclick="ApplyFilter">
                    <i class="bi bi-floppy icon-align"></i> @localizer["Apply"]
                </button>
            </div>
        </div>

        <div class="card-body pb-2 px-0 mb-0 mt-3">
            <div class="table-responsive border rounded-2">
                <QuickGrid Class="table table-striped m-0"
                           Items="@FilteredDevices.AsQueryable()"
                           ItemKey="@(pd => pd.Id)">

                    <!--- Coluna das opções --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="options-buttons-header">
                                @localizer["Options"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="options-buttons">
                                <div>
                                    <button class="btn btn-outline-success btn-sm py-1 px-2"
                                            title="Editar"
                                            @onclick="() => NavigateToEditDevice(context.Id)">
                                        <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                    </button>
                                </div>
                                <div>
                                    <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                            title="Desativar"
                                            @onclick="() => DisableDevice(context.Id)">
                                        <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                    </button>
                                </div>
                            </div>

                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna dos nomes dos dispositivos --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left" style="cursor: pointer;" onclick="@(() => SortByColumn("Name"))">
                                @localizer["Name"]
                                <span style="font-size: 1rem; margin-left: 5px;
                                                             color: @(currentSortColumn == "Name" ? "white" : "rgba(255,255,255,0.5)")">
                                    @(currentSortColumn == "Name" ? (isNameAscending ? "▲" : "▼") : "▲")
                                </span>
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @context.Name
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado (Ativo ou não) --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["Active"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-center">
                                <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                       id="toggle-@context.Id"
                                       @onchange="(e => ToggleDevice(e, context))"
                                       checked="@selectedDevices.Any(d => d.Id == context.Id)" />
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>

                @if (!FilteredDevices.Any())
                {
                    <table class="table table-striped m-0">
                        <tbody>
                            <tr>
                                <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                    @localizer["NoData"]
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>

            <div class="d-flex justify-content-end mt-3 px-3">
                <p>@FilteredDevices.Count() @localizer["Device"]&#40s&#41</p>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Object
    List<Device> devices = new();
    List<Device> selectedDevices = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(ManageDevices));

    IEnumerable<Device> FilteredDevices
    {
        get
        {
            var filtered = string.IsNullOrWhiteSpace(searchTerm)
                ? devices
                : devices.Where(d => d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            if (currentSortColumn == "Name")
            {
                filtered = isNameAscending
                    ? filtered.OrderBy(d => d.Name)
                    : filtered.OrderByDescending(d => d.Name);
            }

            return filtered;
        }
    }

    // Variáveis: String
    string currentSortColumn = "Name";

    string _searchTerm = string.Empty;
    string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
            }
        }
    }

    // Variáveis: Boolean
    bool isLoading = true;
    bool isNameAscending = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();

            using var context = DbContextFactory.CreateDbContext();
            devices = await context.Devices.Where(d => d.Enabled).OrderBy(d => d.Name).ToListAsync();

            selectedDevices = FilterService.SelectedDevices;

            UpdatePage();

            _log.Info("Devices loaded successfuly.");
            isLoading = false;
        } 
        catch (Exception ex)
        {
            _log.Error("Error loading devices. ", ex);
        }

    }

    void ToggleDevice(ChangeEventArgs e, Device device)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedDevices.Any(d => d.Id == device.Id))
                selectedDevices.Add(device);
        }
        else
        {
            selectedDevices.RemoveAll(d => d.Id == device.Id);
        }
    }

    void NavigateToAddDevice()
    {
        NavigationManager.NavigateTo("/manageDevices/add");
    }

    void NavigateToEditDevice(int id)
    {
        NavigationManager.NavigateTo($"/manageDevices/edit/{id}");
    }

    async Task ApplyFilter()
    {
        try
        {
            if (selectedDevices.Count == 0)
            {
                ToastService.ShowWarning(localizer["SelectMoreDevices"]);
                return;
            }

            await FilterService.ApplyDevicesFilter(new List<Device>(selectedDevices));

            ToastService.ShowSuccess(localizer["FiltersApplied"]);
        } catch (Exception ex)
        {
            _log.Error("Error applying filter. ", ex);

            ToastService.ShowError(localizer["FilterError"]);
        }
    }

    async Task DisableDevice(int id)
    {
        try
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Deseja desativar este dispositivo?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = @localizer["Continue"],
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = @localizer["Cancel"],
                CancelButtonColor = "#dc3545"
            });

            if (result.IsConfirmed)
            {
                isLoading = true;

                using var context = DbContextFactory.CreateDbContext();
                var deviceDb = await context.Devices.FirstOrDefaultAsync(d => d.Id == id);

                if (deviceDb != null)
                {
                    deviceDb.Enabled = false;

                    var relations = await context.DeviceProducts
                        .Where(dp => dp.DeviceId == id)
                        .ToListAsync();

                    context.DeviceProducts.RemoveRange(relations);

                    await context.SaveChangesAsync();
                }

                devices.RemoveAll(d => d.Id == id);

                FilterService.SelectedDevices.RemoveAll(d => d.Id == id);
                await FilterService.SaveFilterAsync();

                ToastService.ShowSuccess(@localizer["DeviceDisableSuccess"]);

                isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _log.Error("Error disabling device. ", ex);

            ToastService.ShowError(localizer["ErrorDisablingDevice"]);
            return;
        }
    }

    void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isNameAscending = !isNameAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isNameAscending = true;
        }
    }

    void UpdatePage()
    {
        InvokeAsync(StateHasChanged);
    }
}