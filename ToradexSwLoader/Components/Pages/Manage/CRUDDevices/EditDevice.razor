@page "/manageDevices/edit/{DeviceId:int}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>Editar Dispositivo</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="center-edit">
        <div class="edit-form">
            <label for="text" class="pb-4" style="font-size: 1.5rem;">Nome do Dispositivo</label>
            <input type="text" @bind="deviceName" class="form-control w-100 mx-auto" style="font-size: 1.2rem; text-align: center;" />

            <div class="d-flex flex-row flex-wrap justify-content-center gap-3 mt-5">
                <button class="btn btn-color btn-lg btn-edit-custom" style="min-width: 120px;"
                        @onclick="SaveChanges">
                    Salvar
                </button>
                <button class="btn btn-danger btn-lg btn-edit-custom" style="min-width: 120px;"
                        @onclick="Cancel">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int DeviceId { get; set; }

    private string deviceName = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        var device = await context.Devices.FirstOrDefaultAsync(d => d.Id == DeviceId);

        if (device != null)
        {
            deviceName = device.Name;
        }

        isLoading = false;
    }

    private async Task SaveChanges()
    {
        if (string.IsNullOrWhiteSpace(deviceName))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor insira um nome válido!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        using var context = DbContextFactory.CreateDbContext();

        var deviceDb = await context.Devices.FirstOrDefaultAsync(d => d.Id == DeviceId);
        if (deviceDb == null) return;

        deviceDb.Name = deviceName;

        await context.SaveChangesAsync();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Dispositivo editado com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });

        NavigationManager.NavigateTo("/manageDevices");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageDevices");
    }
}