@page "/manageDevices/add"

@using log4net
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>@localizer["AddDevice"]</PageTitle>

<div class="custom-container">
    <div class="page-title d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <i class="bi bi-card-list icon-align fs-3" style="padding-left: 10px;"></i>
            <h3 class="ms-2 mb-0">@localizer["AddDevice"]</h3>
        </div>

        <div class="d-flex gap-3">
            <button class="btn btn-outline-light border border-white border-2"
                    style="width: 100px;"
                    @onclick="Cancel">
                <i class="bi bi-arrow-left fs-5"></i>
            </button>
            <button class="btn btn-outline-light border border-white border-2 fs-5"
                    style="width: 150px;"
                    @onclick="SaveDevice">
                <i class="bi bi-floppy"></i> @localizer["Save"]
            </button>
        </div>
    </div>

    <div class="edit-form mt-4">
        <div class="d-flex align-items-center gap-3">
            <label for="Ñame" class="mb-0" style="font-size: 1.5rem; flex-shrink: 0;">
                @localizer["Name"]
                <span style="font-size: 15px;"> (@localizer["max"]. 30 @localizer["Characters"])</span> :
            </label>
            <input type="text" @bind="deviceName"
                   id="Name"
                   class="form-control"
                   style="font-size: 1.2rem; border: 1px solid grey;"
                   maxlength="30"/>
        </div>
    </div>
</div>

@code {
    // Variáveis: Integer
    const int NameLength = 30;

    // Variáveis: String
    public string deviceName = string.Empty;

    // Variáveis: Object
    static readonly ILog _log = LogManager.GetLogger(typeof(AddDevice));

    async Task SaveDevice()
    {
        try
        {
            if (!ValidateDeviceName())
                return;

            using var context = DbContextFactory.CreateDbContext();

            if (await DeviceExistsAsync(context))
            {
                ToastService.ShowWarning(@localizer["DeviceExists"]);
                return;
            }

            await AddDeviceAsync(context);
            
            ToastService.ShowSuccess(@localizer["AddedSuccess"]);

            NavigationManager.NavigateTo("/manageDevices");
        }
        catch (Exception ex)
        {
            _log.Error("Error saving device. ", ex);

            ToastService.ShowError(@localizer["ErrorSavingDevice"]);
            return;
        }
    }

    public bool ValidateDeviceName()
    {
        if (string.IsNullOrWhiteSpace(deviceName))
        {
            ToastService.ShowWarning(@localizer["ValidName"]);
            return false;
        }

        if (deviceName.Length > NameLength)
        {
            ToastService.ShowWarning($"{@localizer["LongName"]}. {@localizer["Max30"]}");
            return false;
        }

        return true;
    }

    async Task<bool> DeviceExistsAsync(AppDbContext context)
    {
        return await context.Devices
            .AnyAsync(d => d.Name.ToLower() == deviceName.Trim().ToLower());
    }

    async Task AddDeviceAsync(AppDbContext context)
    {
        var newDevice = new Device
        {
            Name = deviceName.Trim(),
            Enabled = true
        };

        context.Devices.Add(newDevice);
        await context.SaveChangesAsync();
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/manageDevices");
    }
}