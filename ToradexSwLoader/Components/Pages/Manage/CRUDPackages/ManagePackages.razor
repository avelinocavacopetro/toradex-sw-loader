@page "/managePackages"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>@localizer["ManagePackages"]</PageTitle>

<div class="custom-container">
    <div class="page-title">
        <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
        <h3 class="pt-2">@localizer["ManagePackages"]</h3>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <div class="w-50 position-relative">
            <input type="text"
                   class="form-control py-2 ps-5"
                   placeholder="@localizer["SearchPackage"]"
                   style="border: 1px solid grey;"
                   @bind="searchTerm"
                   @bind:event="oninput" />
            <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-color btn-lg py-2"
                    style="font-size: 1.25rem;"
                    @onclick="NavigateToAdd">
                <i class="bi bi-plus"></i> @localizer["New"]
            </button>
        </div>
    </div>

    <div class="card-body pb-2 px-0 mb-0 mt-3">
        <div class="table-responsive border rounded-2">
            <QuickGrid Class="table table-striped m-0"
                       Items=@FilteredPackages.AsQueryable()
                       ItemKey="@(pp => pp.Stack?.Id + pp.Package?.Id)">

                <!--- Coluna das opções --->
                <TemplateColumn>
                    <HeaderTemplate>
                        <div class="options-buttons-header">
                            @localizer["Options"]
                        </div>
                    </HeaderTemplate>
                    <ChildContent>
                        <div class="options-buttons">
                            <div>
                                <button class="btn btn-outline-success btn-sm py-1 px-2"
                                        title="Editar"
                                        @onclick="() => NavigateToEdit(context.StackId, context.PackageId)">
                                    <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                </button>
                            </div>
                            <div>
                                <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                        title="Remover"
                                        @onclick="() => RemoveStack(context.StackId, context.PackageId)">
                                    <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                </button>
                            </div>
                        </div>
                    </ChildContent>
                </TemplateColumn>

                <!--- Coluna do nome das stacks --->
                <TemplateColumn>
                    <HeaderTemplate>
                        <div class="header-table-left" style="cursor: pointer;" onclick="@(() => SortByColumn("Name"))">
                            Stack
                            <span style="font-size: 1rem; margin-left: 5px;
                                                         color: @(currentSortColumn == "Name" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "Name" ? (isNameAscending ? "▲" : "▼") : "▲")
                            </span>
                        </div>
                    </HeaderTemplate>
                    <ChildContent>
                        <div class="body-table-left">
                            @context.Stack?.Name
                        </div>
                    </ChildContent>
                </TemplateColumn>

                <!--- Coluna do nome do pacote --->
                <TemplateColumn>
                    <HeaderTemplate>
                        <div class="header-table-left">
                            @localizer["Package"]
                        </div>
                    </HeaderTemplate>
                    <ChildContent>
                        <div class="body-table-left">
                            <span style="font-size: 1rem;">
                                @context.Package?.Name
                            </span>
                        </div>
                    </ChildContent>
                </TemplateColumn>

                <!--- Coluna da versão do pacote --->
                <TemplateColumn>
                    <HeaderTemplate>
                        <div class="header-table-left">
                            @localizer["Version"]
                        </div>
                    </HeaderTemplate>
                    <ChildContent>
                        <div class="body-table-left">
                            <span style="font-size: 1rem;">
                                @context.Package?.Version
                            </span>
                        </div>
                    </ChildContent>
                </TemplateColumn>
            </QuickGrid>

            @if (!FilteredPackages.Any())
            {
                <table class="table table-striped m-0">
                    <tbody>
                        <tr>
                            <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                @localizer["NoData"]
                            </td>
                        </tr>
                    </tbody>
                </table>
            }
        </div>

        <div class="d-flex justify-content-end mt-3 px-3">
            <p>@FilteredPackages.Count() @localizer["Package"]&#40s&#41</p>
        </div>
    </div>
</div>

@code {
    // Variáveis: Object
    List<StackPackage> stacksPackages = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(ManagePackages));

    IEnumerable<StackPackage> FilteredPackages
    {
        get
        {
            var filtered = string.IsNullOrWhiteSpace(searchTerm)
                ? stacksPackages
                : stacksPackages.Where(sp => sp.Stack?.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);

            if (currentSortColumn == "Name")
            {
                filtered = isNameAscending
                    ? filtered.OrderBy(sp => sp.Stack?.Name)
                    : filtered.OrderByDescending(sp => sp.Stack?.Name);
            }

            return filtered;
        }
    }

    // Variáveis: String
    string currentSortColumn = "Name";

    string _searchTerm = string.Empty;
    string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
            }
        }
    }

    // Variáveis: Boolean
    bool isNameAscending = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();

            _log.Info("Packages loaded successfully.");
        } 
        catch (Exception ex)
        {
            _log.Error("Error loading packages. ", ex);
            ToastService.ShowError($"{@localizer["Error"]}. {@localizer["ErrorLoading"]}");
        }   
    }

    async Task LoadData()
    {
        using var context = DbContextFactory.CreateDbContext();
        stacksPackages = await context.StackPackages
            .Include(sp => sp.Stack)
            .Include(sp => sp.Package)
            .ToListAsync();

        UpdatePage();
    }

    void NavigateToAdd()
    {
        NavigationManager.NavigateTo("/managePackages/add");
    }

    void NavigateToEdit(int stackId, string packageId)
    {
        NavigationManager.NavigateTo($"/managePackages/edit/{stackId}/{packageId}");
    }

    void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isNameAscending = !isNameAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isNameAscending = true;
        }
    }

    async Task RemoveStack(int stackId, string packageId)
    {
        try
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["WantContinue"],
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = @localizer["Continue"],
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = @localizer["Cancel"],
                CancelButtonColor = "#dc3545"
            });

            if (result.IsConfirmed)
            {
                using var context = DbContextFactory.CreateDbContext();
                var toRemove = await context.StackPackages
                    .FirstOrDefaultAsync(sp => sp.StackId == stackId && sp.PackageId == packageId);

                if (toRemove != null)
                {
                    context.StackPackages.Remove(toRemove);
                    await context.SaveChangesAsync();
                    await LoadData();
                }

                ToastService.ShowSuccess(@localizer["PackageRemoveSuccess"]);
            }
        } 
        catch (Exception ex)
        {
            _log.Error("Error removing package. ", ex);
            
            ToastService.ShowError($"{@localizer["Error"]}. {@localizer["TryAgain"]}");
            return;
        }
    }

    void UpdatePage()
    {
        InvokeAsync(StateHasChanged);
    }
}