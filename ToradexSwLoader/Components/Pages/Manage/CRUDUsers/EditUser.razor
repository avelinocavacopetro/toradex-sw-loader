@page "/manageUsers/edit/{UserId:int}"

@using log4net
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["EditUser"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="bi bi-card-list icon-align fs-3" style="padding-left: 10px;"></i>
                <h3 class="ms-2 mb-0">@localizer["EditUser"]</h3>
            </div>

            <div class="d-flex gap-3">
                <button class="btn btn-outline-light border border-white border-2"
                        style="width: 100px;"
                        @onclick="Cancel">
                    <i class="bi bi-arrow-left fs-5"></i>
                </button>
                <button class="btn btn-outline-light border border-white border-2 fs-5"
                        style="width: 150px;"
                        @onclick="SaveChanges">
                    <i class="bi bi-floppy"></i> @localizer["Save"]
                </button>
            </div>
        </div>

        <div class="edit-form mt-4">
            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="text" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">@localizer["Name"]</label>
                <input type="text"
                       @bind="userName"
                       class="form-control w-50 mx-auto"
                       style="font-size: 1.2rem; text-align: center; border: 1px solid grey" />
            </div>

            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="email" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Email</label>
                <input type="email"
                       @bind="userEmail"
                       class="form-control w-50 mx-auto"
                       style="font-size: 1.2rem; text-align: center; border: 1px solid grey" />
            </div>

            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="password" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">@localizer["Password"]</label>
                <input type="password"
                       @bind="userPassword"
                       class="form-control w-50 mx-auto"
                       style="font-size: 1.2rem; text-align: center; border: 1px solid grey" />
            </div>

            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="text" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">@localizer["Function"]</label>
                <select class="form-select form-select-sm mx-auto w-50"
                        @bind="selectedRoleId"
                        style="height: 40px; font-size: 1.2rem; text-align: center;">
                    <option value="">Selecione uma função</option>
                    @foreach (var role in roles)
                    {
                        <option value="@role.Id">@GetRoleName(role.Name)</option>
                    }
                </select>
            </div>

            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="text" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Entidade</label>
                <div class="d-flex align-items-center w-50 mx-auto" style="gap: 5px;">
                    <select class="form-select form-select-sm h-100 flex-grow-1"
                            @bind="selectedEntityId"
                            style="height: 32px; font-size: 1.2rem; text-align: center; border: 1px solid grey;">
                        <option value="">Selecione uma entidade</option>
                        @foreach (var entity in entities)
                        {
                            <option value="@entity.Id">@entity.Name</option>
                        }
                    </select>
                    <button type="button"
                            class="btn btn-danger"
                            @onclick="() => selectedEntityId = null"
                            style="height: 32px; display: flex; align-items: center;">
                        Limpar
                    </button>
                </div>
            </div>

            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="text" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">@localizer["Language"]</label>
                <select id="cultureSelect"
                        class="form-select form-select-sm mx-auto w-50"
                        style="height: 40px; font-size: 1.2rem;"
                        @bind="userCulture">
                    <option value="">@localizer["SelectLanguage"]</option>
                    <option value="pt-PT">@localizer["Portuguese"]</option>
                    <option value="en-US">@localizer["English"]</option>
                    <option value="es-ES">@localizer["Spanish"]</option>
                </select>
            </div>
        </div>
    </div>
}

@code {
    // Parameters
    [Parameter]
    public int UserId { get; set; }

    // Object Variables
    private List<UserRole> roles = new();
    private List<Entity> entities = new();
    private static readonly ILog log = LogManager.GetLogger(typeof(EditUser));

    // String Variables
    private string userName = string.Empty;
    private string userEmail = string.Empty;
    private string userPassword = string.Empty;
    private string userCulture = string.Empty;
    private string currentCulture = string.Empty;

    // Integer Variables
    private int? selectedRoleId = null;
    private int? selectedEntityId = null;

    // Boolean Variables
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            var user = await context.Users.FirstOrDefaultAsync(u => u.Id == UserId);
            roles = await context.Roles.ToListAsync();
            entities = await context.Entities.Where(e => e.Enabled).ToListAsync();

            if (user != null)
            {
                selectedRoleId = user.UserRoleId;
                selectedEntityId = user.EntityId;
                userName = user.UserName;
                userEmail = user.Email;
                userPassword = user.Password;
                userCulture = user.Culture;
            }

            isLoading = false;
        }
        catch (Exception ex)
        {
            log.Error("Error loading user or roles. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["ErrorLoading"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            NavigationManager.NavigateTo("/manageUsers");
        }
    }

    private string GetRoleName(string roleName)
    {
        return localizer[roleName];
    }

    private async Task SaveChanges()
    {
        try
        {
            if (!ValidateUser())
                return;

            using var context = DbContextFactory.CreateDbContext();

            await ChangeUser(context);
            await ShowSuccessAlert();
            NavigationManager.NavigateTo("/manageUsers");
        }
        catch (Exception ex)
        {
            log.Error("Error saving changes to user. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["TryAgain"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
    }

    private bool ValidateUser()
    {
        if (string.IsNullOrWhiteSpace(userName) & string.IsNullOrWhiteSpace(userEmail) & string.IsNullOrWhiteSpace(userPassword))
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["ValidName"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        if (userName.Length > 30)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["LongName"],
                Text = @localizer["Max30"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        if (userEmail.Length > 50)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["LongEmail"],
                Text = @localizer["Max30"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        if (userPassword.Length > 15)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["LongPass"],
                Text = @localizer["Max30"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        return true;
    }

    private async Task ChangeUser(AppDbContext context)
    {
        var userDb = await context.Users.FirstOrDefaultAsync(u => u.Id == UserId);
        if (userDb == null) return;

        userDb.UserName = userName;
        userDb.Email = userEmail;
        userDb.Password = userPassword;
        userDb.Culture = userCulture;
        userDb.UserRoleId = selectedRoleId.Value;
        userDb.EntityId = selectedEntityId;

        await context.SaveChangesAsync();
    }

    private async Task ShowSuccessAlert()
    {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = @localizer["AddedSuccess"],
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageUsers");
    }
}