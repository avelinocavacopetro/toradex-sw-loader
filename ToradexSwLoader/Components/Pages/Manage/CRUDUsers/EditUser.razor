@page "/manageUsers/edit/{UserId:int}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>Editar Utilizador</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="bi bi-card-list icon-align fs-3" style="padding-left: 10px;"></i>
                <h3 class="ms-2 mb-0">Adicionar Utilizador</h3>
            </div>

            <div class="d-flex gap-3">
                <button class="btn btn-outline-light border border-white border-2"
                        style="width: 100px;"
                        @onclick="Cancel">
                    <i class="bi bi-arrow-left fs-5"></i>
                </button>
                <button class="btn btn-outline-light border border-white border-2 fs-5"
                        style="width: 150px;"
                        @onclick="SaveChanges">
                    <i class="bi bi-floppy"></i> Salvar
                </button>
            </div>
        </div>

        <div class="edit-form mt-4">
            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="text" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Nome</label>
                <input type="text"
                       @bind="userName"
                       class="form-control w-50 mx-auto"
                       style="font-size: 1.2rem; text-align: center; border: 1px solid grey" />
            </div>

            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="email" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Email</label>
                <input type="email"
                       @bind="userEmail"
                       class="form-control w-50 mx-auto"
                       style="font-size: 1.2rem; text-align: center; border: 1px solid grey" />
            </div>

            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="password" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Palavra-passe</label>
                <input type="password"
                       @bind="userPassword"
                       class="form-control w-50 mx-auto"
                       style="font-size: 1.2rem; text-align: center; border: 1px solid grey" />
            </div>

            <div class="d-flex align-items-center gap-3 mb-3">
                <label for="text" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Função</label>
                <select class="form-select form-select-sm mx-auto w-50"
                        @bind="selectedRoleId"
                        style="height: 32px; font-size: 1.2rem; text-align: center;">
                    <option value="">Selecione uma função</option>
                    @foreach (var role in roles)
                    {
                        <option value="@role.Id">@role.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int UserId { get; set; }
    private List<UserRole> roles = new();
    private string userName = string.Empty;
    private string userEmail = string.Empty;
    private string userPassword = string.Empty;
    private int? selectedRoleId = null;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        var user = await context.Users.FirstOrDefaultAsync(u => u.Id == UserId);
        roles = await context.Roles.ToListAsync();

        if (user != null)
        {
            selectedRoleId = user.UserRoleId;
            userName = user.UserName;
            userEmail = user.Email;
            userPassword = user.Password;
        }

        isLoading = false;
    }

    private async Task SaveChanges()
    {
        if (string.IsNullOrWhiteSpace(userName) & string.IsNullOrWhiteSpace(userEmail) & string.IsNullOrWhiteSpace(userPassword))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor insira dados válidos!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        using var context = DbContextFactory.CreateDbContext();

        var userDb = await context.Users.FirstOrDefaultAsync(u => u.Id == UserId);
        if (userDb == null) return;

        userDb.UserName = userName;
        userDb.Email = userEmail;
        userDb.Password = userPassword;
        userDb.UserRoleId = selectedRoleId.Value;

        await context.SaveChangesAsync();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Utilizador editado com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });

        NavigationManager.NavigateTo("/manageUsers");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageUsers");
    }
}