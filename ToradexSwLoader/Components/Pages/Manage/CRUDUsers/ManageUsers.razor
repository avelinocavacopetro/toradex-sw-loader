@page "/manageUsers"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>@localizer["ManageUsers"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">@localizer["ManageUsers"]</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-50 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="@localizer["SearchUser"]"
                       style="border: 1px solid grey;"
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex justify-content-end gap-2">
                <button class="btn btn-color btn-lg py-2"
                        style="font-size: 1.25rem;"
                        @onclick="NavigateToAddUser">
                    <i class="bi bi-plus"></i> @localizer["New"]
                </button>
            </div>
        </div>

        <div class="card-body pb-2 px-0 mt-2">
            <div class="table-responsive border rounded-2">
                <QuickGrid Class="table table-striped m-0"
                           Items="@FilteredUsers.AsQueryable()"
                           ItemKey="@(pu => pu.Id)">

                    <!--- Coluna das opções --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="options-buttons-header">
                                @localizer["Options"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="options-buttons">
                                <div>
                                    <button class="btn btn-outline-success btn-sm py-1 px-2"
                                            title="Editar"
                                            @onclick="() => NavigateToEditUser(context.Id)"
                                            style="border-radius: 5px;">
                                        <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                    </button>
                                </div>
                                <div>
                                    <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                            title="Desativar"
                                            @onclick="() => DisableUser(context.Id)"
                                            style="border-radius: 5px;">
                                        <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                    </button>
                                </div>
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna dos nomes dos utilizadores --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Name"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                <span style="font-size: 1rem;">
                                    @context.UserName
                                </span>
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna dos emails dos utilizadores --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                Email
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                <span style="font-size: 1rem;">
                                    @context.Email
                                </span>
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da função dos utilizadores --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Function"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                <span class="badge bg-secondary py-2 px-3">@GetRoleName(context.UserRole?.Name ?? "")</span>
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da entidade associada --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["LinkedEntity"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @if (context.EntityId != null)
                                {
                                    <span style="font-size: 1rem;">
                                        @context.Entity?.Name
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted" style="font-size: 1rem;">@localizer["WithoutEntity"]</span>
                                }
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da lingua dos utilizadores --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Language"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @GetCultureName(context.Culture)
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>

                @if (!FilteredUsers.Any())
                {
                    <table class="table table-striped m-0">
                        <tbody>
                            <tr>
                                <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                    @localizer["NoData"]
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>

            <div class="d-flex justify-content-end mt-3 px-3">
                <p>
                    @(FilteredUsers.Count())
                    @(FilteredUsers.Count() > 1
                                    ? localizer["Users"]
                                    : localizer["User"])
                </p>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Object
    List<UserPetrotec> users = new();
    List<UserRole> roles = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(ManageUsers));

    IEnumerable<UserPetrotec> FilteredUsers =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? users
            : users.Where(u => u.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    // Variáveis: String
    string userName = string.Empty;

    string _searchTerm = string.Empty;
    string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
            }
        }
    }

    // Variáveis: Integer
    int? editingUserId = null; 
    int? selectedRoleId = null;

    // Variávies: Boolean
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            users = await context.Users
                .Where(u => u.Enabled)
                .Include(u => u.UserRole)
                .Include(u => u.Entity)
                .ToListAsync();

            roles = await context.Roles.ToListAsync();

            UpdatePage();

            _log.Info("Users loaded successfully.");
            isLoading = false;
        }
        catch (Exception ex)
        {
            _log.Error("Error loading users. ", ex);
            
            ToastService.ShowError($"{@localizer["Error"]}. {@localizer["ErrorLoading"]}");
        }
    }

    public string GetCultureName(string cultureCode)
    {
        return cultureCode switch
        {
            "pt-PT" => @localizer["Portuguese"],
            "es-ES" => @localizer["Spanish"],
            "en-US" => @localizer["English"],
            "fr-FR" => @localizer["French"],
            _ => cultureCode 
        };
    }

    string GetRoleName(string roleName)
    {
        return localizer[roleName];
    }

    void NavigateToAddUser()
    {
        NavigationManager.NavigateTo("/manageUsers/add");
    }

    void NavigateToEditUser(int id)
    {
        NavigationManager.NavigateTo($"/manageUsers/edit/{id}");
    }

    async Task DisableUser(int id)
    {
        try
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["WantContinue"],
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = @localizer["Continue"],
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = @localizer["Cancel"],
                CancelButtonColor = "#dc3545"
            });

            if (result.IsConfirmed)
            {
                isLoading = true;

                using var context = DbContextFactory.CreateDbContext();
                var userDb = await context.Users.FirstOrDefaultAsync(p => p.Id == id);

                if (userDb != null)
                {
                    userDb.Enabled = false;

                    await context.SaveChangesAsync();
                }

                users.RemoveAll(u => u.Id == id);

                ToastService.ShowSuccess(@localizer["UserDisableSuccess"]);

                isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _log.Error($"Error disabling user with ID {id}. ", ex);
            
            ToastService.ShowError($"{@localizer["Error"]}. {@localizer["TryAgain"]}");
            return;
        }
    }

    void UpdatePage()
    {
        InvokeAsync(StateHasChanged);
    }
}