@page "/manageUsers"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager


<PageTitle>Gerir Utilizadores</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="center-customization">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div class="w-50 position-relative">
                    <input type="text"
                           class="form-control py-2 ps-5"
                           placeholder="Pesquisar utilizador pelo nome..."
                           @bind="searchTerm"
                           @bind:event="oninput" />
                    <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
                </div>

                <div>
                    <button class="btn btn-color btn-lg py-2"
                            style="font-size: 1.25rem;"
                            @onclick="NavigateToAddUser">
                        + Novo
                    </button>
                </div>

            </div>

            <div class="pb-5">
                <table class="table mt-3 w-100">
                    <thead style="background-color: #0c6527; color: white;">
                        <tr>
                            <th style="width: 40%; text-align: left; padding-left: 20px;">Nome do Utilizador</th>
                            <th style="width: 40%; text-align: center;">User</th>
                            <th style="width: 25%; text-align: center;">Função</th>
                            <th style="width: 35%;"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in PaginatedUsers)
                        {
                            <tr class="table-light" style="height: 50px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px; font-weight: 500;">
                                    @user.UserName
                                </td>
                                <td style="text-align: center; vertical-align: middle; font-weight: 500;">
                                    @user.Email
                                </td>
                                <td class="text-center align-middle">
                                    @if (editingUserId == user.Id)
                                    {
                                        <select class="form-select form-select-sm mx-auto"
                                                @bind="selectedRoleId"
                                                style="width: 90%; max-width: 200px; height: 32px;">
                                            @foreach (var role in roles)
                                            {
                                                <option value="@role.Id" selected="@(role.Id == user.UserRole?.Id)">@role.Name</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary py-2 px-3">@user.UserRole?.Name</span>
                                    }
                                </td>
                                <td class="text-center align-middle">
                                    <div class="d-flex justify-content-center gap-2">
                                        <button class="btn btn-outline-success btn-sm py-1 px-2"
                                                title="Editar"
                                                @onclick="() => NavigateToEditUser(user.Id)"
                                                style="border-radius: 5px;">
                                            <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                                title="Desativar"
                                                @onclick="() => DisableUser(user.Id)"
                                                style="border-radius: 5px;">
                                            <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="d-flex justify-content-between align-items-center gap-3">
                    <span>@actualPage - @TotalPages de @TotalPages</span>
                    <div class="d-flex gap-2">
                        <button class="btn custom-outline-button btn-lg"
                                @onclick="PrevPage" disabled="@(!CanGoPrev)">
                            &lt;
                        </button>

                        <button class="btn custom-outline-button btn-lg"
                                @onclick="NextPage" disabled="@(!CanGoNext)">
                            &gt;
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    table {
        table-layout: fixed;
    }

    th, td {
        padding: 12px 15px;
    }

    .form-select-sm {
        margin: 0 auto;
    }

    .table-light td {
        background-color: #f8f9fa;
    }

    .table > :not(:first-child) {
        border-top: none;
    }
</style>

@code {
    private List<UserPetrotec> users = new List<UserPetrotec>();
    private List<UserPetrotec> paginatedUsers = new List<UserPetrotec>();
    private List<UserRole> roles = new List<UserRole>();
    private WindowDimension dimension = new WindowDimension();

    private string userName = string.Empty;

    private int actualPage = 1;
    private int usersPerPage = 5;
    private int TotalPages => (int)Math.Ceiling((double)FilteredUsers.Count() / usersPerPage);

    private int? editingUserId = null; 
    private int? selectedRoleId = null;

    private bool isLoading = true;
    private bool isEditing = false;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    private IEnumerable<UserPetrotec> FilteredUsers =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? users
        : users.Where(u => u.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<UserPetrotec> PaginatedUsers =>
    FilteredUsers
        .Skip((actualPage - 1) * usersPerPage)
        .Take(usersPerPage);

    private void OnDimensionsChanged(WindowDimension newDimension)
    {
        dimension = newDimension;

        UpdatePage();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        users = await context.Users
            .Where(u => u.Enabled)
            .Include(u => u.UserRole)
            .ToListAsync();

        roles = await context.Roles.ToListAsync();

        UpdatePage();

        isLoading = false;
    }

    private void NavigateToAddUser()
    {
        NavigationManager.NavigateTo("/manageUsers/add");
    }

    private void NavigateToEditUser(int id)
    {
        NavigationManager.NavigateTo($"/manageUsers/edit/{id}");
    }

    private async Task DisableUser(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Deseja desativar este utilizador?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Continuar",
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = "Cancelar"
        });

        if (result.IsConfirmed)
        {
            isLoading = true;

            using var context = DbContextFactory.CreateDbContext();
            var userDb = await context.Users.FirstOrDefaultAsync(p => p.Id == id);

            if (userDb != null)
            {
                userDb.Enabled = false;

                await context.SaveChangesAsync();
            }

            users.RemoveAll(u => u.Id == id);

            isLoading = false;
            StateHasChanged();
        }
    }

    // private void EditRole(UserPetrotec user)
    // {
    //     editingUserId = user.Id;
    //     selectedRoleId = user.UserRole?.Id ?? roles.FirstOrDefault()?.Id;
    // }

    // private async Task SaveRole(int userId)
    // {
    //     if (selectedRoleId == null)
    //         return;

    //     using var context = DbContextFactory.CreateDbContext();

    //     var user = await context.Users.FirstOrDefaultAsync(u => u.Id == userId);
    //     if (user != null)
    //     {
    //         user.UserRoleId = selectedRoleId.Value;
    //         await context.SaveChangesAsync();

    //         var localUser = users.FirstOrDefault(u => u.Id == userId);
    //         if (localUser != null)
    //         {
    //             localUser.UserRole = roles.FirstOrDefault(r => r.Id == selectedRoleId.Value);
    //         }

    //         editingUserId = null;
    //         selectedRoleId = null;

    //         await Swal.FireAsync(new SweetAlertOptions
    //          {
    //              Title = "Utilizador atualizado com sucesso!",
    //              Icon = SweetAlertIcon.Success,
    //              ConfirmButtonColor = "#0B5120"
    //          });
    //     }
    // }

    // private void CancelEdit()
    // {
    //     editingUserId = null;
    // }

    private void UpdatePage()
    {
        paginatedUsers = FilteredUsers
                                 .Skip((actualPage - 1) * usersPerPage)
                                 .Take(usersPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}