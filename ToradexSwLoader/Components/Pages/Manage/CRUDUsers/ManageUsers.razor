@page "/manageUsers"

@using log4net
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["ManageUsers"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">@localizer["ManageUsers"]s</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-50 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="@localizer["SearchUser"]"
                       style="border: 1px solid grey;"
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex justify-content-end gap-2">
                <button class="btn btn-color btn-lg py-2"
                        style="font-size: 1.25rem;"
                        @onclick="NavigateToAddUser">
                    <i class="bi bi-plus"></i> @localizer["New"]
                </button>
            </div>
        </div>

        <div class="pb-5">
            <table class="table mt-3 w-100" style="table-layout: fixed;">
                <thead style="background-color: #0c6527; color: white;">
                    <tr>
                        <th style="width: 40%; text-align: left; padding-left: 20px; border-top-left-radius: 5px;
                                                           border-right: 1px solid white;">@localizer["Name"]</th>
                        <th style="width: 40%; text-align: center; border-right: 1px solid white;">User</th>
                        <th style="width: 25%; text-align: center; border-right: 1px solid white;">@localizer["Language"]</th>
                        <th style="width: 25%; text-align: center; border-right: 1px solid white;">@localizer["Function"]</th>
                        <th style="width: 35%;"></th>
                        <th style="width: 35%; border-top-right-radius: 5px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (PaginatedUsers is null || !PaginatedUsers.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                                @localizer["NoData"]
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var user in PaginatedUsers)
                        {
                            <tr class="table-light" style="height: 50px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px;">
                                    @user.UserName
                                </td>
                                <td style="text-align: center; vertical-align: middle;">
                                    @user.Email
                                </td>
                                <td style="text-align: center; vertical-align: middle;">
                                    @GetCultureName(user.Culture)
                                </td>
                                <td class="text-center align-middle">
                                    @if (editingUserId == user.Id)
                                    {
                                        <select class="form-select form-select-sm mx-auto"
                                                @bind="selectedRoleId"
                                                style="width: 90%; max-width: 200px; height: 32px;">
                                            @foreach (var role in roles)
                                            {
                                                <option value="@role.Id" selected="@(role.Id == user.UserRole?.Id)">@GetRoleName(role.Name)</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary py-2 px-3">@GetRoleName(user.UserRole?.Name ?? "")</span>
                                    }
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-success btn-sm py-1 px-2"
                                            title="Editar"
                                            @onclick="() => NavigateToEditUser(user.Id)"
                                            style="border-radius: 5px;">
                                        <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                            title="Desativar"
                                            @onclick="() => DisableUser(user.Id)"
                                            style="border-radius: 5px;">
                                        <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>

        <div class="sticky-footer-right">
            <div class="d-flex justify-content-end align-items-center gap-3">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    table {
        table-layout: fixed;
    }

    th, td {
        padding: 12px 15px;
    }

    .form-select-sm {
        margin: 0 auto;
    }

    .table-light td {
        background-color: #f8f9fa;
    }

    .table > :not(:first-child) {
        border-top: none;
    }
</style>

@code {
    // Object Variables
    private List<UserPetrotec> users = new();
    private List<UserPetrotec> paginatedUsers = new();
    private List<UserRole> roles = new();
    private static readonly ILog log = LogManager.GetLogger(typeof(ManageUsers));

    private IEnumerable<UserPetrotec> FilteredUsers =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? users
        : users.Where(u => u.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<UserPetrotec> PaginatedUsers =>
    FilteredUsers
        .Skip((actualPage - 1) * usersPerPage)
        .Take(usersPerPage);

    // String Variables
    private string userName = string.Empty;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    // Integer Variables
    private int actualPage = 1;
    private int usersPerPage = 5;
    private int TotalPages => (int)Math.Ceiling((double)FilteredUsers.Count() / usersPerPage);
    private int? editingUserId = null; 
    private int? selectedRoleId = null;

    // Boolean Variables
    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            users = await context.Users
                .Where(u => u.Enabled)
                .Include(u => u.UserRole)
                .Include(u => u.Entity)
                .ToListAsync();

            roles = await context.Roles.ToListAsync();

            UpdatePage();

            log.Info("Users loaded successfully.");
            isLoading = false;
        }
        catch (Exception ex)
        {
            log.Error("Error loading users. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["ErrorLoading"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonText = "OK",
                ConfirmButtonColor = "#d33"
            });
        }
    }

    public string GetCultureName(string cultureCode)
    {
        return cultureCode switch
        {
            "pt-PT" => @localizer["Portuguese"],
            "es-ES" => @localizer["Spanish"],
            "en-US" => @localizer["English"],
            "fr-FR" => @localizer["French"],
            _ => cultureCode 
        };
    }

    private string GetRoleName(string roleName)
    {
        return localizer[roleName];
    }

    private void NavigateToAddUser()
    {
        NavigationManager.NavigateTo("/manageUsers/add");
    }

    private void NavigateToEditUser(int id)
    {
        NavigationManager.NavigateTo($"/manageUsers/edit/{id}");
    }

    private async Task DisableUser(int id)
    {
        try
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["WantContinue"],
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = @localizer["Continue"],
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = @localizer["Cancel"]
            });

            if (result.IsConfirmed)
            {
                isLoading = true;

                using var context = DbContextFactory.CreateDbContext();
                var userDb = await context.Users.FirstOrDefaultAsync(p => p.Id == id);

                if (userDb != null)
                {
                    userDb.Enabled = false;

                    await context.SaveChangesAsync();
                }

                users.RemoveAll(u => u.Id == id);

                isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            log.Error($"Error disabling user with ID {id}. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["TryAgain"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonText = "OK",
                ConfirmButtonColor = "#d33"
            });
            return;
        }
    }

    private void UpdatePage()
    {
        paginatedUsers = FilteredUsers
                                 .Skip((actualPage - 1) * usersPerPage)
                                 .Take(usersPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}