@page "/manageUsers/add"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>Adicionar Utilizador</PageTitle>

<div class="custom-container">
    <div class="page-title d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <i class="bi bi-card-list icon-align fs-3" style="padding-left: 10px;"></i>
            <h3 class="ms-2 mb-0">Adicionar Utilizador</h3>
        </div>

        <div class="d-flex gap-3">
            <button class="btn btn-outline-light border border-white border-2"
                    style="width: 100px;"
                    @onclick="Cancel">
                <i class="bi bi-arrow-left fs-5"></i>
            </button>
            <button class="btn btn-outline-light border border-white border-2 fs-5"
                    style="width: 150px;"
                    @onclick="SaveUser">
                <i class="bi bi-floppy"></i> Salvar
            </button>
        </div>
    </div>

    <div class="edit-form mt-4">
        <div class="d-flex align-items-center gap-3 mb-3">
            <label for="text" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Nome</label>
            <input type="text" 
                @bind="userName"
                class="form-control w-50 mx-auto" 
                style="font-size: 1.2rem; text-align: center; border: 1px solid grey" 
                maxlength="30"/>
        </div>

        <div class="d-flex align-items-center gap-3 mb-3">
            <label for="email" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Email</label>
            <input type="email"
                   @bind="userEmail"
                   class="form-control w-50 mx-auto"
                   style="font-size: 1.2rem; text-align: center; border: 1px solid grey" 
                   maxlength="50"/>
        </div>

        <div class="d-flex align-items-center gap-3 mb-3">
            <label for="password" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Palavra-passe</label>
            <input type="password" 
                @bind="userPassword" 
                class="form-control w-50 mx-auto" 
                style="font-size: 1.2rem; text-align: center; border: 1px solid grey" 
                maxlength="15"/>
        </div>

        <div class="d-flex align-items-center gap-3 mb-3">
            <label for="text" class="col-form-label" style="width: 150px; font-size: 1.25rem; font-weight: bold;">Função</label>
            <select class="form-select form-select-sm mx-auto w-50"
                    @bind="selectedRoleId"
                    style="height: 32px; font-size: 1.2rem;">
                <option value="">Selecione uma função</option>
                @foreach (var role in roles)
                {
                    <option value="@role.Id">@role.Name</option>
                }
            </select>
        </div>
    </div>
</div>

@code {
    private List<UserPetrotec> users = new List<UserPetrotec>();
    private List<UserRole> roles = new List<UserRole>();
    private string userName = string.Empty;
    private string userEmail = string.Empty;
    private string userPassword = string.Empty;
    private int? selectedRoleId = null;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        users = await context.Users
            .Include(u => u.UserRole)
            .ToListAsync();

        roles = await context.Roles.ToListAsync();
    }

    private async Task SaveUser()
    {
        if (string.IsNullOrWhiteSpace(userName) & string.IsNullOrWhiteSpace(userEmail) & string.IsNullOrWhiteSpace(userPassword))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor insira dados válidos!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        if (userName.Length > 30)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Nome muito comprido!",
                Text = "O nome de utilizador deve ter no máximo 30 caracteres.",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        if (userEmail.Length > 50)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Email muito comprido!",
                Text = "O email deve ter no máximo 50 caracteres.",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        if (userPassword.Length > 15)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Palavra-passe muito comprida!",
                Text = "A palavra-passe deve ter no máximo 15 caracteres.",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        using var context = DbContextFactory.CreateDbContext();

        bool exists = await context.Users.AnyAsync(u => u.Email.ToLower() == userEmail.ToLower());

        if (exists)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Este utilizador já existe!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        var newUser = new UserPetrotec
        {
            UserRoleId = selectedRoleId.Value,
            Enabled = true,
            UserName = userName,
            Email = userEmail,
            Password = userPassword
        };

        context.Users.Add(newUser);
        await context.SaveChangesAsync();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Utilizador adicionado com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });

        NavigationManager.NavigateTo("/manageUsers");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageUsers");
    }
}