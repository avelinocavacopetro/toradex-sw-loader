@page "/manageStacks/add"

@using log4net  
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>Adicionar Stack</PageTitle>

<div class="custom-container">
    <div class="page-title d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <i class="bi bi-card-list icon-align fs-3" style="padding-left: 10px;"></i>
            <h3 class="ms-2 mb-0">Adicionar Stack</h3>
        </div>

        <div class="d-flex gap-3">
            <button class="btn btn-outline-light border border-white border-2"
                    style="width: 100px;"
                    @onclick="Cancel">
                <i class="bi bi-arrow-left fs-5"></i>
            </button>
            <button class="btn btn-outline-light border border-white border-2 fs-5"
                    style="width: 150px;"
                    @onclick="SaveStack">
                <i class="bi bi-floppy"></i> Salvar
            </button>
        </div>
    </div>

    <div class="edit-form mt-4">
        <div class="d-flex align-items-center gap-3">
            <label for="text" class="mb-0" style="font-size: 1.5rem; flex-shrink: 0;">
                Nome da stack
                <span style="font-size: 15px;"> (máx. 50 caracteres)</span> :
            </label>
            <input type="text" @bind="stackName"
                   class="form-control"
                   style="font-size: 1.2rem; border: 1px solid grey;" 
                   maxlength="50"/>
        </div>

        <br />
        <h4>Selecionar Produto(s):</h4>

        <div class="table-wrapper">
            <table class="table mt-3 w-100" style="table-layout: fixed;">
                <thead style="background-color: #0c6527; color: white;">
                    <tr>
                        <th style="width: 50%; text-align: left; padding-left: 25px; border-right: 1px solid white;">Produto</th>
                        <th style="width: 50%; text-align: center;">Selecionar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in PaginatedProducts)
                    {
                        <tr class="table-light" style="height: 45px;">
                            <td style="text-align: left; vertical-align: middle; padding-left: 25px;">
                                @product.Name
                            </td>
                            <td class="text-center align-middle p-0">
                                <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                       id="toggle-@product.Id"
                                       @onchange="(e => ToggleProduct(e, product))"
                                       checked="@selectedProducts.Any(p => p.Id == product.Id)" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="sticky-footer-right">
                <div class="d-flex justify-content-end align-items-center gap-3">
                    <span>@currentProductPage - @TotalProductPages de @TotalProductPages</span>
                    <div class="d-flex gap-2">
                        <button class="btn custom-outline-button btn-lg"
                                @onclick="PrevProductPage" disabled="@(currentProductPage == 1)">
                            &lt;
                        </button>

                        <button class="btn custom-outline-button btn-lg"
                                @onclick="NextProductPage" disabled="@(currentProductPage == TotalProductPages)">
                            &gt;
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Object Variables
    private List<Product> selectedProducts = new List<Product>();
    private static readonly ILog log = LogManager.GetLogger(typeof(AddStack));

    private IEnumerable<Product> PaginatedProducts =>
    FilterService.SelectedProducts
        .Skip((currentProductPage - 1) * productsPerPage)
        .Take(productsPerPage);

    // String Variables
    private string stackName = string.Empty;

    // Integer Variables
    private int currentProductPage = 1;
    private int productsPerPage = 3;
    private int TotalProductPages => (int)Math.Ceiling((double)FilterService.SelectedProducts.Count / productsPerPage);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();
            selectedProducts = new List<Product>();
        }
        catch (Exception ex)
        {
            log.Error("Error loading products. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Erro ao carregar a página",
                Text = "Ocorreu um erro ao inicializar a página de adicionar stack.",
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            NavigationManager.NavigateTo("/error");
        }
    }

    private void ToggleProduct(ChangeEventArgs e, Product product)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedProducts.Any(p => p.Id == product.Id))
                selectedProducts.Add(product);
        }
        else
        {
            selectedProducts.RemoveAll(p => p.Id == product.Id);
        }
    }

    private async Task SaveStack()
    {
        try
        {
            if (!ValidateStack())
                return;

            if (!ValidateProductCount())
                return;

            using var context = DbContextFactory.CreateDbContext();

            if (await StackExistsAsync(context))
            {
                await ShowStackExistsAlert();
                return;
            }

            await AddStackAsync(context);
            await ShowSuccessAlert();
            NavigationManager.NavigateTo("/manageStacks");
        }
        catch (Exception ex)
        {
            log.Error("Error saving stack. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Erro ao salvar a stack",
                Text = "Ocorreu um erro ao tentar salvar a stack.",
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
    }

    private bool ValidateStack()
    {
        if (string.IsNullOrWhiteSpace(stackName))
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor insira um nome válido!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        if (stackName.Length > 50)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Nome muito comprido!",
                Text = "O nome da stack deve ter no máximo 50 caracteres.",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        return true;
    }

    private bool ValidateProductCount()
    {
        if (selectedProducts.Count < 1)
        {
           _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Deve selecionar pelo menos 1 produto!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        return true;
    }

    private async Task<bool> StackExistsAsync(AppDbContext context)
    {
        return await context.Stacks.AnyAsync(s => s.Name.ToLower() == stackName.Trim().ToLower());
    }

    private async Task ShowStackExistsAlert()
    {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Esta stack já existe!",
            Icon = SweetAlertIcon.Warning,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private async Task AddStackAsync(AppDbContext context)
    {
        var newStack = new Stack
        {
            Name = stackName,
            Enabled = true
        };

        context.Stacks.Add(newStack);
        await context.SaveChangesAsync();

        foreach (var product in selectedProducts)
        {
            context.ProductStacks.Add(new ProductStack
            {
                StackId = newStack.Id,
                ProductId = product.Id
            });
        }

        await context.SaveChangesAsync();
    }

    private async Task ShowSuccessAlert()
    {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Stack adicionada com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageStacks");
    }

    private void PrevProductPage()
    {
        if (currentProductPage > 1)
            currentProductPage--;
    }

    private void NextProductPage()
    {
        if (currentProductPage < TotalProductPages)
            currentProductPage++;
    }
}