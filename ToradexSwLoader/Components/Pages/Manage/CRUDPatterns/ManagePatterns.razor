@page "/managePatterns"

@using log4net
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resource> localizer

<PageTitle> @localizer["ManagePatterns"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden"> @localizer["Loading"]...</span>
            </div>
            <p class="mt-3"> @localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2"> @localizer["ManagePatterns"]</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-50 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder=" @localizer["SearchPattern"]"
                       style="border: 1px solid grey;"
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex justify-content-end gap-2">
                <button class="btn btn-color btn-lg py-2"
                        style="font-size: 1.25rem;"
                        @onclick="NavigateToAddPattern">
                    <i class="bi bi-plus"></i>  @localizer["New"]
                </button>
                <button class="btn btn-color btn-lg"
                        style="font-size: 1.25rem;"
                        @onclick="ApplyFilter">
                    <i class="bi bi-floppy"></i>  @localizer["Apply"]
                </button>
            </div>
        </div>

        <div class="pb-5">
            <table class="table mt-3 w-100" style="table-layout: fixed;">
                <thead style="background-color: #0c6527; color: white;">
                    <tr>
                        <th onclick="@(() => SortByColumn("NameContains"))"
                            style="width: 30%; text-align: left; padding-left: 20px; border-top-left-radius: 5px;
                                                           border-right: 1px solid white; cursor: pointer;">
                            @localizer["Name"]
                            <span style="font-size: 0.9rem; margin-left: 5px;
                                                                     color: @(currentSortColumn == "NameContains" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "NameContains" ? (isNameContainsAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th style="width: 30%; text-align: center; padding-left: 10px; border-right: 1px solid white;"> @localizer["Active"]</th>
                        <th style="width: 20%;"></th>
                        <th style="width: 20%; border-top-right-radius: 5px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (PaginatedPatterns is null || !PaginatedPatterns.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                                @localizer["NoData"]
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var pattern in PaginatedPatterns)
                        {
                            <tr class="table-light" style="height: 60px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px;">
                                    @pattern.NameContains
                                </td>
                                <td class="text-center align-middle p-0">
                                    <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                           id="toggle-@pattern.Id"
                                           @onchange="(e => TogglePattern(e, pattern))"
                                           checked="@selectedPatterns.Any(p => p.Id == pattern.Id)" />
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-success btn-sm py-1 px-2"
                                            title="Editar"
                                            @onclick="() => NavigateToEditPattern(pattern.Id)">
                                        <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                            title="Desativar"
                                            @onclick="() => DisablePattern(pattern.Id)">
                                        <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>

        <div class="sticky-footer-right">
            <div class="d-flex justify-content-end align-items-center gap-3">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Object Variables
    private List<Pattern> patterns = new();
    private List<Pattern> selectedPatterns = new();
    private List<Pattern> paginatedPatterns = new();
    private static readonly ILog log = LogManager.GetLogger(typeof(ManagePatterns));

    private IEnumerable<Pattern> FilteredPatterns
    {
        get
        {
            var filtered = string.IsNullOrWhiteSpace(searchTerm)
                ? patterns
                : patterns.Where(p => p.NameContains.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            if (currentSortColumn == "NameContains")
            {
                filtered = isNameContainsAscending
                    ? filtered.OrderBy(p => p.NameContains)
                    : filtered.OrderByDescending(p => p.NameContains);
            }

            return filtered;
        }
    }

    private IEnumerable<Pattern> PaginatedPatterns =>
    FilteredPatterns
        .Skip((actualPage - 1) * patternsPerPage)
        .Take(patternsPerPage);

    // String Variables
    private string currentSortColumn = "NameContains";

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    // Integer Variables
    private int actualPage = 1;
    private int patternsPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)FilteredPatterns.Count() / patternsPerPage);

    // Boolean Variables
    private bool isLoading = true;
    private bool isNameContainsAscending = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();

            using var context = DbContextFactory.CreateDbContext();
            patterns = await context.Patterns.Where(p => p.Enabled).ToListAsync();

            selectedPatterns = FilterService.SelectedPatterns
                .Select(sp => patterns.FirstOrDefault(p => p.Id == sp.Id))
                .Where(p => p != null)
                .ToList();

            UpdatePage();

            log.Info("Pattern loaded successfully.");
            isLoading = false;
        } 
        catch (Exception ex)
        {
            log.Error("Error loading patterns.  ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["ErrorLoading"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
    }

    private void TogglePattern(ChangeEventArgs e, Pattern pattern)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedPatterns.Any(p => p.Id == pattern.Id))
                selectedPatterns.Add(pattern);
        }
        else
        {
            selectedPatterns.RemoveAll(p => p.Id == pattern.Id);
        }
    }

    private void NavigateToAddPattern()
    {
        NavigationManager.NavigateTo("/managePatterns/add");
    }

    private void NavigateToEditPattern(int id)
    {
        NavigationManager.NavigateTo($"/managePatterns/edit/{id}");
    }

    private async Task ApplyFilter()
    {
        try
        {
            if (selectedPatterns.Count == 0)
            {
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = @localizer["PleaseSelectPattern"],
                    Icon = SweetAlertIcon.Warning,
                    ConfirmButtonColor = "#0B5120"
                });
                return;
            }

            await FilterService.ApplyPatternsFilter(
                new List<Pattern>(
                    selectedPatterns.Where(p => patterns.Any(a => a.Id == p.Id && a.Enabled))
                )
            );


            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["FiltersApplied"],
                Icon = SweetAlertIcon.Success,
                ConfirmButtonColor = "#0B5120"
            });
        } 
        catch (Exception ex)
        {
            log.Error("Error applying filter. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["TryAgain"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
    }

    private async Task DisablePattern(int id)
    {
        try
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["WantContinue"],
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = @localizer["Continue"],
                ConfirmButtonColor = "#0B5120",
                CancelButtonText = @localizer["Cancel"]
            });

            if (result.IsConfirmed)
            {
                isLoading = true;

                using var context = DbContextFactory.CreateDbContext();
                var patternDb = await context.Patterns.FirstOrDefaultAsync(d => d.Id == id);

                if (patternDb != null)
                {
                    patternDb.Enabled = false;
                    await context.SaveChangesAsync();
                }

                patterns.RemoveAll(d => d.Id == id);

                isLoading = false;
                StateHasChanged();
            }
        } 
        catch (Exception ex)
        {
            log.Error("Error disabling pattern. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["TryAgain"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
    }

    private void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isNameContainsAscending = !isNameContainsAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isNameContainsAscending = true;
        }

        actualPage = 1;
    }

    private void UpdatePage()
    {
        paginatedPatterns = FilteredPatterns
                                 .Skip((actualPage - 1) * patternsPerPage)
                                 .Take(patternsPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoNext)
        {
            actualPage--;
            UpdatePage();
        }
    }
}