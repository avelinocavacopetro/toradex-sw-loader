@page "/managePatterns"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>Gerir Patterns</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-50">
                <input type="text" class="form-control" placeholder="Pesquisar pattern pelo nome..."
                       @bind="searchTerm" @bind:event="oninput" />
            </div>

            <div class="d-flex justify-content-between align-items-center gap-3">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>

        <div class="pb-2 pt-4" style="text-align: right;">
            <button class="btn btn-color btn-lg"
                    style="font-size: 2rem; width: 50px; height: 50px; padding: 0;"
                    @onclick="NavigateToAddPattern">
                +
            </button>
        </div>

        <div class="pb-5">
            <table class="table mt-3 w-100" style="table-layout: fixed;">
                <thead style="background-color: #0c6527; color: white;">
                    <tr>
                        <th style="width: 30%; text-align: left; padding-left: 20px;">Nome da Pattern</th>
                        <th style="width: 30%; text-align: center; padding-left: 10px;">Ativo</th>
                        <th style="width: 20%;"></th>
                        <th style="width: 20%;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pattern in PaginatedPatterns)
                    {
                        <tr class="table-light" style="height: 60px;">
                            <td style="text-align: left; vertical-align: middle; padding-left: 20px; font-weight: 500;">
                                @pattern.NameContains
                            </td>
                            <td class="text-center align-middle p-0">
                                <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                       id="toggle-@pattern.Id"
                                       @onchange="(e => TogglePattern(e, pattern))"
                                       checked="@selectedPatterns.Any(p => p.Id == pattern.Id)" />
                            </td>
                            <td class="text-center align-middle">
                                <button class="btn btn-outline-success btn-sm py-1 px-2"
                                        title="Editar"
                                        @onclick="() => NavigateToEditPattern(pattern.Id)">
                                    <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                </button>
                            </td>
                            <td class="text-center align-middle">
                                <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                        title="Desativar"
                                        @onclick="() => DisablePattern(pattern.Id)">
                                    <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="text-center fixed-bottom pb-4">
            <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="ApplyFilter">Aplicar</button>
        </div>
    </div>
}

@code {
    private List<Pattern> patterns = new List<Pattern>();
    private List<Pattern> selectedPatterns = new List<Pattern>();
    private List<Pattern> paginatedPatterns = new List<Pattern>();
    // private Pattern? selectedPattern = new Pattern();
    // private WindowDimension dimension = new WindowDimension();

    // private string pattern = string.Empty;

    private string currentSortColumn = "NameContains";

    // private int onlineTime = 1;
    private int actualPage = 1;
    private int patternsPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)FilteredPatterns.Count() / patternsPerPage);

    private bool isLoading = true;
    private bool isNameContainsAscending = true;
    // private bool isAdding = false;
    // private bool isEditing = false;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    private IEnumerable<Pattern> FilteredPatterns
    {
        get
        {
            var filtered = string.IsNullOrWhiteSpace(searchTerm)
                ? patterns
                : patterns.Where(p => p.NameContains.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            if (currentSortColumn == "NameContains")
            {
                filtered = isNameContainsAscending
                    ? filtered.OrderBy(p => p.NameContains)
                    : filtered.OrderByDescending(p => p.NameContains);
            }

            return filtered;
        }
    }

    private IEnumerable<Pattern> PaginatedPatterns =>
    FilteredPatterns
        .Skip((actualPage - 1) * patternsPerPage)
        .Take(patternsPerPage);

    // private void OnDimensionsChanged(WindowDimension newDimension)
    // {
    //     dimension = newDimension;

    //     UpdatePage();
    //     StateHasChanged();
    // }

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();
        patterns = await context.Patterns.Where(p => p.Enabled).ToListAsync();

        selectedPatterns = FilterService.SelectedPatterns;
        // onlineTime = FilterService.OnlineTime;

        UpdatePage();
        isLoading = false;
    }

    private void TogglePattern(ChangeEventArgs e, Pattern pattern)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedPatterns.Any(p => p.Id == pattern.Id))
                selectedPatterns.Add(pattern);
        }
        else
        {
            selectedPatterns.RemoveAll(p => p.Id == pattern.Id);
        }
    }

    private void NavigateToAddPattern()
    {
        NavigationManager.NavigateTo("/managePatterns/add");
    }

    private void NavigateToEditPattern(int id)
    {
        NavigationManager.NavigateTo($"/managePatterns/edit/{id}");
    }

    // private void AddPattern()
    // {
    //     pattern = string.Empty;
    //     selectedPattern = null;
    //     isAdding = true;
    //     isEditing = false;
    // }

    // private async Task EditPattern(int id)
    // {
    //     isEditing = true;
    //     isAdding = false;

    //     using var context = DbContextFactory.CreateDbContext();
    //     selectedPattern = await context.Patterns.FirstOrDefaultAsync(d => d.Id == id);

    //     if (selectedPattern != null)
    //     {
    //         pattern = selectedPattern.NameContains;
    //     }
    // }

    // private async Task EditPattern()
    // {
    //     if (selectedPattern == null) return;

    //     using var context = DbContextFactory.CreateDbContext();

    //     var patternDb = await context.Patterns.FirstOrDefaultAsync(p => p.Id == selectedPattern.Id);
    //     if (patternDb == null) return;

    //     patternDb.NameContains = pattern;

    //     await context.SaveChangesAsync();

    //     var localPattern = patterns.FirstOrDefault(p => p.Id == patternDb.Id);
    //     if (localPattern != null)
    //     {
    //         localPattern.NameContains = patternDb.NameContains;
    //     }

    //     CancelEdit();

    //     await Swal.FireAsync(new SweetAlertOptions
    //     {
    //         Title = "Pattern editada com sucesso!",
    //         Icon = SweetAlertIcon.Success,
    //         ConfirmButtonColor = "#0B5120"
    //     });
    // }

    private async Task ApplyFilter()
    {
        if (selectedPatterns.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos uma pattern!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        await FilterService.ApplyPatternsFilter(new List<Pattern>(selectedPatterns));

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Filtros aplicados com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    // private async Task SavePattern()
    // {
    //     if (string.IsNullOrWhiteSpace(pattern))
    //     {
    //         await Swal.FireAsync(new SweetAlertOptions
    //         {
    //             Title = "Por favor insira um nome válido!",
    //             Icon = SweetAlertIcon.Warning,
    //             ConfirmButtonColor = "#0B5120"
    //         });
    //         return;
    //     }

    //     using var context = DbContextFactory.CreateDbContext();

    //     bool exists = await context.Patterns.AnyAsync(p => p.NameContains.ToLower() == pattern.Trim().ToLower());

    //     if (exists)
    //     {
    //         await Swal.FireAsync(new SweetAlertOptions
    //         {
    //             Title = "Esta pattern já existe!",
    //             Icon = SweetAlertIcon.Warning,
    //             ConfirmButtonColor = "#0B5120"
    //         });
    //         return;
    //     }

    //     var newPattern = new Pattern
    //     {
    //         NameContains = pattern,
    //         Enabled = true
    //     };

    //     context.Patterns.Add(newPattern);
    //     await context.SaveChangesAsync();

    //     patterns.Add(newPattern);

    //     CancelAdd();

    //     await Swal.FireAsync(new SweetAlertOptions
    //     {
    //         Title = "Pattern adicionada com sucesso!",
    //         Icon = SweetAlertIcon.Success,
    //         ConfirmButtonColor = "#0B5120"
    //     });
    // }

    // private void CancelAdd()
    // {
    //     isAdding = false;
    //     pattern = string.Empty;
    //     selectedPattern = null;
    // }

    // private void CancelEdit()
    // {
    //     isEditing = false;
    //     pattern = string.Empty;
    //     selectedPattern = null;
    // }

    private async Task DisablePattern(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Deseja apagar esta pattern?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Continuar",
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = "Cancelar"
        });

        if (result.IsConfirmed)
        {
            isLoading = true;

            using var context = DbContextFactory.CreateDbContext();
            var patternDb = await context.Patterns.FirstOrDefaultAsync(d => d.Id == id);

            if (patternDb != null)
            {
                patternDb.Enabled = false;
                await context.SaveChangesAsync();
            }

            patterns.RemoveAll(d => d.Id == id);

            isLoading = false;
            StateHasChanged();
        }
    }

    private void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isNameContainsAscending = !isNameContainsAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isNameContainsAscending = true;
        }

        actualPage = 1;
    }

    private void UpdatePage()
    {
        paginatedPatterns = FilteredPatterns
                                 .Skip((actualPage - 1) * patternsPerPage)
                                 .Take(patternsPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoNext)
        {
            actualPage--;
            UpdatePage();
        }
    }
}