@page "/manageProducts/edit/{ProductId:int}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject FilterService FilterService
@inject NavigationManager NavigationManager

<PageTitle>@localizer["EditProduct"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="bi bi-card-list icon-align fs-3" style="padding-left: 10px;"></i>
                <h3 class="ms-2 mb-0">@localizer["EditProduct"]</h3>
            </div>

            <div class="d-flex gap-3">
                <button class="btn btn-outline-light border border-white border-2"
                        style="width: 100px;"
                        @onclick="Cancel">
                    <i class="bi bi-arrow-left fs-5"></i>
                </button>
                <button class="btn btn-outline-light border border-white border-2 fs-5"
                        style="width: 150px;"
                        @onclick="SaveChanges">
                    <i class="bi bi-floppy"></i> @localizer["Save"]
                </button>
            </div>
        </div>

        <div class="edit-form mt-4">
            <div class="d-flex align-items-center gap-3">
                <label for="text" class="mb-0" style="font-size: 1.5rem; flex-shrink: 0;">
                    @localizer["Name"]
                    <span style="font-size: 15px;"> (@localizer["Max"]. 30 @localizer["Characters"])</span> :
                </label>
                <input type="text" @bind="productName"
                       class="form-control"
                       style="font-size: 1.2rem; border: 1px solid grey;" 
                       maxlength="30"/>
            </div>

            <br />
            <h4>@localizer["SelectDevices"]</h4>

            <div class="w-50">
                <input type="text" class="form-control" style="border: 1px solid grey;"
                       placeholder="Pesquisar dispositivo pelo nome..."
                       @bind="searchTerm" @bind:event="oninput" />
            </div>

            <div class="card-body pb-2 px-0 mb-0 mt-3">
                <div class="table-add-edit-responsive border rounded-2">
                    <QuickGrid Class="table table-striped m-0"
                               Items="@FilteredDevices.AsQueryable()"
                               ItemKey="@(pd => pd.Id)">

                        <!--- Coluna dos nomes dos dispositivos --->
                        <TemplateColumn>
                            <HeaderTemplate>
                                <div class="header-table-left">
                                    @localizer["Device"]
                                </div>
                            </HeaderTemplate>
                            <ChildContent>
                                <div class="body-table-left">
                                    @context.Name
                                </div>
                            </ChildContent>
                        </TemplateColumn>

                        <!--- Coluna do estado (Selecionado ou não) --->
                        <TemplateColumn>
                            <HeaderTemplate>
                                <div class="header-table-center">
                                    @localizer["Select"]
                                </div>
                            </HeaderTemplate>
                            <ChildContent>
                                <div class="body-table-center">
                                    <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                           id="toggle-@context.Id"
                                           @onchange="(e => ToggleDevice(e, context))"
                                           checked="@selectedDevices.Any(d => d.Id == context.Id)" />
                                </div>
                            </ChildContent>
                        </TemplateColumn>
                    </QuickGrid>

                    @if (!FilteredDevices.Any())
                    {
                        <table class="table table-striped m-0">
                            <tbody>
                                <tr>
                                    <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                        @localizer["NoData"]
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    }
                </div>

                <div class="d-flex justify-content-end mt-3 px-3">
                    <p>@FilteredDevices.Count() @localizer["Device"]&#40s&#41</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Parameters
    [Parameter]
    public int ProductId { get; set; }

    // Variáveis: Object
    List<Device> selectedDevices = new();
    List<Device> devices = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(EditProduct));

    IEnumerable<Device> FilteredDevices =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? devices
            : devices.Where(f => f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    // Variáveis: Integer
    const int NameLength = 30;

    // Variáveis: String
    string productName = string.Empty;
    string _searchTerm = string.Empty;
    string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
            }
        }
    }

    // Variáveis: Boolean
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();
            devices = FilterService.SelectedDevices;

            using var context = DbContextFactory.CreateDbContext();
            var product = await context.Products.FirstOrDefaultAsync(p => p.Id == ProductId);

            if (product != null)
            {
                productName = product.Name;

                selectedDevices = await context.DeviceProducts
                    .Where(dp => dp.ProductId == ProductId)
                    .Select(dp => dp.Device!)
                    .ToListAsync();
            }

            isLoading = false;
        }
        catch (Exception ex)
        {
            _log.Error("Error loading product. ", ex);
            
            ToastService.ShowError($"{@localizer["Error"]}. {@localizer["TryAgain"]}");
            NavigationManager.NavigateTo("/manageProducts");
        }
    }

    void ToggleDevice(ChangeEventArgs e, Device device)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedDevices.Any(d => d.Id == device.Id))
                selectedDevices.Add(device);
        }
        else
        {
            selectedDevices.RemoveAll(d => d.Id == device.Id);
        }
    }

    async Task SaveChanges()
    {
        try
        {
            if (!ValidateProduct())
                return;

            if (!ValidateDeviceCount())
                return;

            using var context = DbContextFactory.CreateDbContext();

            await ChangeProduct(context);
            
            ToastService.ShowSuccess(@localizer["EditedSuccess"]);

            NavigationManager.NavigateTo("/manageProducts");
        }
        catch (Exception ex)
        {
            _log.Error("Error saving changes. ", ex);
            
            ToastService.ShowError($"{@localizer["ErrorSavingProduct"]}. {@localizer["TryAgain"]}");
            return;
        }
    }

    bool ValidateProduct()
    {
        if (string.IsNullOrWhiteSpace(productName))
        {
            ToastService.ShowWarning(@localizer["ValidName"]);
            return false;
        }

        if (productName.Length > NameLength)
        {
            ToastService.ShowWarning($"{@localizer["LongName"]}. {@localizer["Max30"]}");
            return false;
        }

        return true;
    }

    bool ValidateDeviceCount()
    {
        if (selectedDevices.Count < 1)
        {
            ToastService.ShowWarning(@localizer["PleaseSelectDevice"]);
            return false;
        }

        return true;
    }

    async Task ChangeProduct(AppDbContext context)
    {
        var productDb = await context.Products.FirstOrDefaultAsync(p => p.Id == ProductId);
        if (productDb == null) return;

        productDb.Name = productName;

        var oldDeviceProducts = context.DeviceProducts.Where(dp => dp.ProductId == productDb.Id);
        context.DeviceProducts.RemoveRange(oldDeviceProducts);

        foreach (var device in selectedDevices)
        {
            context.DeviceProducts.Add(new DeviceProduct
            {
                ProductId = productDb.Id,
                DeviceId = device.Id
            });
        }

        await context.SaveChangesAsync();
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/manageProducts");
    }
}