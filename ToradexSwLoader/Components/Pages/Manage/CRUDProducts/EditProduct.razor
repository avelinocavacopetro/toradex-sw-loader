@page "/manageProducts/edit/{ProductId:int}"

@using log4net
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["EditProduct"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="bi bi-card-list icon-align fs-3" style="padding-left: 10px;"></i>
                <h3 class="ms-2 mb-0">@localizer["EditProduct"]</h3>
            </div>

            <div class="d-flex gap-3">
                <button class="btn btn-outline-light border border-white border-2"
                        style="width: 100px;"
                        @onclick="Cancel">
                    <i class="bi bi-arrow-left fs-5"></i>
                </button>
                <button class="btn btn-outline-light border border-white border-2 fs-5"
                        style="width: 150px;"
                        @onclick="SaveChanges">
                    <i class="bi bi-floppy"></i> @localizer["Save"]
                </button>
            </div>
        </div>

        <div class="edit-form mt-4">
            <div class="d-flex align-items-center gap-3">
                <label for="text" class="mb-0" style="font-size: 1.5rem; flex-shrink: 0;">
                    @localizer["Name"]
                    <span style="font-size: 15px;"> (@localizer["Max"]. 30 @localizer["Characters"])</span> :
                </label>
                <input type="text" @bind="productName"
                       class="form-control"
                       style="font-size: 1.2rem; border: 1px solid grey;" 
                       maxlength="30"/>
            </div>

            <br />
            <h4>@localizer["SelectDevices"]</h4>

            <div class="table-wrapper">
                <table class="table mt-3 w-100" style="table-layout: fixed;">
                    <thead style="background-color: #0c6527; color: white;">
                        <tr>
                            <th style="width: 50%; text-align: left; padding-left: 20px; border-top-left-radius: 5px;
                                                       border-right: 1px solid white">@localizer["Device"]</th>
                            <th style="width: 50%; text-align: center; border-top-right-radius: 5px;">@localizer["Select"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var device in PaginatedDevices)
                        {
                            <tr class="table-light" style="height: 60px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px;">
                                    @device.Name
                                </td>
                                <td class="text-center align-middle p-0">
                                    <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                           id="toggle-@device.Id"
                                           @onchange="(e => ToggleDevice(e, device))"
                                           checked="@selectedDevices.Any(d => d.Id == device.Id)" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="sticky-footer-right">
                    <div class="d-flex justify-content-end align-items-center gap-3">
                        <span>@currentDevicePage - @TotalDevicePages de @TotalDevicePages</span>
                        <div class="d-flex gap-2">
                            <button class="btn custom-outline-button btn-lg"
                                    @onclick="PrevDevicePage" disabled="@(currentDevicePage == 1)">
                                &lt;
                            </button>

                            <button class="btn custom-outline-button btn-lg"
                                    @onclick="NextDevicePage" disabled="@(currentDevicePage == TotalDevicePages)">
                                &gt;
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Parameters
    [Parameter]
    public int ProductId { get; set; }

    // Object Variables
    private List<Device> selectedDevices = new();
    private static readonly ILog log = LogManager.GetLogger(typeof(EditProduct));

    private IEnumerable<Device> PaginatedDevices =>
        FilterService.SelectedDevices
            .Skip((currentDevicePage - 1) * devicesPerPage)
            .Take(devicesPerPage);

    // String Variables
    private string productName = string.Empty;

    // Boolean Variables
    private bool isLoading = true;

    // Integer Variables
    private int currentDevicePage = 1;
    private int devicesPerPage = 3;
    private int TotalDevicePages => (int)Math.Ceiling((double)FilterService.SelectedDevices.Count / devicesPerPage);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();

            using var context = DbContextFactory.CreateDbContext();
            var product = await context.Products.FirstOrDefaultAsync(p => p.Id == ProductId);

            if (product != null)
            {
                productName = product.Name;

                selectedDevices = await context.DeviceProducts
                    .Where(dp => dp.ProductId == ProductId)
                    .Select(dp => dp.Device!)
                    .ToListAsync();
            }

            isLoading = false;
        }
        catch (Exception ex)
        {
            log.Error("Error loading product. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["TryAgain"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            NavigationManager.NavigateTo("/manageProducts");
        }
    }

    private void ToggleDevice(ChangeEventArgs e, Device device)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedDevices.Any(d => d.Id == device.Id))
                selectedDevices.Add(device);
        }
        else
        {
            selectedDevices.RemoveAll(d => d.Id == device.Id);
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            if (!ValidateProduct())
                return;

            if (!ValidateDeviceCount())
                return;

            using var context = DbContextFactory.CreateDbContext();

            await ChangeProduct(context);
            await ShowSuccessAlert();
            NavigationManager.NavigateTo("/manageProducts");
        }
        catch (Exception ex)
        {
            log.Error("Error saving changes. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["ErrorSavingProduct"],
                Text = @localizer["TryAgain"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
    }

    private bool ValidateProduct()
    {
        if (string.IsNullOrWhiteSpace(productName))
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["ValidName"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        if (productName.Length > 30)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["LongName"],
                Text = @localizer["Max30"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        return true;
    }

    private bool ValidateDeviceCount()
    {
        if (selectedDevices.Count < 1)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["PleaseSelectDevice"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        return true;
    }

    private async Task ChangeProduct(AppDbContext context)
    {
        var productDb = await context.Products.FirstOrDefaultAsync(p => p.Id == ProductId);
        if (productDb == null) return;

        productDb.Name = productName;

        var oldDeviceProducts = context.DeviceProducts.Where(dp => dp.ProductId == productDb.Id);
        context.DeviceProducts.RemoveRange(oldDeviceProducts);

        foreach (var device in selectedDevices)
        {
            context.DeviceProducts.Add(new DeviceProduct
            {
                ProductId = productDb.Id,
                DeviceId = device.Id
            });
        }

        await context.SaveChangesAsync();
    }

    private async Task ShowSuccessAlert()
    {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = @localizer["AddedSuccess"],
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageProducts");
    }

    private void PrevDevicePage()
    {
        if (currentDevicePage > 1)
            currentDevicePage--;
    }

    private void NextDevicePage()
    {
        if (currentDevicePage < TotalDevicePages)
            currentDevicePage++;
    }
}