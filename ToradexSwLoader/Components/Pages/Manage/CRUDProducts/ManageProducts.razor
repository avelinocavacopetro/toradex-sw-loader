@page "/manageProducts"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>Gerir Produtos</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">Gerir Produtos</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-50 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="Pesquisar produto pelo nome..."
                       style="border: 1px solid grey;"
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex justify-content-end gap-2">
                <button class="btn btn-color btn-lg py-2"
                        style="font-size: 1.25rem;"
                        @onclick="NavigateToAddProduct">
                    <i class="bi bi-plus"></i> Novo
                </button>
                <button class="btn btn-color btn-lg"
                        style="font-size: 1.25rem;"
                        @onclick="ApplyFilter">
                    <i class="bi bi-floppy"></i> Aplicar
                </button>
            </div>
        </div>

        <div class="pb-5">
            <table class="table mt-3 w-100" style="table-layout: fixed;">
                <thead style="background-color: #0c6527; color: white;">
                    <tr>
                        <th onclick="@(() => SortByColumn("Name"))"
                            style="width: 30%; text-align: left; padding-left: 20px; border-top-left-radius: 5px;
                                                   border-right: 1px solid white; cursor: pointer;">
                            Nome do Produto
                            <span style="font-size: 0.9rem; margin-left: 5px;
                                                         color: @(currentSortColumn == "Name" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "Name" ? (isNameAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>

                        <th style="width: 30%; text-align: center; padding-left: 10px; border-right: 1px solid white;">Dispositivos Associados</th>
                        <th style="width: 15%; text-align: center; border-right: 1px solid white;">Ativo</th>
                        <th style="width: 12.5%;"></th>
                        <th style="width: 12.5%; border-top-right-radius: 5px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (PaginatedProducts is null || !PaginatedProducts.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                                Sem dados disponíveis
                            </td>
                        </tr>
                    }
                    else
                    {
                        foreach (var product in PaginatedProducts)
                        {
                            <tr class="table-light" style="height: 60px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px;">
                                    @product.Name
                                </td>
                                <td style="text-align: center; padding-left: 10px; vertical-align: middle;">
                                    @if (product.DeviceProducts?.Any() == true)
                                    {
                                        <ul class="mb-0 ps-3">
                                            @foreach (var dp in product.DeviceProducts)
                                            {
                                                <li style="list-style-type: none;">@dp.Device?.Name</li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <span class="text-muted" style="font-size:18px;">Sem Dispositivos</span>
                                    }
                                </td>
                                <td class="text-center align-middle p-0">
                                    <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                           id="toggle-@product.Id"
                                           @onchange="(e => ToggleProduct(e, product))"
                                           checked="@selectedProducts.Any(p => p.Id == product.Id)"
                                           style="border-radius: 5px;" />
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-success btn-sm py-1 px-2"
                                            title="Editar"
                                            @onclick="() => NavigateToEditProduct(product.Id)"
                                            style="border-radius: 5px;">
                                        <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                            title="Desativar"
                                            @onclick="() => DisableProduct(product.Id)"
                                            style="border-radius: 5px;">
                                        <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>

        <div class="sticky-footer-right">
            <div class="d-flex justify-content-end align-items-center gap-3">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Product> products = new List<Product>();
    private List<Product> selectedProducts = new List<Product>();
    private List<Product> paginatedProducts = new List<Product>();

    private string currentSortColumn = "Name";

    private int actualPage = 1;
    private int productsPerPage = 5;
    private int TotalPages => (int)Math.Ceiling((double)FilteredProducts.Count() / productsPerPage);

    private bool isLoading = true;
    private bool isNameAscending = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    private IEnumerable<Product> FilteredProducts
    {
        get
        {
            var filtered = string.IsNullOrWhiteSpace(searchTerm)
                ? products
                : products.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            if (currentSortColumn == "Name")
            {
                filtered = isNameAscending
                    ? filtered.OrderBy(p => p.Name)
                    : filtered.OrderByDescending(p => p.Name);
            }

            return filtered;
        }
    }

    private IEnumerable<Product> PaginatedProducts =>
        FilteredProducts
            .Skip((actualPage - 1) * productsPerPage)
            .Take(productsPerPage);

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();

        var filteredDevicesIds = FilterService.SelectedDevices.Select(d => d.Id).ToHashSet();

        products = await context.Products
            .Where(p => p.Enabled)
            .Include(p => p.DeviceProducts)
            .ThenInclude(dp => dp.Device)
            .OrderBy(p => p.Name)
            .ToListAsync();

        foreach (var product in products)
        {
            product.DeviceProducts = product.DeviceProducts
                .Where(dp => dp.Device != null && filteredDevicesIds.Contains(dp.Device.Id))
                .ToList();
        }

        selectedProducts = FilterService.SelectedProducts;

        UpdatePage();

        isLoading = false;
    }

    private void ToggleProduct(ChangeEventArgs e, Product product)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedProducts.Any(p => p.Id == product.Id))
                selectedProducts.Add(product);
        }
        else
        {
            selectedProducts.RemoveAll(p => p.Id == product.Id);
        }
    }

    private void NavigateToAddProduct()
    {
        NavigationManager.NavigateTo("/manageProducts/add");
    }

    private void NavigateToEditProduct(int id)
    {
        NavigationManager.NavigateTo($"/manageProducts/edit/{id}");
    }

    private async Task ApplyFilter()
    {
        if (selectedProducts.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos um produto!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
        else
        {
            await FilterService.ApplyProductsFilter(new List<Product>(selectedProducts));

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Filtros aplicados com sucesso!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonColor = "#0B5120"
            });
        }
    }

    private async Task DisableProduct(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Deseja desativar este produto?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Continuar",
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = "Cancelar"
        });

        if (result.IsConfirmed)
        {
            isLoading = true;

            using var context = DbContextFactory.CreateDbContext();
            var productDb = await context.Products.FirstOrDefaultAsync(p => p.Id == id);

            if (productDb != null)
            {
                productDb.Enabled = false;

                var relations = await context.ProductStacks
                    .Where(ps => ps.ProductId == id)
                    .ToListAsync();

                context.ProductStacks.RemoveRange(relations);

                await context.SaveChangesAsync();
            }

            products.RemoveAll(p => p.Id == id);

            FilterService.SelectedProducts.RemoveAll(p => p.Id == id);
            await FilterService.SaveFilterAsync();

            isLoading = false;
            StateHasChanged();
        }
    }

    private void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isNameAscending = !isNameAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isNameAscending = true;
        }

        actualPage = 1;
    }

    private void UpdatePage()
    {
        paginatedProducts = FilteredProducts
                                 .Skip((actualPage - 1) * productsPerPage)
                                 .Take(productsPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}