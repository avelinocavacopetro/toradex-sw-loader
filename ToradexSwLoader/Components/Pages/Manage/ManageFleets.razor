@page "/manageFleets"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject TorizonService TorizonService
@inject FleetService FleetService
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Gerir Frotas</PageTitle>

@if(isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
} 
else
{
    <div class="d-flex justify-content-between align-items-center mt-4">
        <div class="w-50"> 
            <input type="text" class="form-control" placeholder="Pesquisar frota pelo nome..."
                   @bind="searchTerm" @bind:event="oninput" />
        </div>

        <div class="d-flex justify-content-between align-items-center gap-3">
            <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
        </div>
    </div>

    <div class="d-flex justify-content-center align-items-center">
        <table class="table mt-5 w-100" style="table-layout: fixed;">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th style="width: 70%; text-align: left; padding-left: 20px;">Nome</th>
                    <th style="width: 30%; text-align: center;">Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var fleet in PaginatedFleets)
                {
                    <tr class="table-light" style="height: 50px;">
                        <td style="text-align: left; vertical-align: middle; padding-left: 20px; font-weight: 500;">
                            @fleet.Name
                        </td>
                        <td class="text-center align-middle p-0">
                            <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                   id="toggle-@fleet.Id"
                                   @onchange="(e => ToggleFleet(e, fleet))"
                                   checked="@selectedFleets.Any(f => f.Id == fleet.Id)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    <div class="text-center fixed-bottom pb-4">
        <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="SaveFleetFilter">Aplicar</button>
    </div>
}

@code {
    private List<Fleet> fleets = new List<Fleet>();
    private List<Fleet> paginatedFleets = new List<Fleet>();
    private List<Fleet> selectedFleets = new List<Fleet>();
    private WindowDimension? dimension;

    private int actualPage = 1;
    private int fleetsPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)FilteredFleets.Count() / fleetsPerPage);

    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;
    
    private IEnumerable<Fleet> FilteredFleets =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? fleets
        : fleets.Where(f => f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<Fleet> PaginatedFleets =>
    FilteredFleets
        .Skip((actualPage - 1) * fleetsPerPage)
        .Take(fleetsPerPage);

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // await FilterService.LoadFilterAsync();

        // var fleetsUrl = "https://app.torizon.io/api/v2beta/fleets";

        // bool authOk = await TorizonService.AuthenticateAsync();
        // if (authOk)
        // {
        //     fleets = await TorizonService.GetItemsAsync<Fleet>(fleetsUrl) ?? new List<Fleet>();
        // }

        // selectedFleets = new List<Fleet>(FilterService.SelectedFleets);

        // isLoading = false;

        // UpdatePage();

        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();
        fleets = await context.Fleets.ToListAsync();

        selectedFleets = new List<Fleet>(FilterService.SelectedFleets);

        isLoading = false;
    }

    private void ToggleFleet(ChangeEventArgs e, Fleet fleet)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedFleets.Any(f => f.Id == fleet.Id))
                selectedFleets.Add(fleet);
        }
        else
        {
            selectedFleets.RemoveAll(f => f.Id == fleet.Id);
        }
    }

    private void OnDimensionsChanged(WindowDimension newDimension)
    {
        dimension = newDimension;

        UpdatePage();
        StateHasChanged();
    }

    private async Task SaveFleetFilter()
    {
        if (selectedFleets.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos uma frota!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
        else
        {
            await FilterService.ApplyFleetFilter(new List<Fleet>(selectedFleets));

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Filtros aplicados com sucesso!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonColor = "#0B5120"
            });
        }
    }

    private void UpdatePage()
    {
        paginatedFleets = fleets
                                 .Skip((actualPage - 1) * fleetsPerPage)
                                 .Take(fleetsPerPage)
                                 .ToList();
    }   

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}
