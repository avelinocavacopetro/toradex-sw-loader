@page "/manageFleets"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject TorizonService TorizonService
@inject FleetService FleetService
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Gerir Frotas</PageTitle>

@if(isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
} 
else
{
    <div class="custom-container">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">Gerir Frotas</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-50 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="Pesquisar frota pelo nome..."
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex justify-content-end gap-2">
                <button class="btn btn-color btn-lg py-2"
                        style="font-size: 1.25rem;"
                        @onclick="SaveFleetFilter">
                    <i class="bi bi-floppy"></i> Aplicar
                </button>
            </div>
        </div>

        <div class="pb-5">
            <table class="table mt-3 w-100" style="table-layout: fixed;">
                <thead style="background-color: #0c6527; color: white;">
                    <tr>
                        <th onclick="@(() => SortByColumn("Name"))"
                            style="width: 70%; text-align: left; padding-left: 20px; border-top-left-radius: 5px;
                                                           border-right: 1px solid white; cursor: pointer;">
                            Frota
                            <span style="font-size: 0.9rem; margin-left: 5px;
                                                                 color: @(currentSortColumn == "Name" ? "white" : "rgba(255,255,255,0.5)")">
                                @(currentSortColumn == "Name" ? (isNameAscending ? "▲" : "▼") : "▲")
                            </span>
                        </th>
                        <th style="width: 30%; text-align: center;">Estado</th>
                    </tr>
                </thead>
                <tbody>
                    @if (PaginatedFleets is null || !PaginatedFleets.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                                Sem dados disponíveis
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var fleet in PaginatedFleets)
                        {
                            <tr class="table-light" style="height: 50px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px;">
                                    @fleet.Name
                                </td>
                                <td class="text-center align-middle p-0">
                                    <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                           id="toggle-@fleet.Id"
                                           @onchange="(e => ToggleFleet(e, fleet))"
                                           checked="@selectedFleets.Any(f => f.Id == fleet.Id)" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>

        <div class="sticky-footer-right">
            <div class="d-flex justify-content-end align-items-center gap-3">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Fleet> fleets = new List<Fleet>();
    private List<Fleet> paginatedFleets = new List<Fleet>();
    private List<Fleet> selectedFleets = new List<Fleet>();
    private WindowDimension? dimension;

    private int actualPage = 1;
    private int fleetsPerPage = 6;
    private int TotalPages => (int)Math.Ceiling((double)FilteredFleets.Count() / fleetsPerPage);

    private string currentSortColumn = "Name";

    private bool isNameAscending = true;
    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;
    
    private IEnumerable<Fleet> FilteredFleets 
    {
        get
        {
            var filtered = string.IsNullOrWhiteSpace(searchTerm)
                ? fleets
                : fleets.Where(f => f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            if (currentSortColumn == "Name")
            {
                filtered = isNameAscending
                    ? filtered.OrderBy(f => f.Name)
                    : filtered.OrderByDescending(f => f.Name);
            }

            return filtered;
        }
    }

    private IEnumerable<Fleet> PaginatedFleets =>
    FilteredFleets
        .Skip((actualPage - 1) * fleetsPerPage)
        .Take(fleetsPerPage);

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // await FilterService.LoadFilterAsync();

        // var fleetsUrl = "https://app.torizon.io/api/v2beta/fleets";

        // bool authOk = await TorizonService.AuthenticateAsync();
        // if (authOk)
        // {
        //     fleets = await TorizonService.GetItemsAsync<Fleet>(fleetsUrl) ?? new List<Fleet>();
        // }

        // selectedFleets = new List<Fleet>(FilterService.SelectedFleets);

        // isLoading = false;

        // UpdatePage();

        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();
        fleets = await context.Fleets.ToListAsync();

        selectedFleets = new List<Fleet>(FilterService.SelectedFleets);

        isLoading = false;
    }

    private void ToggleFleet(ChangeEventArgs e, Fleet fleet)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedFleets.Any(f => f.Id == fleet.Id))
                selectedFleets.Add(fleet);
        }
        else
        {
            selectedFleets.RemoveAll(f => f.Id == fleet.Id);
        }
    }

    private void OnDimensionsChanged(WindowDimension newDimension)
    {
        dimension = newDimension;

        UpdatePage();
        StateHasChanged();
    }

    private async Task SaveFleetFilter()
    {
        if (selectedFleets.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos uma frota!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
        else
        {
            await FilterService.ApplyFleetFilter(new List<Fleet>(selectedFleets));

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Filtros aplicados com sucesso!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonColor = "#0B5120"
            });
        }
    }

    private void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isNameAscending = !isNameAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isNameAscending = true;
        }

        actualPage = 1;
    }

    private void UpdatePage()
    {
        paginatedFleets = fleets
                                 .Skip((actualPage - 1) * fleetsPerPage)
                                 .Take(fleetsPerPage)
                                 .ToList();
    }   

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}
