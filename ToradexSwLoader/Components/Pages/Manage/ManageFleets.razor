@page "/manageFleets"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject TorizonService TorizonService
@inject FleetService FleetService
@inject FilterService FilterService

<PageTitle>@localizer["ManageFleets"]</PageTitle>

@if(isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
} 
else
{
    <div class="custom-container">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">@localizer["ManageFleets"]</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-50 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="@localizer["SearchFleet"]"
                       style="border: 1px solid grey;"
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex justify-content-end gap-2">
                <button class="btn btn-color btn-lg py-2"
                        style="font-size: 1.25rem;"
                        @onclick="SaveFleetFilter">
                    <i class="bi bi-floppy"></i> @localizer["Apply"]
                </button>
            </div>
        </div>

        <div class="card-body pb-2 px-0 mb-0 mt-3">
            <div class="table-responsive border rounded-2">
                <QuickGrid Class="table table-striped m-0"
                           Items="@FilteredFleets.AsQueryable()"
                           ItemKey="@(pf => pf.Id)">

                    <!--- Coluna do nome das frotas --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left" style="cursor: pointer;" onclick="@(() => SortByColumn("Name"))">
                                @localizer["Fleet"]
                                <span style="font-size: 1rem; margin-left: 5px;
                                                                     color: @(currentSortColumn == "Name" ? "white" : "rgba(255,255,255,0.5)")">
                                    @(currentSortColumn == "Name" ? (isNameAscending ? "▲" : "▼") : "▲")
                                </span>
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                <span style="font-size: 1rem;">
                                    @context.Name
                                </span>
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado (Ativo ou não) --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["Active"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-center">
                                <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                       id="toggle-@context.Id"
                                       @onchange="(e => ToggleFleet(e, context))"
                                       checked="@selectedFleets.Any(f => f.Id == context.Id)" />
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>

                @if (!FilteredFleets.Any())
                {
                    <table class="table table-striped m-0">
                        <tbody>
                            <tr>
                                <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                    @localizer["NoData"]
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>

            <div class="d-flex justify-content-end mt-3 px-3">
                <p>@FilteredFleets.Count() @localizer["Fleet"]&#40s&#41</p>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Object
    List<Fleet> fleets = new();
    List<Fleet> selectedFleets = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(ManageFleets));

    IEnumerable<Fleet> FilteredFleets
    {
        get
        {
            var filtered = string.IsNullOrWhiteSpace(searchTerm)
                ? fleets
                : fleets.Where(f => f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            if (currentSortColumn == "Name")
            {
                filtered = isNameAscending
                    ? filtered.OrderBy(f => f.Name)
                    : filtered.OrderByDescending(f => f.Name);
            }

            return filtered;
        }
    }

    // Variáveis: String
    string currentSortColumn = "Name";

    string _searchTerm = string.Empty;
    string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
            }
        }
    }

    // Variáveis: Boolean
    bool isNameAscending = true;
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();

            var fleetsUrl = "https://app.torizon.io/api/v2beta/fleets";

            bool authOk = await TorizonService.AuthenticateAsync();
            if (authOk)
            {
                fleets = await TorizonService.GetItemsAsync<Fleet>(fleetsUrl) ?? new List<Fleet>();

                await FleetService.ImportFleetsFromApiAsync("https://app.torizon.io/api/v2beta/fleets");
            }

            selectedFleets = new List<Fleet>(FilterService.SelectedFleets);

            isLoading = false;

            UpdatePage();
            _log.Info("Fleets loaded successfully.");
        }
        catch (Exception ex)
        {
            _log.Error("Error loading fleets. ", ex);
            
            ToastService.ShowError($"{@localizer["Error"]}. {@localizer["ErrorLoading"]}");
        }
    }

    void ToggleFleet(ChangeEventArgs e, Fleet fleet)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedFleets.Any(f => f.Id == fleet.Id))
                selectedFleets.Add(fleet);
        }
        else
        {
            selectedFleets.RemoveAll(f => f.Id == fleet.Id);
        }
    }

    async Task SaveFleetFilter()
    {
        try
        {
            if (selectedFleets.Count == 0)
            {
                ToastService.ShowWarning(@localizer["PleaseSelectFleet"]);
                return;
            }
            else
            {
                await FilterService.ApplyFleetFilter(new List<Fleet>(selectedFleets));

                ToastService.ShowSuccess(@localizer["FiltersApplied"]);
            }
        }
        catch (Exception ex)
        {
            _log.Error("Error saving fleet filter. ", ex);
            
            ToastService.ShowError($"{@localizer["Error"]}. {@localizer["TryAgain"]}");
            return;
        }
    }

    void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isNameAscending = !isNameAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isNameAscending = true;
        }
    }

    void UpdatePage()
    {
        InvokeAsync(StateHasChanged);
    }
}