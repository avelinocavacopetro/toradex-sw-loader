@page "/manageSecret"

@using log4net
@inject IJSRuntime JS
@inject TorizonService TorizonService
@inject SweetAlertService Swal
@inject FilterService FilterService

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle>Definições</PageTitle>

<div class="custom-container">
    <div class="page-title">
        <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
        <h3 class="pt-2">Definições</h3>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <div class="row mb-3">
            <div class="col-auto">
                <label for="refreshTime" class="fw-bold fs-5">
                    Tempo de atualização de dados (máx. 60 seg.)
                </label>
                <input id="refreshTime" @bind="refreshTime" type="number" min="10" max="60" class="form-control mt-2" style="border: 1px solid grey;" />
            </div>
        </div>
        
        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-color btn-lg"
                    style="font-size: 1.25rem;"
                    @onclick="ConfirmAndSubmit">
                <i class="bi bi-floppy"></i> Aplicar
            </button>
        </div>
    </div>
</div>

@code {
    // Integer Variables
    private int refreshTime = 10;

    // Object Variables
    private static readonly ILog log = LogManager.GetLogger(typeof(Settings));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();

            refreshTime = FilterService.RefreshTime;
        }
        catch (Exception ex)
        {
            log.Error("Error loading settings. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Erro ao carregar as definições.",
                Text = ex.Message,
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
        }
    }

    private async Task ConfirmAndSubmit()
    {
        try
        {
            if (refreshTime < 10 || refreshTime > 60)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Por favor coloque um valor entre 10 a 60 segundos!",
                        Icon = SweetAlertIcon.Warning,
                        ConfirmButtonColor = "#0B5120"
                    });
                return;
            }

            await FilterService.ApplyTimeFilter(refreshTime);

            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Filtros aplicados com sucesso!",
                    Icon = SweetAlertIcon.Success,
                    ConfirmButtonColor = "#0B5120"
                });
        }
        catch (Exception ex)
        {
            log.Error("Error confirming and submitting settings. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Erro ao aplicar as definições.",
                    Text = ex.Message,
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonColor = "#0B5120"
                });
            return;
        }
    }
}
