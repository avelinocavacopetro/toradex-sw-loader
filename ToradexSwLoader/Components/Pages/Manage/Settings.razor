@page "/manageSecret"

@inject IJSRuntime JS
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject TorizonService TorizonService
@inject FilterService FilterService

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<PageTitle> @localizer["Settings"]</PageTitle>

<div class="custom-container">
    <div class="page-title">
        <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
        <h3 class="pt-2"> @localizer["Settings"]</h3>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <div class="row mb-3">
            <div class="col-auto">
                <label for="refreshTime" class="fw-bold fs-5">
                    @localizer["Max60Seconds"]
                </label>
                <input id="refreshTime" @bind="refreshTime" type="number" min="10" max="60" class="form-control mt-2" style="border: 1px solid grey;" />
            </div>
        </div>
        
        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-color btn-lg"
                    style="font-size: 1.25rem;"
                    @onclick="ConfirmAndSubmitRefreshTime">
                <i class="bi bi-floppy"></i>  @localizer["Apply"]
            </button>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <div class="row mb-3">
            <div class="col-auto">
                <label for="onlineTime" class="fw-bold fs-5">
                    @localizer["Max30Minutes"]
                </label>
                <input id="onlineTime" @bind="onlineTime" type="number" min="1" max="30" class="form-control mt-2" style="border: 1px solid grey;" />
            </div>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-color btn-lg"
                    style="font-size: 1.25rem;"
                    @onclick="ConfirmAndSubmitOnlineTime">
                <i class="bi bi-floppy"></i>  @localizer["Apply"]
            </button>
        </div>
    </div>
</div>

@code {
    // Variáveis: Integer
    int refreshTime = 10;
    int onlineTime = 5;

    // Variáveis: Object
    static readonly ILog log = LogManager.GetLogger(typeof(Settings));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();

            refreshTime = FilterService.RefreshTime;
            onlineTime = FilterService.OnlineTime;
        }
        catch (Exception ex)
        {
            log.Error("Error loading settings. ", ex);
            
            ToastService.ShowError(@localizer["ErrorLoading"]);
        }
    }

    async Task ConfirmAndSubmitRefreshTime()
    {
        try
        {
            if (refreshTime < 10 || refreshTime > 60)
            {
                ToastService.ShowWarning(@localizer["PleaseRefreshTime"]);
                return;
            }

            await FilterService.ApplyRefreshTimeFilter(refreshTime);

            ToastService.ShowSuccess(@localizer["FiltersApplied"]);
        }
        catch (Exception ex)
        {
            log.Error("Error confirming and submitting settings. ", ex);
            
            ToastService.ShowError(@localizer["Error"]);
            return;
        }
    }

    async Task ConfirmAndSubmitOnlineTime()
    {
        try
        {
            if (onlineTime < 1 || onlineTime > 30)
            {
                ToastService.ShowWarning(@localizer["PleaseOnlineTime"]);
                return;
            }

            await FilterService.ApplyOnlineTimeFilter(onlineTime);

            ToastService.ShowSuccess(@localizer["FiltersApplied"]);
        }
        catch (Exception ex)
        {
            log.Error("Error confirming and submitting settings. ", ex);

            ToastService.ShowError(@localizer["Error"]);
            return;
        }
    }
}
