@page "/manageDevices"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject FilterService FilterService
@inject SweetAlertService Swal

<PageTitle>Gerir Dispositivos</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else if (isAdding || isEditing)
{
    <div class="center-edit">
        <div class="edit-form">
            <label for="text" class="pb-4" style="font-size: 1.5rem;">Nome do Dispositivo</label>
            <input type="text" @bind="deviceName" class="form-control w-100 mx-auto" style="font-size: 1.2rem; text-align: center;" />

            <div class="d-flex flex-row flex-wrap justify-content-center gap-3 mt-5">
                <button class="btn btn-color btn-lg btn-edit-custom" style="min-width: 120px;"
                        @onclick="isAdding? SaveDevice : EditDevice">
                    Salvar
                </button>
                <button class="btn btn-danger btn-lg btn-edit-custom" style="min-width: 120px;"
                        @onclick="isAdding? CancelAdd : CancelEdit">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
}
else
{
        @if (!isAdding)
        {
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center mt-4">
                    <div class="w-50">
                        <input type="text" class="form-control" placeholder="Pesquisar dispositivo pelo nome..."
                               @bind="searchTerm" @bind:event="oninput" />
                    </div>

                    <div class="d-flex justify-content-between align-items-center gap-3">
                        <span>@actualPage - @TotalPages de @TotalPages</span>
                        <div class="d-flex gap-2">
                            <button class="btn custom-outline-button btn-lg"
                                    @onclick="PrevPage" disabled="@(!CanGoPrev)">
                                &lt;
                            </button>

                            <button class="btn custom-outline-button btn-lg"
                                    @onclick="NextPage" disabled="@(!CanGoNext)">
                                &gt;
                            </button>
                        </div>
                    </div>
                </div>

                <div class="pb-2 pt-4" style="text-align: right;">
                    <button class="btn btn-color btn-lg"
                            style="font-size: 2rem; width: 50px; height: 50px; padding: 0;"
                            @onclick="AddDevice">
                        +
                    </button>
                </div>

                <div class="pb-5">
                <table class="table mt-3 w-100" style="table-layout: fixed;">
                    <thead style="background-color: #0c6527; color: white;">
                        <tr>
                            <th style="width: 40%; text-align: left; padding-left: 20px;">Nome do Dispositivo</th>
                            <th style="width: 20%; text-align: center;">Ativo</th>
                            <th style="width: 20%;"></th>
                            <th style="width: 20%;"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var device in PaginatedDevices)
                        {
                            <tr class="table-light" style="height: 50px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px;">
                                    @device.Name
                                </td>
                                <td class="text-center align-middle p-0">
                                    <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                           id="toggle-@device.Id"
                                           @onchange="(e => ToggleDevice(e, device))"
                                           checked="@selectedDevices.Any(d => d.Id == device.Id)" />
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-success btn-sm py-1 px-2"
                                            title="Editar"
                                            @onclick="() => EditDevice(device.Id)">
                                        <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                            title="Desativar"
                                            @onclick="() => DisableDevice(device.Id)">
                                        <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                </div>

                <div class="text-center fixed-bottom pb-4">
                    <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="ApplyFilter">Aplicar</button>
                </div>
            </div>
        }
}

@code {
    private List<Device> devices = new List<Device>();
    private List<Device> selectedDevices = new List<Device>();
    private List<Device> paginatedDevices = new List<Device>();
    private Device? selectedDevice = new Device();
    private WindowDimension dimension = new WindowDimension();

    private string deviceName = string.Empty;

    private int onlineTime = 1;
    private int actualPage = 1;
    private int devicesPerPage = 8;
    private int TotalPages => (int)Math.Ceiling((double)FilteredDevices.Count() / devicesPerPage);

    private bool isLoading = true;
    private bool isAdding = false;
    private bool isEditing = false;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    private IEnumerable<Device> FilteredDevices =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? devices
        : devices.Where(d => d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<Device> PaginatedDevices =>
    FilteredDevices
        .Skip((actualPage - 1) * devicesPerPage)
        .Take(devicesPerPage);

    private void OnDimensionsChanged(WindowDimension newDimension)
    {
        dimension = newDimension;

        UpdatePage();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();
        devices = await context.Devices.Where(d => d.Enabled).ToListAsync();

        selectedDevices = FilterService.SelectedDevices;
        onlineTime = FilterService.OnlineTime;

        UpdatePage();
        isLoading = false;
    }

    private void ToggleDevice(ChangeEventArgs e, Device device)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedDevices.Any(d => d.Id == device.Id))
                selectedDevices.Add(device);
        }
        else
        {
            selectedDevices.RemoveAll(d => d.Id == device.Id);
        }
    }

    private void AddDevice()
    {
        deviceName = string.Empty;
        selectedDevice = null;
        isAdding = true;
        isEditing = false;
    }

    private async Task EditDevice(int id)
    {
        isEditing = true;
        isAdding = false;

        using var context = DbContextFactory.CreateDbContext();
        selectedDevice = await context.Devices.FirstOrDefaultAsync(d => d.Id == id);

        if (selectedDevice != null)
        {
            deviceName = selectedDevice.Name;
        }
    }

    private async Task EditDevice()
    {
        if (selectedDevice == null) return;

        using var context = DbContextFactory.CreateDbContext();

        var deviceDb = await context.Devices.FirstOrDefaultAsync(d => d.Id == selectedDevice.Id);
        if (deviceDb == null) return;

        deviceDb.Name = deviceName;

        await context.SaveChangesAsync();

        var localDevice = devices.FirstOrDefault(d => d.Id == deviceDb.Id);
        if (localDevice != null)
        {
            localDevice.Name = deviceDb.Name;
        }

        CancelEdit();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Dispositivo editado com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private async Task ApplyFilter()
    {
        if (selectedDevices.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos um dispositivo!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        await FilterService.ApplyDevicesFilter(new List<Device>(selectedDevices));

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Filtros aplicados com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private async Task SaveDevice()
    {
        if (string.IsNullOrWhiteSpace(deviceName))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor insira um nome válido!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        using var context = DbContextFactory.CreateDbContext();

        bool exists = await context.Devices.AnyAsync(d => d.Name.ToLower() == deviceName.Trim().ToLower());

        if (exists)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Este dispositivo já existe!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        var newDevice = new Device
        {
            Name = deviceName,
            Enabled = true
        };

        context.Devices.Add(newDevice);
        await context.SaveChangesAsync();

        devices.Add(newDevice);

        CancelAdd();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Dispositivo adicionado com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void CancelAdd()
    {
        isAdding = false;
        deviceName = string.Empty;
        selectedDevice = null;
    }

    private void CancelEdit()
    {
        isEditing = false;
        deviceName = string.Empty;
        selectedDevice = null;
    }

    private async Task DisableDevice(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Deseja desativar este dispositivo?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Continuar",
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = "Cancelar"
        });

        if (result.IsConfirmed)
        {
            isLoading = true;

            using var context = DbContextFactory.CreateDbContext();
            var deviceDb = await context.Devices.FirstOrDefaultAsync(d => d.Id == id);

            if (deviceDb != null)
            {
                deviceDb.Enabled = false;

                var relations = await context.DeviceProducts
                    .Where(dp => dp.DeviceId == id)
                    .ToListAsync();

                context.DeviceProducts.RemoveRange(relations);

                await context.SaveChangesAsync();
            }

            devices.RemoveAll(d => d.Id == id);

            FilterService.SelectedDevices.RemoveAll(d => d.Id == id);
            await FilterService.SaveFilterAsync();

            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdatePage()
    {
        paginatedDevices = FilteredDevices
                                 .Skip((actualPage - 1) * devicesPerPage)
                                 .Take(devicesPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoNext)
        {
            actualPage--;
            UpdatePage();
        }
    }
}