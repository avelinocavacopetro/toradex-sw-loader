@page "/adminHistory"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IToastService ToastService
@inject FinalProductStateService ProductState
@inject FilterService FilterService

<PageTitle>@localizer["History"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">@localizer["History"]</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4" style="gap: 10px;">
            <div class="w-50 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="@localizer["SearchProduct"]"
                       style="border: 1px solid grey;"
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex justify-content-end align-items-center gap-3">
                <label class="mb-0 fw-bold">@localizer["Beginning"]</label>
                <input type="date" class="form-control w-50" style="border: 1px solid grey;" @bind="startDate" max="@today" />

                <label class="mb-0 fw-bold">@localizer["End"]</label>
                <input type="date" class="form-control w-50" style="border: 1px solid grey;" @bind="endDate" max="@today" />
            </div>
        </div>

        <div class="card-body pb-2 px-0 mt-2">
            <div class="table-responsive border rounded-2">
                <QuickGrid Class="table table-striped m-0"
                           Items="@FilteredDevices.AsQueryable()"
                           ItemKey="@(fp => $"{fp.DeviceUuid}-{fp.CreatedAt:yyyyMMddHHmmssfff}")">

                    <!--- Coluna do nome dos produtos finais --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Board"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @context.Name
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do colaborador --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["Collaborator"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @context.UserPetrotec?.UserName
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da data de criação --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["CreatedAt"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @context.CreatedAt
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna da data que foi visto pela última vez visto --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-left">
                                @localizer["LastSeen"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="body-table-left">
                                @context.LastSeen
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado do produto final (Online ou Offline) --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["State"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="state-overlay">
                                @CheckOnlineStatus(context)
                            </div>
                        </ChildContent>
                    </TemplateColumn>

                    <!--- Coluna do estado de atualização --->
                    <TemplateColumn>
                        <HeaderTemplate>
                            <div class="header-table-center">
                                @localizer["StateUpdate"]
                            </div>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="state-overlay">
                                @GetStatusIcon(context.Status!)
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>

                @if (!FilteredDevices.Any())
                {
                    <table class="table table-striped m-0">
                        <tbody>
                            <tr>
                                <td colspan="10" class="text-center text-muted" style="padding: 1rem;">
                                    @localizer["NoData"]
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>

            <div class="d-flex justify-content-end mt-3 px-3">
                <p>@FilteredDevices.Count() @localizer["Device"]&#40s&#41</p>
            </div>
        </div>
    </div>
}

@code {
    // Variáveis: Object
    List<FinalProduct> finalProducts = new();
    List<FinalProduct> paginatedFinalProducts = new();
    static readonly ILog _log = LogManager.GetLogger(typeof(AdminHistory));

    DateTime? _startDate = DateTime.Now.AddDays(-30);
    DateTime? startDate
    {
        get => _startDate;
        set
        {
            if (_startDate != value)
            {
                _startDate = value;
                UpdatePage();
            }
        }
    }

    DateTime? _endDate = DateTime.Now;
    DateTime? endDate
    {
        get => _endDate;
        set
        {
            if (_endDate != value)
            {
                UpdatePage();
            }
        }
    }

    IEnumerable<FinalProduct> FilteredDevices =>
        finalProducts
            .Where(fp =>
                (string.IsNullOrWhiteSpace(searchTerm) || fp.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (!startDate.HasValue || fp.CreatedAt.Date >= startDate.Value.Date) &&
                (!endDate.HasValue || fp.CreatedAt.Date <= endDate.Value.Date)
            );

    // Variáveis: String
    public const string Updated = "Updated";
    public const string Error = "Error";
    public const string Pending = "Pending";
    public const string NotSeen = "NotSeen";
    public const string Outdated = "Outdated";
    public const string Scheduled = "Scheduled";
    public const string Unknown = "Unknown";
    string today = DateTime.Today.ToString("yyyy-MM-dd");
    string _searchTerm = string.Empty;
    string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                UpdatePage();
            }
        }
    }

    // Variáveis: Boolean
    bool isLoading = true;

    protected override void OnInitialized()
    {
        ProductState.OnChange += OnProductStateChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            finalProducts = await context.FinalProducts
                .Where(p => p.Enabled)
                .Include(fp => fp.UserPetrotec)
                .OrderByDescending(fp => fp.CreatedAt)
                .ToListAsync();

            isLoading = false;

            _log.Info("History loaded successfully");
            UpdatePage();
        }
        catch (Exception ex)
        {
            _log.Error("Error loading history.", ex);
            
            ToastService.ShowError($"{@localizer["Error"]}. {@localizer["ErrorLoading"]}");
        }
    }

    void OnProductStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ProductState.OnChange -= OnProductStateChanged;
    }

    MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => $@"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>{localizer[Updated]}</span>
                            </div>",
            "error" => $@"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>{localizer[Error]}</span>
                         </div>",
            "updatepending" => $@"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>{localizer[Pending]}</span>
                                 </div>",
            "notseen" => $@"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>{localizer[NotSeen]}</span>
                           </div>",
            "outdated" => $@"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>{localizer[Outdated]}</span>
                            </div>",
            "updatescheduled" => $@"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>{localizer[Scheduled]}</span>
                                   </div>",
            _ => $@"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>{localizer[Scheduled]}</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    MarkupString CheckOnlineStatus(FinalProduct product)
    {
        bool isOnline = product.LastSeen.HasValue && (DateTime.UtcNow - product.LastSeen.Value.ToUniversalTime()).TotalMinutes < FilterService.OnlineTime;
        string iconHtml = string.Empty;

        if (isOnline)
        {
            iconHtml = @"<div class='state' style='padding-right: 0.5rem;'>
                        <i class='bi bi-circle-fill text-success fs-4'></i>
                        <span>Online</span>
                     </div>";
        }
        else
        {
            iconHtml = @"<div class='state' style='padding-right: 0.5rem;'>
                        <i class='bi bi-x-circle text-danger fs-4'></i>
                        <span>Offline</span>
                     </div>";
        }

        return new MarkupString(iconHtml);
    }

    void OnFilterChanged(ChangeEventArgs e)
    {
        UpdatePage();
    }

    void UpdatePage()
    {
        InvokeAsync(StateHasChanged);
    }
}