@page "/adminHistory"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject LoginService LoginService
@inject TorizonService TorizonService
@inject FinalProductStateService ProductState

<PageTitle>Histórico de Carregamentos</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container d-flex flex-column">
        <div class="page-title">
            <i class="bi bi-card-list fs-3" style="padding-left: 10px;"></i>
            <h3 class="pt-2">Histórico de Carregamentos</h3>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="w-50 position-relative">
                <input type="text"
                       class="form-control py-2 ps-5"
                       placeholder="Pesquisar produto pelo nome..."
                       @bind="searchTerm"
                       @bind:event="oninput" />
                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>
            </div>

            <div class="d-flex justify-content-end align-items-center gap-2">
                <label class="mb-0 fw-bold">Início</label>
                <input type="date" class="form-control w-50" @bind="startDate" max="@today" />

                <label class="mb-0 fw-bold">Fim</label>
                <input type="date" class="form-control w-50" @bind="endDate" max="@today" />
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-custom mt-3">
                <thead>
                    <tr>
                        <th style="width: 40%; text-align: left; padding-left: 20px; border-top-left-radius: 5px;
                                                               border-right: 1px solid white;">Placa</th>
                        <th style="width: 20%; text-align: center; border-right: 1px solid white;">Data</th>
                        <th style="width: 20%; text-align: center; border-right: 1px solid white;">Colaborador</th>
                        <th style="width: 20%; text-align: center; border-top-right-radius: 5px;">Estado de atualização</th>
                    </tr>
                </thead>
                <tbody>
                    @if (paginatedFinalProducts is null || !paginatedFinalProducts.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4" style="font-size: 1.1rem;">
                                Sem dados disponíveis
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var finalProduct in paginatedFinalProducts)
                        {
                            <tr class="table-light" style="height: 50px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px;">@finalProduct.Name</td>
                                <td class="text-center" style="vertical-align: middle;">@finalProduct.CreatedAt</td>
                                <td class="text-center" style="vertical-align: middle;">@finalProduct.UserPetrotec?.UserName</td>
                                <td style="text-align: center;">
                                    @GetStatusIcon(finalProduct.Status)
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <div class="sticky-footer-right">
            <div class="d-flex justify-content-end align-items-center gap-3">
                <span>@actualPage - @TotalPages de @TotalPages</span>
                <div class="d-flex gap-2">
                    <button class="btn custom-outline-button btn-lg"
                            @onclick="PrevPage" disabled="@(!CanGoPrev)">
                        &lt;
                    </button>

                    <button class="btn custom-outline-button btn-lg"
                            @onclick="NextPage" disabled="@(!CanGoNext)">
                        &gt;
                    </button>
                </div>
            </div>
        </div>
        </div>
    </div>
}

@code {
    private List<FinalProduct> finalProducts = new List<FinalProduct>();
    private List<FinalProduct> paginatedFinalProducts = new List<FinalProduct>();

    private string today = DateTime.Today.ToString("yyyy-MM-dd");

    private int actualPage = 1;
    private int finalProductsPerPage = 6;
    private int TotalPages => (int)Math.Ceiling((double)FilteredPages.Count() / finalProductsPerPage);

    private bool isLoading = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;
    private DateTime? _startDate = DateTime.Now.AddDays(-30);
    private DateTime? startDate
    {
        get => _startDate;
        set
        {
            if (_startDate != value)
            {
                _startDate = value;
                actualPage = 1;
                UpdatePage();
            }
        }
    }

    private DateTime? _endDate = DateTime.Now;
    private DateTime? endDate
    {
        get => _endDate;
        set
        {
            if (_endDate != value)
            {
                _endDate = value;
                actualPage = 1;
                UpdatePage();
            }
        }
    }

    private IEnumerable<FinalProduct> FilteredPages =>
    finalProducts
        .Where(fp =>
            (string.IsNullOrWhiteSpace(searchTerm) || fp.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (!startDate.HasValue || fp.CreatedAt.Date >= startDate.Value.Date) &&
            (!endDate.HasValue || fp.CreatedAt.Date <= endDate.Value.Date)
        );

    private IEnumerable<FinalProduct> PaginatedActivities =>
    FilteredPages
        .Skip((actualPage - 1) * finalProductsPerPage)
        .Take(finalProductsPerPage);

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
                UpdatePage();
            }
        }
    }

    protected override void OnInitialized()
    {
        ProductState.OnChange += OnProductStateChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        finalProducts = await context.FinalProducts
            .Where(p => p.Enabled)
            .Include(fp => fp.UserPetrotec)
            .OrderByDescending(fp => fp.CreatedAt)
            .ToListAsync();

        isLoading = false;
        UpdatePage();
    }

    private void OnProductStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ProductState.OnChange -= OnProductStateChanged;
    }

    private MarkupString GetStatusIcon(string status)
    {
        var iconHtml = status.ToLower() switch
        {
            "uptodate" => @"<div class='state'>
                               <i class='bi bi-check-circle text-success fs-4'></i>
                               <span>Atualizado</span>
                            </div>",
            "error" => @"<div class='state'>
                            <i class='bi bi-x-circle text-danger fs-4'></i>
                            <span>Erro</span>
                         </div>",
            "updatepending" => @"<div class='state'>
                                    <i class='bi bi-clock text-warning fs-4'></i>
                                    <span>Pendente</span>
                                 </div>",
            "notseen" => @"<div class='state'>
                              <i class='bi bi-eye-slash text-muted fs-4'></i>
                              <span>Não Visto</span>
                           </div>",
            "outdated" => @"<div class='state'>
                               <i class='bi bi-exclamation-circle text-danger fs-4'></i>
                               <span>Desatualizado</span>
                            </div>",
            "updatescheduled" => @"<div class='state'>
                                      <i class='bi bi-calendar-check text-primary fs-4'></i>
                                      <span>Agendado</span>
                                   </div>",
            _ => @"<div class='state'>
                      <i class='bi bi-question-circle text-secondary fs-4'></i>
                      <span>Scheduled</span>
                   </div>",
        };

        return new MarkupString(iconHtml);
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        actualPage = 1;
        UpdatePage();
    }

    private void UpdatePage()
    {
        paginatedFinalProducts = FilteredPages
            .Skip((actualPage - 1) * finalProductsPerPage)
            .Take(finalProductsPerPage)
            .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}
