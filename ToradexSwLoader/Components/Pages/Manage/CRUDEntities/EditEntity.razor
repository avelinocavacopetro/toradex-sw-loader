@page "/manageEntities/edit/{EntityId:int}"

@using log4net
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["EditEntity"]</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">@localizer["Loading"]...</span>
            </div>
            <p class="mt-3">@localizer["Loading"]...</p>
        </div>
    </div>
}
else
{
    <div class="custom-container">
        <div class="page-title d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="bi bi-card-list icon-align fs-3" style="padding-left: 10px;"></i>
                <h3 class="ms-2 mb-0">@localizer["EditEntity"]</h3>
            </div>

            <div class="d-flex gap-3">
                <button class="btn btn-outline-light border border-white border-2"
                        style="width: 100px;"
                        @onclick="Cancel">
                    <i class="bi bi-arrow-left fs-5"></i>
                </button>
                <button class="btn btn-outline-light border border-white border-2 fs-5"
                        style="width: 150px;"
                        @onclick="SaveChanges">
                    <i class="bi bi-floppy"></i> @localizer["Save"]
                </button>
            </div>
        </div>

        <div class="edit-form mt-4">
            <div class="d-flex align-items-center gap-3">
                <label for="text" class="mb-0" style="font-size: 1.5rem; flex-shrink: 0;">
                    @localizer["Name"]
                    <span style="font-size: 15px;"> (máx. 50 caracteres)</span> :
                </label>
                <input type="text" @bind="entityName"
                       class="form-control"
                       style="font-size: 1.2rem; border: 1px solid grey;" 
                       maxlength="50"/>
            </div>
            <div class="d-flex align-items-center gap-3 mt-3">
                <label for="text" class="pb-4" style="font-size: 1.5rem;">@localizer["Observations"]</label>
                <textarea @bind="observations"
                          class="form-control w-100 mx-auto"
                          style="font-size: 1.2rem; text-align: center; border: 1px solid grey;"
                          rows="2"
                          placeholder="@localizer["InsertObservation"]">
                    </textarea>
            </div>

            <br />
            <h4>@localizer["SelectFleets"]</h4>

            <div class="w-50">
                <input type="text" class="form-control" style="border: 1px solid grey;"
                       placeholder="@localizer["SearchFleet"]"
                       @bind="searchTerm" @bind:event="oninput" />
            </div>

            <div class="table-wrapper">
                <table class="table mt-3 w-100" style="table-layout: fixed;">
                    <thead style="background-color: #0c6527; color: white;">
                        <tr>
                            <th style="width: 70%; text-align: left; padding-left: 20px;">@localizer["Fleet"]</th>
                            <th style="width: 30%; text-align: center;">@localizer["Select"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var fleet in PaginatedFleets)
                        {
                            <tr class="table-light" style="height: 50px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px;">
                                    @fleet.Name
                                </td>
                                <td class="text-center align-middle p-0">
                                    <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                           id="toggle-@fleet.Id"
                                           @onchange="(e => ToggleFleet(e, fleet))"
                                           checked="@selectedFleets.Any(f => f.Id == fleet.Id)" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="sticky-footer-right">
                    <div class="d-flex justify-content-end align-items-center gap-3">
                        <span>@currentFleetPage - @TotalFleetPages de @TotalFleetPages</span>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-secondary"
                                    @onclick="PrevFleetPage"
                                    disabled="@(currentFleetPage == 1)">
                                &lt;
                            </button>
                            <button class="btn btn-outline-secondary"
                                    @onclick="NextFleetPage"
                                    disabled="@(currentFleetPage == TotalFleetPages)">
                                &gt;
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Parameters
    [Parameter]
    public int EntityId { get; set; }

    // Object Variables
    private List<Fleet> fleets = new();
    private List<Fleet> selectedFleets = new();
    private static readonly ILog log = LogManager.GetLogger(typeof(EditEntity));

    private IEnumerable<Fleet> FilteredFleets =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? fleets
        : fleets.Where(f => f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<Fleet> PaginatedFleets =>
    FilteredFleets
        .Skip((currentFleetPage - 1) * fleetsPerPage)
        .Take(fleetsPerPage);

    // String Variables 
    private string entityName = string.Empty;
    private string observations = string.Empty;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                currentFleetPage = 1;
            }
        }
    }

    // Boolean Variables
    private bool isLoading = true;

    // Integer Variables
    private int currentFleetPage = 1;
    private int fleetsPerPage = 3;
    private int TotalFleetPages => (int)Math.Ceiling((double)FilteredFleets.Count() / fleetsPerPage);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FilterService.LoadFilterAsync();

            using var context = DbContextFactory.CreateDbContext();
            fleets = await context.Fleets.ToListAsync();
            var entity = await context.Entities.FirstOrDefaultAsync(e => e.Id == EntityId);

            if (entity != null)
            {
                entityName = entity.Name;
                observations = entity.Observation;

                selectedFleets = await context.EntityFleets
                    .Where(ef => ef.EntityId == EntityId)
                    .Select(ef => ef.Fleet!)
                    .ToListAsync();
            }

            isLoading = false;
        }
        catch (Exception ex)
        {
            log.Error("Error loading entity. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["TryAgain"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            NavigationManager.NavigateTo("/manageEntities");
        }
    }

    private void ToggleFleet(ChangeEventArgs e, Fleet fleet)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedFleets.Any(f => f.Id == fleet.Id))
                selectedFleets.Add(fleet);
        }
        else
        {
            selectedFleets.RemoveAll(f => f.Id == fleet.Id);
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            if (!ValidateEntityName())
                return;

            if (!ValidateFleetCount())
                return;

            using var context = DbContextFactory.CreateDbContext();

            await ChangeEntity(context);
            await ShowSuccessAlert();
            NavigationManager.NavigateTo("/manageEntities");
        } 
        catch (Exception ex)
        {
            log.Error("Error saving changes to entity. ", ex);
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["Error"],
                Text = @localizer["TryAgain"],
                Icon = SweetAlertIcon.Error,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
    }

    private bool ValidateEntityName()
    {
        if (string.IsNullOrWhiteSpace(entityName))
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["ValidName"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        if (entityName.Length > 50)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["LongName"],
                Text = @localizer["Max30"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        return true;
    }

    private bool ValidateFleetCount()
    {
        if (selectedFleets.Count < 1)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = @localizer["PleaseSelectFleet"],
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return false;
        }

        return true;
    }

    private async Task ChangeEntity(AppDbContext context)
    {
        var entityDb = await context.Entities.FirstOrDefaultAsync(e => e.Id == EntityId);
        if (entityDb == null) return;

        entityDb.Name = entityName;
        entityDb.Observation = observations;

        var oldEntityFleets = context.EntityFleets.Where(ef => ef.EntityId == entityDb.Id);
        context.EntityFleets.RemoveRange(oldEntityFleets);

        foreach (var fleet in selectedFleets)
        {
            context.EntityFleets.Add(new EntityFleet
            {
                EntityId = entityDb.Id,
                FleetId = fleet.Id
            });
        }

        await context.SaveChangesAsync();
    }

    private async Task ShowSuccessAlert()
    {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = @localizer["AddedSuccess"],
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageEntities");
    }

    private void PrevFleetPage()
    {
        if (currentFleetPage > 1)
            currentFleetPage--;
    }

    private void NextFleetPage()
    {
        if (currentFleetPage < TotalFleetPages)
            currentFleetPage++;
    }
}
