@page "/manageEntities"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>Gerir Entidades</PageTitle>

@if (isLoading)
{
    <div class="center">
        <div class="text-center mt-5">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">A carregar...</span>
            </div>
            <p class="mt-3">A carregar...</p>
        </div>
    </div>
}
else
{
    <div class="center-customization">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div class="w-50">
                    <input type="text" class="form-control" placeholder="Pesquisar entidade pelo nome..."
                           @bind="searchTerm" @bind:event="oninput" />
                </div>

                <div class="d-flex justify-content-between align-items-center gap-3">
                    <span>@actualPage - @TotalPages de @TotalPages</span>
                    <div class="d-flex gap-2">
                        <button class="btn custom-outline-button btn-lg"
                                @onclick="PrevPage" disabled="@(!CanGoPrev)">
                            &lt;
                        </button>

                        <button class="btn custom-outline-button btn-lg"
                                @onclick="NextPage" disabled="@(!CanGoNext)">
                            &gt;
                        </button>
                    </div>
                </div>
            </div>

            <div class="pb-2 pt-4" style="text-align: right;">
                <button class="btn btn-color btn-lg"
                        style="font-size: 2rem; width: 50px; height: 50px; padding: 0;"
                        @onclick="NavigateToAddEntity">
                    +
                </button>
            </div>

            <div class="pb-5">
                <table class="table mt-3 w-100" style="table-layout: fixed;">
                    <thead style="background-color: #0c6527; color: white;">
                        <tr>
                            <th style="width: 30%; text-align: left; padding-left: 20px;">Nome da Entidade</th>
                            <th style="width: 30%; text-align: center;">Frotas Associadas</th>
                            <th style="width: 15%; text-align: center;">Estado</th>
                            <th style="width: 12.5%;"></th>
                            <th style="width: 12.5%;"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entity in PaginatedEntities)
                        {
                            <tr class="table-light" style="height: 60px;">
                                <td style="text-align: left; vertical-align: middle; padding-left: 20px; font-weight: 500;">
                                    @entity.Name
                                </td>
                                <td class="text-center" style="vertical-align: middle;">
                                    @if (entity.EntityFleets?.Any() == true)
                                    {
                                        <ul class="mb-0 ps-3">
                                            @foreach (var ef in entity.EntityFleets)
                                            {
                                                <li style="list-style-type: none;">@ef.Fleet?.Name</li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <span class="text-muted" style="font-size:18px;">Sem Frotas</span>
                                    }
                                </td>
                                <td class="text-center align-middle p-0">
                                    <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                           id="toggle-@entity.Id"
                                           @onchange="(e => ToggleEntity(e, entity))"
                                           checked="@selectedEntities.Any(e => e.Id == entity.Id)" />
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-success btn-sm py-1 px-2"
                                            title="Editar Entidade"
                                            @onclick="() => NavigateToEditEntity(entity.Id)">
                                        <i class="bi bi-pencil-square" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                                <td class="text-center align-middle">
                                    <button class="btn btn-outline-danger btn-sm py-1 px-2"
                                            title="Remover Entidade"
                                            @onclick="() => DisableEntity(entity.Id)">
                                        <i class="bi bi-trash-fill" style="font-size: 1.1rem;"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="text-center fixed-bottom pb-4">
                <button class="btn btn-color btn-lg" style="margin-left: 20vw; width: 20vw; font-size: 1.5rem;" @onclick="ApplyFilter">Aplicar</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Entity> entities = new List<Entity>();
    private List<Entity> selectedEntities = new List<Entity>();
    private List<Entity> paginatedEntities = new List<Entity>();

    private string currentSortColumn = "Name";

    private int actualPage = 1;
    private int entitiesPerPage = 5;
    private int TotalPages => (int)Math.Ceiling((double)FilteredEntities.Count() / entitiesPerPage);

    private bool isLoading = true;
    private bool isNameAscending = true;
    private bool CanGoNext => actualPage < TotalPages;
    private bool CanGoPrev => actualPage > 1;

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                actualPage = 1;
            }
        }
    }

    private IEnumerable<Entity> FilteredEntities
    {
        get
        {
            var filtered = string.IsNullOrWhiteSpace(searchTerm)
                ? entities
                : entities.Where(e => e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            if (currentSortColumn == "Name")
            {
                filtered = isNameAscending
                    ? filtered.OrderBy(e => e.Name)
                    : filtered.OrderByDescending(e => e.Name);
            }

            return filtered;
        }
    }

    private IEnumerable<Entity> PaginatedEntities =>
    FilteredEntities
        .Skip((actualPage - 1) * entitiesPerPage)
        .Take(entitiesPerPage);

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();

        using var context = DbContextFactory.CreateDbContext();

        var filteredFleetsIds = FilterService.SelectedFleets.Select(f => f.Id).ToHashSet();

        entities = await context.Entities
            .Where(e => e.Enabled)
            .Include(e => e.EntityFleets)
            .ThenInclude(f => f.Fleet)
            .OrderBy(e => e.Name)
            .ToListAsync();

        foreach (var entity in entities)
        {
            entity.EntityFleets = entity.EntityFleets
                .Where(ef => ef.Fleet != null && filteredFleetsIds.Contains(ef.Fleet.Id))
                .ToList();
        }

        selectedEntities = FilterService.SelectedEntities;

        UpdatePage();

        isLoading = false;
    }

    private void ToggleEntity(ChangeEventArgs e, Entity entity)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedEntities.Any(e => e.Id == entity.Id))
                selectedEntities.Add(entity);
        }
        else
        {
            selectedEntities.RemoveAll(e => e.Id == entity.Id);
        }
    }

    private void NavigateToAddEntity()
    {
        NavigationManager.NavigateTo("/manageEntities/add");
    }

    private void NavigateToEditEntity(int id)
    {
        NavigationManager.NavigateTo($"/manageEntities/edit/{id}");
    }

    private async Task ApplyFilter()
    {
        if (selectedEntities.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor selecione pelo menos uma entidade!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }
        else
        {
            await FilterService.ApplyEntitiesFilter(new List<Entity>(selectedEntities));

            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Filtros aplicados com sucesso!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonColor = "#0B5120"
            });
        }
    }

    private async Task DisableEntity(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Deseja desativar esta entidade?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Continuar",
            ConfirmButtonColor = "#0B5120",
            CancelButtonText = "Cancelar"
        });

        if (result.IsConfirmed)
        {
            isLoading = true;

            using var context = DbContextFactory.CreateDbContext();
            var entityDb = await context.Entities.FirstOrDefaultAsync(e => e.Id == id);

            if (entityDb != null)
            {
                entityDb.Enabled = false;

                var relations = await context.EntityFleets
                    .Where(ef => ef.EntityId == id)
                    .ToListAsync();

                context.EntityFleets.RemoveRange(relations);

                await context.SaveChangesAsync();
            }

            entities.RemoveAll(e => e.Id == id);

            FilterService.SelectedEntities.RemoveAll(e => e.Id == id);
            await FilterService.SaveFilterAsync();

            UpdatePage();

            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdatePage()
    {
        paginatedEntities = FilteredEntities
                                 .Skip((actualPage - 1) * entitiesPerPage)
                                 .Take(entitiesPerPage)
                                 .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            actualPage++;
            UpdatePage();
        }
    }

    private void PrevPage()
    {
        if (CanGoPrev)
        {
            actualPage--;
            UpdatePage();
        }
    }
}