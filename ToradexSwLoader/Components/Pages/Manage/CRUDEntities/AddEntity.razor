@page "/manageEntities/add"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject FilterService FilterService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

<PageTitle>Adicionar Entidade</PageTitle>

<div class="center-edit">
    <div class="edit-form p-4" style="max-height: 90vh;">
        <label for="text" class="pb-4" style="font-size: 1.5rem;">Nome da Entidade</label>
        <input type="text" @bind="entityName" class="form-control w-100 mx-auto" style="font-size: 1.2rem; text-align: center;" />

        <label for="text" class="pb-4" style="font-size: 1.5rem;">Observações</label>
        <textarea @bind="observations"
                  class="form-control w-100 mx-auto"
                  style="font-size: 1.2rem; text-align: center;"
                  rows="2"
                  placeholder="Insira uma observação...">
                </textarea>

        <br />

        <h4 class="mb-3">Selecionar Frota(s):</h4>

        <table class="table w-100 mb-3">
            <thead style="background-color: #0c6527; color: white;">
                <tr>
                    <th style="width: 70%; text-align: left; padding-left: 20px;">Frota</th>
                    <th style="width: 30%; text-align: center;">Selecionar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var fleet in PaginatedFleets)
                {
                    <tr class="table-light" style="height: 50px;">
                        <td style="text-align: left; vertical-align: middle; padding-left: 20px; font-weight: 500;">
                            @fleet.Name
                        </td>
                        <td class="text-center align-middle p-0">
                            <input type="checkbox" class="largerCheckbox d-block mx-auto my-auto"
                                   id="toggle-@fleet.Id"
                                   @onchange="(e => ToggleFleet(e, fleet))"
                                   checked="@selectedFleets.Any(f => f.Id == fleet.Id)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center gap-3 mb-4">
            <span>@currentFleetPage - @TotalFleetPages de @TotalFleetPages</span>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-secondary"
                        @onclick="PrevFleetPage"
                        disabled="@(currentFleetPage == 1)">
                    &lt;
                </button>
                <button class="btn btn-outline-secondary"
                        @onclick="NextFleetPage"
                        disabled="@(currentFleetPage == TotalFleetPages)">
                    &gt;
                </button>
            </div>
        </div>

        <div class="d-flex flex-row flex-wrap justify-content-center gap-3 mt-5">
            <button class="btn btn-color btn-lg btn-edit-custom" style="min-width: 120px;"
                    @onclick="SaveEntity">
                Salvar
            </button>
            <button class="btn btn-danger btn-lg btn-edit-custom" style="min-width: 120px;"
                    @onclick="Cancel">
                Cancelar
            </button>
        </div>
    </div>
</div>

@code {
    private List<Fleet> selectedFleets = new List<Fleet>();

    private string entityName = string.Empty;
    private string observations = string.Empty;

    private int currentFleetPage = 1;
    private int fleetsPerPage = 3;
    private int TotalFleetPages => (int)Math.Ceiling((double)FilterService.SelectedFleets.Count / fleetsPerPage);

    private IEnumerable<Fleet> PaginatedFleets =>
        FilterService.SelectedFleets
            .Skip((currentFleetPage - 1) * fleetsPerPage)
            .Take(fleetsPerPage);

    protected override async Task OnInitializedAsync()
    {
        await FilterService.LoadFilterAsync();
        selectedFleets = new List<Fleet>();
    }

    private void ToggleFleet(ChangeEventArgs e, Fleet fleet)
    {
        var isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            if (!selectedFleets.Any(f => f.Id == fleet.Id))
                selectedFleets.Add(fleet);
        }
        else
        {
            selectedFleets.RemoveAll(f => f.Id == fleet.Id);
        }
    }

    private async Task SaveEntity()
    {
        if (string.IsNullOrWhiteSpace(entityName))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Por favor insira um nome válido!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        using var context = DbContextFactory.CreateDbContext();

        bool exists = await context.Entities.AnyAsync(e => e.Name.ToLower() == entityName.Trim().ToLower());

        if (exists)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta entidade já existe!",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonColor = "#0B5120"
            });
            return;
        }

        var newEntity = new Entity
        {
            Name = entityName,
            Observation = observations,
            Enabled = true
        };

        context.Entities.Add(newEntity);
        await context.SaveChangesAsync();

        foreach (var fleet in selectedFleets)
        {
            context.EntityFleets.Add(new EntityFleet
            {
                EntityId = newEntity.Id,
                FleetId = fleet.Id
            });
        }

        await context.SaveChangesAsync();

        newEntity.EntityFleets = selectedFleets.Select(f => new EntityFleet
        {
            EntityId = newEntity.Id,
            FleetId = f.Id,
            Fleet = f
        }).ToList();

        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Entidade adicionada com sucesso!",
            Icon = SweetAlertIcon.Success,
            ConfirmButtonColor = "#0B5120"
        });

        NavigationManager.NavigateTo("/manageEntities");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/manageEntities");
    }

    private void PrevFleetPage()
    {
        if (currentFleetPage > 1)
            currentFleetPage--;
    }

    private void NextFleetPage()
    {
        if (currentFleetPage < TotalFleetPages)
            currentFleetPage++;
    }
}