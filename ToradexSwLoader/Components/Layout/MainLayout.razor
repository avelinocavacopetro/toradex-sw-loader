@using BlazorBootstrap
@using Microsoft.AspNetCore.Localization
@using Microsoft.EntityFrameworkCore
@using ToradexSwLoader.Components.Pages
@using ToradexSwLoader.Data
@using ToradexSwLoader.Services
@inherits LayoutComponentBase
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IStringLocalizer<Resource> localizer
@inject IJSRuntime _jsRuntime
@inject IToastService ToastService
@inject NavigationManager Navigation
@inject LoginService LoginService
@inject FinalProductStateService ProductState

<BlazoredToasts Position="ToastPosition.BottomRight"></BlazoredToasts>
 
<div class="layout-container">
    @if (!IsRootPage())
    {
        <header class="topbar">
            @if (ShouldShowSidebar())
            {
                @if (!sidebarVisible)
                {
                    <i class="bi bi-list fs-2" @onclick="SidebarIconOnClick" style="cursor: pointer;"></i>
                }
                else
                {
                    <i class="bi bi-list-nested fs-2" @onclick="SidebarIconOnClick" style="cursor: pointer;"></i>
                }
            }
            else
            {
                <i class="bi bi-list fs-2 invisible"></i>
            }

            <div class="container-fluid">
                <div class="row w-100 align-items-center">
                    <div class="col text-start">
                        <a class="navbar-brand" style="color: white; font-size: 1.5rem;" href="/home">
                            ToradexSwLoader
                        </a>
                    </div>

                    <div class="col text-center">
                        <span style="font-size: 1.5rem;">@currentTime</span>
                    </div>

                    <div class="col text-end">
                        <div class="user-menu-wrapper d-inline-block">
                            <button @onclick="ToggleMenu" class="user-icon-navbar">
                                <i class="bi bi-person-fill"></i>
                            </button>

                            @if (openMenu)
                            {
                                <div class="user-dropdown">
                                    <button @onclick="ChangePassword" class="dropdown-item">
                                        <i class="bi bi-lock mx-1"></i> @localizer["ChangePassword"]
                                    </button>
                                    <button @onclick="OnShowModalClick" class="dropdown-item">
                                        <i class="bi bi-question-circle mx-1"></i> @localizer["About"]
                                    </button>
                                    <button @onclick="Logout" class="dropdown-item">
                                        <i class="bi bi-box-arrow-right mx-1"></i> @localizer["Logout"]
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

        </header>
    }

    <div class="main-container">
        @if (ShouldShowSidebar())
        {
            <nav class="sidebar @(sidebarVisible ? "show" : "hide")">
                <NavMenu />
            </nav>
        }

        <main class="content-area">
            @Body

            <Modal @ref="modalAbout" Title="@localizer["About"]" IsVerticallyCentered="true">
                <BodyTemplate>
                    <div style="width: 450px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom:10px;">
                            <strong>@localizer["Version"]:</strong>
                            <div style="text-align: right; flex-grow: 1;">@AppVersion</div>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <strong>@localizer["BaseUrl"]:</strong>
                            <div style="text-align: right; flex-grow: 1;">@AppUrl</div>
                        </div>
                    </div>
                </BodyTemplate>
            </Modal>

            <Modal @ref="modalPassword" Title="@localizer["ChangePassword"]" IsVerticallyCentered="true" OnHidden="ResetPasswordForm">
                <BodyTemplate>
                    <div class="form-floating mb-3 position-relative">
                        <input type="password" class="form-control pe-5" @bind="currentPassword" autocomplete="current-password" aria-required="true" placeholder="@localizer["CurrentPassword"]" id="password" />
                        <label for="password" class="form-label">@localizer["CurrentPassword"]</label>
                        <i class="bi bi-lock-fill position-absolute top-50 end-0 translate-middle-y me-3"></i>
                    </div>
                    <div class="form-floating mb-3 position-relative">
                        <input type="password" class="form-control pe-5" @bind="newPassword" autocomplete="current-password" aria-required="true" placeholder="@localizer["NewPassword"]" id="password" />
                        <label for="password" class="form-label">@localizer["NewPassword"]</label>
                        <i class="bi bi-lock-fill position-absolute top-50 end-0 translate-middle-y me-3"></i>
                    </div>
                    <div class="form-floating mb-5 position-relative">
                        <input type="password" class="form-control pe-5" @bind="confirmPassword" autocomplete="current-password" aria-required="true" placeholder="@localizer["ConfirmPassword"]" id="password" />
                        <label for="password" class="form-label">@localizer["ConfirmPassword"]</label>
                        <i class="bi bi-lock-fill position-absolute top-50 end-0 translate-middle-y me-3"></i>
                    </div>
                    <div class="text-center">
                        <a class="w-50 btn btn-custom btn-lg btn-color" @onclick="ChangeNewPassword">@localizer["Change"]</a>
                    </div>
                </BodyTemplate>
            </Modal>
        </main>
    </div>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<style>

    .logout, .logout:hover {
        text-decoration: none !important;
        color: white;
    }

    span, .logout, .nav-link {
        font-size: 20px;
    }

    .top-row {
        color: white;
    }
</style>

@code {
    // Variáveis: Object
    Modal modalAbout = new();
    Modal modalPassword = new();
    System.Timers.Timer timer = new();

    // Variáveis: String
    string currentTime = string.Empty;
    string username = string.Empty;
    string currentPassword = string.Empty;
    string newPassword = string.Empty;
    string confirmPassword = string.Empty;
    const string AppVersion = "2.0.2";
    const string AppUrl = "https://172.16.50.146:7023/";

    // Variáveis: Boolean
    bool openMenu = false;
    bool sidebarVisible = false;

    protected override async Task OnInitializedAsync()
    {
        currentTime = DateTime.Now.ToString("HH:mm:ss");

        timer = new System.Timers.Timer(1000);
        timer.Elapsed += UpdateTime;
        timer.AutoReset = true;
        timer.Enabled = true;

        username = LoginService.Username;
        LoginService.OnLoginChanged += OnLoginChanged;

        if (LoginService.IsLoggedIn)
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var user = await context.Users.FindAsync(LoginService.UserId);

            if (user != null && !string.IsNullOrWhiteSpace(user.Culture))
            {
                var culture = new CultureInfo(user.Culture);
                CultureInfo.CurrentCulture = culture;
                CultureInfo.CurrentUICulture = culture;
                Thread.CurrentThread.CurrentCulture = culture;
                Thread.CurrentThread.CurrentUICulture = culture;
            }
        }
    }

    void SidebarIconOnClick()
    {
        sidebarVisible = !sidebarVisible;
    }

    async Task OnShowModalClick()
    {
        await modalAbout.ShowAsync();
        openMenu = !openMenu;
    }

    async Task ChangePassword()
    {
        await modalPassword.ShowAsync();
        openMenu = !openMenu;
    }

    async Task ChangeNewPassword()
    {
        if (string.IsNullOrWhiteSpace(currentPassword) || string.IsNullOrWhiteSpace(newPassword) || string.IsNullOrWhiteSpace(confirmPassword))
        {
            ToastService.ShowWarning(@localizer["RequiredInputs"]);
            return;
        }

        if (newPassword != confirmPassword)
        {
            ToastService.ShowError(@localizer["PasswordsNoMatch"]);
            return;
        }

        var success = await LoginService.ChangePasswordAsync(username!, currentPassword, newPassword);

        if (success)
        {
            ToastService.ShowSuccess(@localizer["PasswordsMatch"]);

            ResetPasswordForm();

            await modalPassword.HideAsync();
        }
        else
        {
            ToastService.ShowError(@localizer["VerifyPassword"]);
            return;
        }
    }

    void ResetPasswordForm()
    {
        currentPassword = string.Empty;
        newPassword = string.Empty;
        confirmPassword = string.Empty;
    }

    void Logout()
    {
        LoginService.Logout();
        Navigation.NavigateTo("");
        openMenu = !openMenu;
    }

    void ToggleMenu()
    {
        openMenu = !openMenu;
    }

    void OnLoginChanged()
    {
        username = LoginService.Username;
        InvokeAsync(StateHasChanged);
    }

    async void UpdateTime(object? sender, System.Timers.ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            currentTime = DateTime.Now.ToString("HH:mm:ss");

            using var context = DbContextFactory.CreateDbContext();
            var latest = await context.FinalProducts
                .Include(fp => fp.UserPetrotec)
                .OrderByDescending(fp => fp.CreatedAt)
                .ToListAsync();

            ProductState.SetFinalProducts(latest);

            StateHasChanged();
        });
    }

    public void Dispose()
    {
        timer?.Dispose();
        LoginService.OnLoginChanged -= OnLoginChanged;
    }

    bool ShouldShowSidebar()
    {
        var relativePath = Navigation.ToBaseRelativePath(Navigation.Uri);
        relativePath = "/" + relativePath.TrimStart('/');

        var pages = new[] { 
            "/home", 
            "/manageDevices", 
            "/manageDevices/add", 
            "/manageDevices/edit", 
            "/manageProducts", 
            "/manageProducts/add",
            "/manageProducts/edit",
            "/manageStacks", 
            "/manageStacks/add", 
            "/manageStacks/edit", 
            "/managePackages", 
            "/managePackages/add", 
            "/managePackages/edit", 
            "/manageFleets",
            "/manageEntities", 
            "/manageEntities/add", 
            "/manageEntities/edit", 
            "/manageUsers", 
            "/manageUsers/add", 
            "/manageUsers/edit", 
            "/manageSecret", 
            "/managePatterns", 
            "/managePatterns/add", 
            "/managePatterns/edit",
            "/adminHistory",
            "/devices",
            "/maintenance"
        };

        if (string.IsNullOrEmpty(relativePath)) 
            return false;

        if (pages.Contains(relativePath, StringComparer.OrdinalIgnoreCase))
            return true;

        if (relativePath.Contains("/edit/", StringComparison.OrdinalIgnoreCase) ||
            relativePath.EndsWith("/edit", StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    bool IsRootPage()
    {
        var relativePath = Navigation.ToBaseRelativePath(Navigation.Uri);
        return string.IsNullOrEmpty(relativePath) || relativePath == "/";
    }

    bool IsHomePage()
    {
        var relativePath = Navigation.ToBaseRelativePath(Navigation.Uri);
        relativePath = "/" + relativePath.TrimStart('/');
        return relativePath.Equals("/home", StringComparison.OrdinalIgnoreCase);
    }
}