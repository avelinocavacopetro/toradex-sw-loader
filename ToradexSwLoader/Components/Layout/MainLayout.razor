@inherits LayoutComponentBase
@inject NavigationManager Navigation

<div class="page">

    @if (IsCurrentPage("/home"))
    {
        <div class="sidebar">
            <NavMenu />
        </div>
    }
    else
    {
        <div></div>
    }

    <main>
        @if (IsCurrentPage("/"))
        {
            <article class="content px-4">  
                @Body
            </article>
        } else{
             <div class="top-row px-4 d-flex justify-content-between">
                <span>Nome Colaborador</span>
                <span>@currentTime</span>
                @if (IsCurrentPage("/home"))
                {
                    <a href="" class="logout" target="">Terminar Sessão</a>
                }
             </div>
            <article class="content px-4">
                @Body
            </article>
        }
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<style>
    .logout, .logout:hover {
        text-decoration: none !important;
        color: white;
    }

    span, .logout, .nav-link{
        font-size: 20px;
    }

    .top-row {
        color:white;
    }
</style>


@code {
    private string currentTime;
    private System.Timers.Timer timer;

    protected override void OnInitialized()
    {
        currentTime = DateTime.Now.ToString("HH:mm:ss");

        timer = new System.Timers.Timer(1000);
        timer.Elapsed += UpdateTime;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void UpdateTime(object sender, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            currentTime = DateTime.Now.ToString("HH:mm:ss");
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private bool IsCurrentPage(string page)
    {
        var relativePath = Navigation.ToBaseRelativePath(Navigation.Uri);
        relativePath = "/" + relativePath.TrimStart('/');

        return string.IsNullOrEmpty(relativePath) && page == "/" || relativePath == page;
    }
}